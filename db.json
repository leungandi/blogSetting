{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon1.ico","path":"favicon1.ico","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/about/2_wechat.jpg","path":"images/about/2_wechat.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/images/Hexo_blog/git/2_create.jpg","path":"images/Hexo_blog/git/2_create.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/1_newdir.jpg","path":"images/Hexo_blog/hexo/1_newdir.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/2_version.jpg","path":"images/Hexo_blog/hexo/2_version.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/3_init.jpg","path":"images/Hexo_blog/hexo/3_init.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/4_dir.jpg","path":"images/Hexo_blog/hexo/4_dir.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/5_server.jpg","path":"images/Hexo_blog/hexo/5_server.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/index.jpg","path":"images/Hexo_blog/hexo/index.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/git/1_index.jpg","path":"images/Hexo_blog/git/1_index.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/nodejs/nodejs_version.jpg","path":"images/Hexo_blog/nodejs/nodejs_version.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/nodejs/nodejs安装.jpg","path":"images/Hexo_blog/nodejs/nodejs安装.jpg","modified":0,"renderable":0},{"_id":"source/images/spring/1/spirng架构图.JPG","path":"images/spring/1/spirng架构图.JPG","modified":0,"renderable":0},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"source/images/Hexo_blog/git/index.jpg","path":"images/Hexo_blog/git/index.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/6_index.jpg","path":"images/Hexo_blog/hexo/6_index.jpg","modified":0,"renderable":0},{"_id":"source/images/about/1_index.jpg","path":"images/about/1_index.jpg","modified":0,"renderable":0},{"_id":"source/images/Hexo_blog/nodejs/nodejs官网下载.jpg","path":"images/Hexo_blog/nodejs/nodejs官网下载.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a680d065d1683c9cba36ec8c740c13348ca84385","modified":1495707964330},{"_id":"source/favicon1.ico","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1495707964334},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1495707964393},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1495707964394},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1495707964394},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1495707964395},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1495707964395},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1495707964396},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1495707964395},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1495707964396},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1495707964396},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1495707964396},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1495707964397},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1495707964397},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1495707964398},{"_id":"themes/next/_config.yml","hash":"7cf2db8d9b86b439b5239dce7724050fbb98ff40","modified":1495707964397},{"_id":"source/favicon.ico","hash":"5707d09082add38a4c671b5aae22459d357345da","modified":1495707964333},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1495707964398},{"_id":"source/about/index.md","hash":"9cac6cce962c7b1283e4c10fcbd5192c4becc122","modified":1495707964332},{"_id":"source/categories/index.md","hash":"cecfc19e7ac7aea9cf88735f0714015b1df83e90","modified":1495707964332},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1495707964394},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1495707964395},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1495707964431},{"_id":"source/tags/index.md","hash":"12dadd3b64b5e8482b5c5266cc675d790b4eea51","modified":1495707964359},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1495707964398},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1495707964399},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1495707964399},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1495707964399},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1495707964400},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1495707964402},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1495707964403},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1495707964403},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1495707964402},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1495707964403},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1495707964404},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1495707964405},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1495707964404},{"_id":"themes/next/layout/category.swig","hash":"be617f098582c4b110935a6d3551f0a8d09fda5a","modified":1495707964428},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1495707964429},{"_id":"themes/next/layout/page.swig","hash":"0a8783d44db72e134db5e221705c74b4731826c9","modified":1495707964429},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1495707964429},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1495707964429},{"_id":"themes/next/layout/tag.swig","hash":"4d891cb52bbd1b584b1c38669968515987e73e12","modified":1495707964430},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1495707964432},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1495707964433},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1495707964404},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1495707964428},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1495707964531},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1495707964532},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1495707964532},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964473},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495707964405},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1495707964406},{"_id":"source/_posts/杂谈/hello-hexo.md","hash":"b45a62c35656c8bdae957667cb5a3ce2e4ef66f8","modified":1495707964330},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495707964405},{"_id":"source/images/about/2_wechat.jpg","hash":"78b4db958144c37a343b3ddc37f6282f0e0afd64","modified":1495707964359},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1495707964407},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1495707964406},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1495707964407},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1495707964410},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1495707964410},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1495707964408},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1495707964410},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1495707964424},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1495707964424},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4ef13e3f6ef564e75218b6d79ff2570fda84cdfd","modified":1495707964408},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1495707964425},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1495707964425},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1495707964409},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1495707964413},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1495707964414},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1495707964410},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1495707964424},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1495707964433},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1495707964434},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1495707964434},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1495707964434},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1495707964435},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1495707964435},{"_id":"themes/next/layout/_macro/post.swig","hash":"3115575c20f7f78734c90faf590f2baea8d08888","modified":1495707964406},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1495707964407},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1495707964417},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1495707964473},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495707964474},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495707964474},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495707964475},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495707964475},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495707964476},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495707964476},{"_id":"themes/next/source/images/avatar.png","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1495707964475},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495707964477},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495707964477},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495707964476},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495707964477},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495707964477},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495707964478},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964416},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964415},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964461},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964461},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964463},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964471},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964472},{"_id":"source/_posts/编程/spring/第一篇之初识Spring.md","hash":"4127ba3dec9e881c486d2cb5aa0ba998abbd29dc","modified":1495788249921},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495707964478},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495707964478},{"_id":"source/images/Hexo_blog/git/2_create.jpg","hash":"51d6a7d4b4fd18d06d94afde2434b04acc5965a0","modified":1495707964336},{"_id":"source/_posts/编程/log/Logback配置总结.md","hash":"c02f143fa79433584e379c86fbefec2e9b747f76","modified":1495707964331},{"_id":"source/_posts/编程/blog/搭建hexo+gitHub博客.md","hash":"6a1eb723bb9497381d2667e141ba1955eba642a7","modified":1495707964331},{"_id":"source/images/Hexo_blog/hexo/1_newdir.jpg","hash":"05db3b49b764e90f67f0bcb1a1f49e71d1808353","modified":1495707964339},{"_id":"source/images/Hexo_blog/hexo/2_version.jpg","hash":"909f09eea4ccb8a1d993ee82af869d583758f951","modified":1495707964341},{"_id":"source/_posts/编程/spring/第二篇之Spirng IOC.md","hash":"68f623cd0529b20e59a3a9f26f325c95905cb904","modified":1495788187751},{"_id":"source/images/Hexo_blog/hexo/3_init.jpg","hash":"cc022c20bb1ef5dd51cf6bf0add22725d772f40a","modified":1495707964344},{"_id":"source/images/Hexo_blog/hexo/4_dir.jpg","hash":"0254027083ff09b0a3d7eaad861a61749c96720c","modified":1495707964345},{"_id":"source/images/Hexo_blog/hexo/5_server.jpg","hash":"c516be1844fc0dece67a14434809b83447172d8e","modified":1495707964346},{"_id":"source/images/Hexo_blog/hexo/index.jpg","hash":"26d135cd37a0c27b13628f4d809613dedbc25070","modified":1495707964349},{"_id":"source/images/Hexo_blog/git/1_index.jpg","hash":"76a6e77119a0190080435fb43b77b1e0e8dfdb7a","modified":1495707964335},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1495707964409},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1495707964409},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1495707964411},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1495707964411},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1495707964411},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1495707964412},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1495707964412},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1495707964412},{"_id":"source/images/Hexo_blog/nodejs/nodejs_version.jpg","hash":"d15976829e6616ba75db78dfc508a7c018ca4099","modified":1495707964350},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1495707964413},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1495707964418},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1495707964418},{"_id":"source/images/Hexo_blog/nodejs/nodejs安装.jpg","hash":"c7347ecdfac7f533f6a2be5d863a773c27868aa4","modified":1495707964354},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1495707964420},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1495707964421},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1495707964421},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1495707964422},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1495707964422},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1495707964423},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1495707964422},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1495707964423},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1495707964426},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1495707964423},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1495707964428},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1495707964423},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1495707964414},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1495707964417},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1495707964427},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"c6b610d8965615f25279ba63d14dccbb11cfc41f","modified":1495707964427},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1495707964460},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1495707964461},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1495707964471},{"_id":"source/images/spring/1/spirng架构图.JPG","hash":"feab7dab5631cd508f9dc5b4a0c0d890950eb719","modified":1495684432193},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1495707964462},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1495707964472},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1495707964472},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1495707964500},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1495707964494},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495707964490},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1495707964501},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495707964500},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1495707964504},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1495707964505},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495707964505},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1495707964505},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1495707964516},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1495707964501},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1495707964493},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1495707964504},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1495707964519},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1495707964518},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1495707964518},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1495707964518},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1495707964519},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1495707964527},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1495707964519},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1495707964479},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1495707964479},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1495707964480},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1495707964480},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1495707964480},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1495707964531},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1495707964481},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1495707964531},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1495707964483},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1495707964530},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1495707964481},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1495707964484},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1495707964484},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1495707964520},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1495707964521},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1495707964481},{"_id":"source/images/Hexo_blog/git/index.jpg","hash":"2a206433771623741feffee1737f3164ae94b3ed","modified":1495707964338},{"_id":"source/images/Hexo_blog/hexo/6_index.jpg","hash":"6201560316586f879556c7198d86781797568e5f","modified":1495707964348},{"_id":"source/images/about/1_index.jpg","hash":"66d6a1aec30ac04a2342c80673d77ca555b1d450","modified":1495707964357},{"_id":"source/images/Hexo_blog/nodejs/nodejs官网下载.jpg","hash":"8d389105e0cf5f823d1bf4746f93ab2921148b0b","modified":1495707964355},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1495707964520},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1495707964517},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1495707964528},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1495707964426},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1495707964426},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1495707964436},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1495707964438},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1495707964452},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1495707964437},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1495707964437},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1495707964438},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1495707964460},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1495707964443},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1495707964458},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1495707964467},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1495707964467},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1495707964468},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495707964468},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1495707964460},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1495707964468},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1495707964464},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1495707964464},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1495707964465},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1495707964465},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1495707964459},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495707964466},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1495707964466},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1495707964469},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1495707964471},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1495707964458},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1495707964458},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1495707964465},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1495707964489},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495707964495},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1495707964489},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495707964495},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495707964496},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495707964496},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1495707964499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495707964495},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495707964496},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1495707964503},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1495707964500},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1495707964499},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495707964503},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1495707964506},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1495707964507},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1495707964527},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1495707964483},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1495707964487},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1495707964488},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1495707964527},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495707964506},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1495707964529},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1495707964439},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1495707964439},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1495707964439},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1495707964440},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1495707964440},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1495707964440},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1495707964441},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1495707964438},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1495707964442},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1495707964442},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1495707964442},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1495707964443},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1495707964444},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1495707964444},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1495707964441},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1495707964445},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1495707964443},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1495707964445},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1495707964444},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1495707964515},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1495707964445},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1495707964446},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1495707964448},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1495707964449},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1495707964449},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1495707964449},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1495707964450},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1495707964450},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1495707964450},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1495707964452},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1495707964448},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1495707964453},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1495707964453},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1495707964453},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1495707964452},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1495707964454},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1495707964454},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1495707964455},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1495707964457},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1495707964455},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1495707964457},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1495707964457},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495707964469},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1495707964466},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495707964467},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1495707964456},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1495707964486},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1495707964485},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1495707964486},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1495707964486},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1495707964497},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1495707964498},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495707964497},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1495707964498},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1495707964498},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1495707964509},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1495707964512},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1495707964515},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1495707964498},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1495707964454},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1495707964447},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1495707964516},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1495707964493},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1495707964526},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1495707964513},{"_id":"public/about/index.html","hash":"a483be57e9181f463c6230283fecb0b89c0ca04b","modified":1495788327767},{"_id":"public/categories/index.html","hash":"1105c5991d52dc5ff2deb345d41bc25f8c8c7ca3","modified":1495788327768},{"_id":"public/tags/index.html","hash":"fe5cce45905cb5a49669918d5bfcbc13edc866db","modified":1495788327768},{"_id":"public/archives/index.html","hash":"f4de693694c1e926222034f846cb5bf47449afcb","modified":1495788327768},{"_id":"public/archives/2017/index.html","hash":"f6853caf70dfe63c734ef7854334a14ca282ce09","modified":1495788327768},{"_id":"public/archives/2017/05/index.html","hash":"3eab9639dcf6c1ff8a8b78f362161371111f8f6a","modified":1495788327768},{"_id":"public/categories/杂谈/index.html","hash":"3632e8b6df2bf6581835fbb43ca1218f94815e1c","modified":1495788327768},{"_id":"public/categories/Spring的那点事/index.html","hash":"6eb218e021877c2621ac8624ceeb172ec9b870aa","modified":1495788327768},{"_id":"public/categories/log/index.html","hash":"c5c5b9defa5d77b3a79aa2b540a8a19f91004182","modified":1495788327769},{"_id":"public/categories/编程/index.html","hash":"8b39dc8aa39d44a9ac4d19c76ade71dd5de232a7","modified":1495788327769},{"_id":"public/tags/Spring/index.html","hash":"7091e0dee15c5a3a31351a416340427953718c23","modified":1495788327769},{"_id":"public/tags/logback/index.html","hash":"3d52e62fc6a6f662b9b808aecb95ff705c0b1ca5","modified":1495788327769},{"_id":"public/2017/05/02/杂谈/hello-hexo/index.html","hash":"5ccea4afd932c1930cf879031c27652b87e96a5e","modified":1495788327769},{"_id":"public/2017/05/09/编程/blog/搭建hexo+gitHub博客/index.html","hash":"cd4d568e78fb07dad20edfccc822bd5659acd11a","modified":1495788327769},{"_id":"public/2017/05/11/编程/log/Logback配置总结/index.html","hash":"eaf0f0d42358946724ae129e9987e341d910ab16","modified":1495788327773},{"_id":"public/2017/05/25/编程/spring/第一篇之初识Spring/index.html","hash":"557c791bf51fe7935b7ee83fbb42cfb278ff6af7","modified":1495788327773},{"_id":"public/2017/05/26/编程/spring/第二篇之Spirng IOC/index.html","hash":"4c358ddaa35f6ad1fe3c356a1abeab0e74d3daaa","modified":1495788327773},{"_id":"public/index.html","hash":"6cb9433e0f3ae9db9d50c27375bedd0f2c13bdb0","modified":1495788327773},{"_id":"public/CNAME","hash":"a680d065d1683c9cba36ec8c740c13348ca84385","modified":1495788327864},{"_id":"public/favicon1.ico","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1495788327865},{"_id":"public/images/about/2_wechat.jpg","hash":"78b4db958144c37a343b3ddc37f6282f0e0afd64","modified":1495788327865},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495788327865},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495788327865},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495788327865},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495788327865},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495788327865},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495788327865},{"_id":"public/images/avatar.png","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1495788327865},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495788327865},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495788327865},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495788327865},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495788327865},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495788327865},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495788327865},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495788327866},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495788327866},{"_id":"public/images/Hexo_blog/git/2_create.jpg","hash":"51d6a7d4b4fd18d06d94afde2434b04acc5965a0","modified":1495788327866},{"_id":"public/images/Hexo_blog/hexo/1_newdir.jpg","hash":"05db3b49b764e90f67f0bcb1a1f49e71d1808353","modified":1495788327866},{"_id":"public/images/Hexo_blog/hexo/3_init.jpg","hash":"cc022c20bb1ef5dd51cf6bf0add22725d772f40a","modified":1495788327866},{"_id":"public/images/Hexo_blog/hexo/2_version.jpg","hash":"909f09eea4ccb8a1d993ee82af869d583758f951","modified":1495788327866},{"_id":"public/images/Hexo_blog/hexo/4_dir.jpg","hash":"0254027083ff09b0a3d7eaad861a61749c96720c","modified":1495788327866},{"_id":"public/images/Hexo_blog/hexo/5_server.jpg","hash":"c516be1844fc0dece67a14434809b83447172d8e","modified":1495788327866},{"_id":"public/images/Hexo_blog/hexo/index.jpg","hash":"26d135cd37a0c27b13628f4d809613dedbc25070","modified":1495788327866},{"_id":"public/images/Hexo_blog/git/1_index.jpg","hash":"76a6e77119a0190080435fb43b77b1e0e8dfdb7a","modified":1495788327866},{"_id":"public/images/Hexo_blog/nodejs/nodejs_version.jpg","hash":"d15976829e6616ba75db78dfc508a7c018ca4099","modified":1495788327866},{"_id":"public/images/Hexo_blog/nodejs/nodejs安装.jpg","hash":"c7347ecdfac7f533f6a2be5d863a773c27868aa4","modified":1495788327866},{"_id":"public/images/spring/1/spirng架构图.JPG","hash":"feab7dab5631cd508f9dc5b4a0c0d890950eb719","modified":1495788327867},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495788327867},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495788327867},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495788327867},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495788327867},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495788327867},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495788327867},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495788327867},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495788327867},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495788327867},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1495788327867},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1495788327867},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1495788327867},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1495788327867},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495788327867},{"_id":"public/favicon.ico","hash":"5707d09082add38a4c671b5aae22459d357345da","modified":1495788328907},{"_id":"public/images/Hexo_blog/git/index.jpg","hash":"2a206433771623741feffee1737f3164ae94b3ed","modified":1495788328909},{"_id":"public/images/Hexo_blog/hexo/6_index.jpg","hash":"6201560316586f879556c7198d86781797568e5f","modified":1495788328923},{"_id":"public/images/Hexo_blog/nodejs/nodejs官网下载.jpg","hash":"8d389105e0cf5f823d1bf4746f93ab2921148b0b","modified":1495788328923},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1495788328924},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1495788328924},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1495788328931},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495788328931},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1495788328931},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1495788328931},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1495788328931},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1495788328931},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1495788328931},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1495788328931},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1495788328931},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1495788328931},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1495788328931},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1495788328931},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1495788328931},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1495788328931},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1495788328931},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1495788328931},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1495788328931},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1495788328932},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1495788328932},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1495788328932},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1495788328932},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1495788328932},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1495788328932},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1495788328932},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1495788328932},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495788328932},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1495788328932},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1495788328932},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1495788328932},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1495788328932},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1495788328932},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1495788328932},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1495788328932},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1495788328932},{"_id":"public/css/main.css","hash":"237158b482401c7bb68585d058fdfefa40fc7aba","modified":1495788328932},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1495788328932},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1495788328932},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1495788328932},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1495788328932},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1495788328932},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1495788328932},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1495788328932},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1495788328933},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1495788328933},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1495788328933},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1495788328933},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1495788328933},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1495788328933},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1495788328933},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1495788328933},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1495788328933},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1495788328933},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1495788328933},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1495788328933},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1495788328933},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1495788328934},{"_id":"public/images/about/1_index.jpg","hash":"66d6a1aec30ac04a2342c80673d77ca555b1d450","modified":1495788328941},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1495788328956}],"Category":[{"name":"杂谈","_id":"cj35lqyzx0004hcqyga9g72r4"},{"name":"Spring的那点事","_id":"cj35lqz200008hcqynuwfdzpx"},{"name":"log","_id":"cj35lqz2a000chcqyejhtm0s6"},{"name":"编程","_id":"cj35lqz2c000hhcqyj79k5bx0"}],"Data":[],"Page":[{"title":"about","date":"2017-05-02T10:26:43.000Z","tags":null,"_content":"\n![](/images/about/1_index.jpg)\n\n### 关于我  \n  I'm Andrew Song\n  坐标：深圳宝安\n  Java开发工程师\n  快乐生活,快乐工作！\n  \n  ---\n  \n### 联系我  \n\nWeChat:  \n![](/images/about/2_wechat.jpg)\n  \n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-05-02 18:26:43\ntags:\n---\n\n![](/images/about/1_index.jpg)\n\n### 关于我  \n  I'm Andrew Song\n  坐标：深圳宝安\n  Java开发工程师\n  快乐生活,快乐工作！\n  \n  ---\n  \n### 联系我  \n\nWeChat:  \n![](/images/about/2_wechat.jpg)\n  \n\n\n\n\n","updated":"2017-05-25T10:26:04.332Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj35lqyxg0000hcqypxzo4ak2","content":"<p><img src=\"/images/about/1_index.jpg\" alt=\"\"></p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>  I’m Andrew Song<br>  坐标：深圳宝安<br>  Java开发工程师<br>  快乐生活,快乐工作！</p>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>WeChat:<br><img src=\"/images/about/2_wechat.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/about/1_index.jpg\" alt=\"\"></p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>  I’m Andrew Song<br>  坐标：深圳宝安<br>  Java开发工程师<br>  快乐生活,快乐工作！</p>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>WeChat:<br><img src=\"/images/about/2_wechat.jpg\" alt=\"\"></p>\n"},{"title":"categories","date":"2017-05-09T07:49:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-05-09 15:49:50\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-25T10:26:04.332Z","path":"categories/index.html","layout":"page","_id":"cj35lqyxk0001hcqy8wz61vxk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-05-09T08:49:50.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-09 16:49:50\ntype: \"tags\"\ncomments: false\n---","updated":"2017-05-25T10:26:04.359Z","path":"tags/index.html","layout":"page","_id":"cj35lqyxn0002hcqyb5rco4o8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello Hexo","date":"2017-05-02T06:26:04.000Z","comments":1,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n### 博客简介  \n\n嘿,这是我的博客,使用hexo+gitHub搭建的!\n  \n之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于度娘,如此循环,在搜索上浪费了很多时间,后来\n使用书签和云笔记的来记录,这情况才得以改善一二. \n \n看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,**只要开始,就不晚!**    \n\nso,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  \n\n一起加油吧！！！\n  \n### 约法二章\n- 如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;\n- 如果您想转载本博客文章,无须申请授权,注明出处即可;\n\n\n\n","source":"_posts/杂谈/hello-hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2017-05-02 14:26:04\ntags:\ncategories: 杂谈\ncomments: true\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n### 博客简介  \n\n嘿,这是我的博客,使用hexo+gitHub搭建的!\n  \n之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于度娘,如此循环,在搜索上浪费了很多时间,后来\n使用书签和云笔记的来记录,这情况才得以改善一二. \n \n看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,**只要开始,就不晚!**    \n\nso,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  \n\n一起加油吧！！！\n  \n### 约法二章\n- 如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;\n- 如果您想转载本博客文章,无须申请授权,注明出处即可;\n\n\n\n","slug":"杂谈/hello-hexo","published":1,"updated":"2017-05-25T10:26:04.330Z","layout":"post","photos":[],"link":"","_id":"cj35lqyzr0003hcqyffqvjgnl","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n<h3 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h3><p>嘿,这是我的博客,使用hexo+gitHub搭建的!</p>\n<p>之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于度娘,如此循环,在搜索上浪费了很多时间,后来<br>使用书签和云笔记的来记录,这情况才得以改善一二. </p>\n<p>看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,<strong>只要开始,就不晚!</strong>    </p>\n<p>so,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  </p>\n<p>一起加油吧！！！</p>\n<h3 id=\"约法二章\"><a href=\"#约法二章\" class=\"headerlink\" title=\"约法二章\"></a>约法二章</h3><ul>\n<li>如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;</li>\n<li>如果您想转载本博客文章,无须申请授权,注明出处即可;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n<h3 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h3><p>嘿,这是我的博客,使用hexo+gitHub搭建的!</p>\n<p>之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于度娘,如此循环,在搜索上浪费了很多时间,后来<br>使用书签和云笔记的来记录,这情况才得以改善一二. </p>\n<p>看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,<strong>只要开始,就不晚!</strong>    </p>\n<p>so,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  </p>\n<p>一起加油吧！！！</p>\n<h3 id=\"约法二章\"><a href=\"#约法二章\" class=\"headerlink\" title=\"约法二章\"></a>约法二章</h3><ul>\n<li>如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;</li>\n<li>如果您想转载本博客文章,无须申请授权,注明出处即可;</li>\n</ul>\n"},{"title":"第一篇之初识Spring","date":"2017-05-25T03:40:00.000Z","_content":"\n### 初识Spring\n#### 简单了解Spring\nSpring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。\n\n### Spring框架结构\n![image](\\images\\spring\\1\\spirng架构图.JPG)\n\n#### Core Container(核心容器)\n由core，Bean，上下文和表达式语言模块组成\n- Core模块：Spring的核心类库，主要实现Ioc功能。\n- Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。\n- Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。\n- EL模块：提供强大的表达式语言支持。\n#### Date Access/Integration(数据访问/集成模块)\n包括JDBC，ORM，OXM，JMS 和事务处理模块\n- JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。\n- ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。\n- OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。\n- JMS：Java Messaging Service\n- Transactions：用于Spring管理事务，支持编程和声明性的事物管理。\n#### Web\n由 Web，Servlet，Struts 和 Portlet 组成\n- Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。\n- Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。\n- Web-Struts：提供了与Struts无缝集成。\n- Portlet：提供Portlet环境中实现MVC。\n#### Aop&Aspects\n- Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。\n- Aspects：提供了与 AspectJ 的集成。\n#### Instrumentaiion\n模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。\n#### Test\nSpring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。\n### Spring的特点\n- 轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。\n- 事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。\n- AOP支持：方便面向切面编程，把通用的功能提取出来。\n- JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。\n- Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。","source":"_posts/编程/spring/第一篇之初识Spring.md","raw":"---\ntitle: 第一篇之初识Spring\ndate: 2017-05-25 11:40\ncategories: Spring的那点事\ntags: Spring\n---\n\n### 初识Spring\n#### 简单了解Spring\nSpring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。\n\n### Spring框架结构\n![image](\\images\\spring\\1\\spirng架构图.JPG)\n\n#### Core Container(核心容器)\n由core，Bean，上下文和表达式语言模块组成\n- Core模块：Spring的核心类库，主要实现Ioc功能。\n- Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。\n- Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。\n- EL模块：提供强大的表达式语言支持。\n#### Date Access/Integration(数据访问/集成模块)\n包括JDBC，ORM，OXM，JMS 和事务处理模块\n- JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。\n- ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。\n- OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。\n- JMS：Java Messaging Service\n- Transactions：用于Spring管理事务，支持编程和声明性的事物管理。\n#### Web\n由 Web，Servlet，Struts 和 Portlet 组成\n- Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。\n- Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。\n- Web-Struts：提供了与Struts无缝集成。\n- Portlet：提供Portlet环境中实现MVC。\n#### Aop&Aspects\n- Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。\n- Aspects：提供了与 AspectJ 的集成。\n#### Instrumentaiion\n模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。\n#### Test\nSpring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。\n### Spring的特点\n- 轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。\n- 事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。\n- AOP支持：方便面向切面编程，把通用的功能提取出来。\n- JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。\n- Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。","slug":"编程/spring/第一篇之初识Spring","published":1,"updated":"2017-05-26T08:44:09.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj35lqz1x0006hcqyt8p0pero","content":"<h3 id=\"初识Spring\"><a href=\"#初识Spring\" class=\"headerlink\" title=\"初识Spring\"></a>初识Spring</h3><h4 id=\"简单了解Spring\"><a href=\"#简单了解Spring\" class=\"headerlink\" title=\"简单了解Spring\"></a>简单了解Spring</h4><p>Spring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。</p>\n<h3 id=\"Spring框架结构\"><a href=\"#Spring框架结构\" class=\"headerlink\" title=\"Spring框架结构\"></a>Spring框架结构</h3><p><img src=\"\\images\\spring\\1\\spirng架构图.JPG\" alt=\"image\"></p>\n<h4 id=\"Core-Container-核心容器\"><a href=\"#Core-Container-核心容器\" class=\"headerlink\" title=\"Core Container(核心容器)\"></a>Core Container(核心容器)</h4><p>由core，Bean，上下文和表达式语言模块组成</p>\n<ul>\n<li>Core模块：Spring的核心类库，主要实现Ioc功能。</li>\n<li>Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。</li>\n<li>Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。</li>\n<li>EL模块：提供强大的表达式语言支持。<h4 id=\"Date-Access-Integration-数据访问-集成模块\"><a href=\"#Date-Access-Integration-数据访问-集成模块\" class=\"headerlink\" title=\"Date Access/Integration(数据访问/集成模块)\"></a>Date Access/Integration(数据访问/集成模块)</h4>包括JDBC，ORM，OXM，JMS 和事务处理模块</li>\n<li>JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。</li>\n<li>ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。</li>\n<li>OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li>\n<li>JMS：Java Messaging Service</li>\n<li>Transactions：用于Spring管理事务，支持编程和声明性的事物管理。<h4 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h4>由 Web，Servlet，Struts 和 Portlet 组成</li>\n<li>Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。</li>\n<li>Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。</li>\n<li>Web-Struts：提供了与Struts无缝集成。</li>\n<li>Portlet：提供Portlet环境中实现MVC。<h4 id=\"Aop-amp-Aspects\"><a href=\"#Aop-amp-Aspects\" class=\"headerlink\" title=\"Aop&amp;Aspects\"></a>Aop&amp;Aspects</h4></li>\n<li>Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。</li>\n<li>Aspects：提供了与 AspectJ 的集成。<h4 id=\"Instrumentaiion\"><a href=\"#Instrumentaiion\" class=\"headerlink\" title=\"Instrumentaiion\"></a>Instrumentaiion</h4>模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4>Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。<h3 id=\"Spring的特点\"><a href=\"#Spring的特点\" class=\"headerlink\" title=\"Spring的特点\"></a>Spring的特点</h3></li>\n<li>轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。</li>\n<li>事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。</li>\n<li>AOP支持：方便面向切面编程，把通用的功能提取出来。</li>\n<li>JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。</li>\n<li>Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"初识Spring\"><a href=\"#初识Spring\" class=\"headerlink\" title=\"初识Spring\"></a>初识Spring</h3><h4 id=\"简单了解Spring\"><a href=\"#简单了解Spring\" class=\"headerlink\" title=\"简单了解Spring\"></a>简单了解Spring</h4><p>Spring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。</p>\n<h3 id=\"Spring框架结构\"><a href=\"#Spring框架结构\" class=\"headerlink\" title=\"Spring框架结构\"></a>Spring框架结构</h3><p><img src=\"\\images\\spring\\1\\spirng架构图.JPG\" alt=\"image\"></p>\n<h4 id=\"Core-Container-核心容器\"><a href=\"#Core-Container-核心容器\" class=\"headerlink\" title=\"Core Container(核心容器)\"></a>Core Container(核心容器)</h4><p>由core，Bean，上下文和表达式语言模块组成</p>\n<ul>\n<li>Core模块：Spring的核心类库，主要实现Ioc功能。</li>\n<li>Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。</li>\n<li>Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。</li>\n<li>EL模块：提供强大的表达式语言支持。<h4 id=\"Date-Access-Integration-数据访问-集成模块\"><a href=\"#Date-Access-Integration-数据访问-集成模块\" class=\"headerlink\" title=\"Date Access/Integration(数据访问/集成模块)\"></a>Date Access/Integration(数据访问/集成模块)</h4>包括JDBC，ORM，OXM，JMS 和事务处理模块</li>\n<li>JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。</li>\n<li>ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。</li>\n<li>OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li>\n<li>JMS：Java Messaging Service</li>\n<li>Transactions：用于Spring管理事务，支持编程和声明性的事物管理。<h4 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h4>由 Web，Servlet，Struts 和 Portlet 组成</li>\n<li>Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。</li>\n<li>Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。</li>\n<li>Web-Struts：提供了与Struts无缝集成。</li>\n<li>Portlet：提供Portlet环境中实现MVC。<h4 id=\"Aop-amp-Aspects\"><a href=\"#Aop-amp-Aspects\" class=\"headerlink\" title=\"Aop&amp;Aspects\"></a>Aop&amp;Aspects</h4></li>\n<li>Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。</li>\n<li>Aspects：提供了与 AspectJ 的集成。<h4 id=\"Instrumentaiion\"><a href=\"#Instrumentaiion\" class=\"headerlink\" title=\"Instrumentaiion\"></a>Instrumentaiion</h4>模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4>Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。<h3 id=\"Spring的特点\"><a href=\"#Spring的特点\" class=\"headerlink\" title=\"Spring的特点\"></a>Spring的特点</h3></li>\n<li>轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。</li>\n<li>事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。</li>\n<li>AOP支持：方便面向切面编程，把通用的功能提取出来。</li>\n<li>JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。</li>\n<li>Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。</li>\n</ul>\n"},{"title":"Logback配置总结","date":"2017-05-11T07:22:00.000Z","_content":"\n\n### 什么是Logback?  \nLogback是由log4j创始人设计的又一个开源日志组件,[官方网站](http://logback.qos.ch)。\n\n### Logback配置\n#### 根节点configuration\n- 主要包含以下三个子节点\n - appender\n - logger\n - root\n \n```\ngraph TD\nA[configuration]\nA-->B[appender]\nA-->C[logger]\nA-->D[root]\n```\n\n#### 根节点的属性\n - scan:默认为true,当配置文件改变时,是否自动加载;\n - scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;\n - debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<!-- 省略中间的配置 -->\n</configuration>\n```\n\n#### 全局设置\n##### 设置变量\n- 用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用\"${USER_HOME}\"来获取变量的值.\n - name:变量的名称\n - value:变量的值\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n</configuration>\n```\n\n##### 获取时间戳字符串\n- 获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为\"${}\"\n - key:名称\n - datePattern:时间解析为字符串的格式\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n</configuration>\n```\n\n#### 子节点appender\n- appender是负责写日志的组件,有2个属性值:\n - name:appender的名称\n - class:指定appender的全限定名\n\n```\n<!-- demo 1-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\t\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n</configuration>\n```\n\n- appender的clas常用的有三种\n\n```\ngraph TD\nA[appender class]\nA-->B[ch.qos.logback.core.ConsoleAppender]\nA-->C[ch.qos.logback.core.rolling.RollingFileAppender]\nA-->D[ch.qos.logback.core.FileAppender]\n\n```\n\n##### ConsoleAppender:\n日志输出到控制台,配置参考[demo 1]主要有2个子节点:  \n - `<encoder>`:对日志进行格式化;  \n - `<target>`:字符串System.out或者 System.err,默认 System.out;\n \n##### RollingFileAppender:\n滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:\n - `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n - `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n - `<encoder>`:对日志进行格式化\n - `<rollingPolicy>`:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）\n - `<triggeringPolicy>`: 触发器策略\n - `<prudent>`：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空\n    \n```\ngraph TD\nA[rollingPolicy]\nA-->B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]\nA-->C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]\n```\n\n```\n<!-- demo 2-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <!-- 按日志大小切分日志文件 -->\n    \t<!-- \n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${byDay}/${FILE_NAME}-${byDay}-%i.log.zip</fileNamePattern>\n\t\t\t<minIndex>1</minIndex>\n\t\t\t<maxIndex>10</maxIndex>\n\t\t</rollingPolicy>\n        <!-- \n        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动\n        -->\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<maxFileSize>5MB</maxFileSize>\n\t\t</triggeringPolicy>\n \t\t-->\n \t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t\t<!-- 保存?天的日志文件，默认永久保留 -->\n\t\t\t<!-- <maxHistory>30</maxHistory>  -->\n\t\t</rollingPolicy>\n    \t<encoder>\n\t\t    <pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n    \t</encoder>\n    </appender>\n</configuration>\n```\n \n##### FileAppender:\n日志添加到文件  \n- `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n- `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n- `<encoder>`:对日志进行格式化\n- `<prudent>`:是否安全写入文件,默认false,设置为ture会影响效率\n\n```\n<!-- demo 3-->\n<configuration>\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender>  \n</configuration>\n```\n\n#### 子节点logger\n- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性\n - name:用来指定受此loger约束的某一个包或者具体的某一个类\n - level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别\n - addtivity:是否向上级loger传递打印信息,默认是true\n- `<loger>`:可以包含零个或多个`<appender-ref>`元素,标识这个appender将会添加到这个loger\n\n```\n<configuration>  \n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    \t<encoder>\n\t\t    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n    \t</encoder>\n    </appender>\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender> \n    \n    <logger name=\"com.diandian\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n</configuration>\n```\n\n#### 子节点root\n- root其实是一个根logger,name的名称已经被命名为\"root\",level属性的值同logger;\n\t\n#### encoder参数介绍\n- 负责两件事\n - 一是把日志信息转换成字节数组\n - 二是把字节数组写入到输出流\n- 它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义\n\t\n```\n<encoder>  \n  <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n</encoder> \n\n```\n- `<pattern>`格式介绍:\n    \n转换符| 作用\n---|---\nc {length }  lo {length }  logger {length }  |  输出日志的logger名\nd {pattern } date {pattern }     |  输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容\nm msg message    |  输出应用程序提供的信息\nn | 输出平台相关的分行符“\\n”或者“\\r\\n”\np  le  level | 输出日志级别\nr relative | 输出从程序启动到创建日志记录的时间,单位是毫秒\nt thread | 输出线程名\nreplace(p ){r, t} | p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, \"%replace(%msg){'\\s', ''}\"\n\n格式修饰符 | 作用\n--- | ---\n-(减号) | 左对齐\n4(十进制数表示) | 最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断\n.4(点加十进制数表示) | 最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断\n\n**重要**:格式修饰符位于“%”和转换符之间\n\n```\n<!--完整DEMO-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${USER_HOME}/${FILE_NAME}.log</file>\n\t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t</rollingPolicy>\n\t\t<!-- 日志输出格式 -->\n\t\t<encoder>\n\t\t\t<pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n\t\t</encoder>\n\t</appender>\n\t<logger name=\"com.demo\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</root>\n</configuration>\n```\n\n\n\n\n\n","source":"_posts/编程/log/Logback配置总结.md","raw":"---\ntitle: Logback配置总结\ndate: 2017-05-11 15:22\ncategories: log\ntags: logback\n---\n\n\n### 什么是Logback?  \nLogback是由log4j创始人设计的又一个开源日志组件,[官方网站](http://logback.qos.ch)。\n\n### Logback配置\n#### 根节点configuration\n- 主要包含以下三个子节点\n - appender\n - logger\n - root\n \n```\ngraph TD\nA[configuration]\nA-->B[appender]\nA-->C[logger]\nA-->D[root]\n```\n\n#### 根节点的属性\n - scan:默认为true,当配置文件改变时,是否自动加载;\n - scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;\n - debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<!-- 省略中间的配置 -->\n</configuration>\n```\n\n#### 全局设置\n##### 设置变量\n- 用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用\"${USER_HOME}\"来获取变量的值.\n - name:变量的名称\n - value:变量的值\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n</configuration>\n```\n\n##### 获取时间戳字符串\n- 获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为\"${}\"\n - key:名称\n - datePattern:时间解析为字符串的格式\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n</configuration>\n```\n\n#### 子节点appender\n- appender是负责写日志的组件,有2个属性值:\n - name:appender的名称\n - class:指定appender的全限定名\n\n```\n<!-- demo 1-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\t\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n</configuration>\n```\n\n- appender的clas常用的有三种\n\n```\ngraph TD\nA[appender class]\nA-->B[ch.qos.logback.core.ConsoleAppender]\nA-->C[ch.qos.logback.core.rolling.RollingFileAppender]\nA-->D[ch.qos.logback.core.FileAppender]\n\n```\n\n##### ConsoleAppender:\n日志输出到控制台,配置参考[demo 1]主要有2个子节点:  \n - `<encoder>`:对日志进行格式化;  \n - `<target>`:字符串System.out或者 System.err,默认 System.out;\n \n##### RollingFileAppender:\n滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:\n - `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n - `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n - `<encoder>`:对日志进行格式化\n - `<rollingPolicy>`:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）\n - `<triggeringPolicy>`: 触发器策略\n - `<prudent>`：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空\n    \n```\ngraph TD\nA[rollingPolicy]\nA-->B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]\nA-->C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]\n```\n\n```\n<!-- demo 2-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <!-- 按日志大小切分日志文件 -->\n    \t<!-- \n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${byDay}/${FILE_NAME}-${byDay}-%i.log.zip</fileNamePattern>\n\t\t\t<minIndex>1</minIndex>\n\t\t\t<maxIndex>10</maxIndex>\n\t\t</rollingPolicy>\n        <!-- \n        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动\n        -->\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<maxFileSize>5MB</maxFileSize>\n\t\t</triggeringPolicy>\n \t\t-->\n \t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t\t<!-- 保存?天的日志文件，默认永久保留 -->\n\t\t\t<!-- <maxHistory>30</maxHistory>  -->\n\t\t</rollingPolicy>\n    \t<encoder>\n\t\t    <pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n    \t</encoder>\n    </appender>\n</configuration>\n```\n \n##### FileAppender:\n日志添加到文件  \n- `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n- `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n- `<encoder>`:对日志进行格式化\n- `<prudent>`:是否安全写入文件,默认false,设置为ture会影响效率\n\n```\n<!-- demo 3-->\n<configuration>\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender>  \n</configuration>\n```\n\n#### 子节点logger\n- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性\n - name:用来指定受此loger约束的某一个包或者具体的某一个类\n - level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别\n - addtivity:是否向上级loger传递打印信息,默认是true\n- `<loger>`:可以包含零个或多个`<appender-ref>`元素,标识这个appender将会添加到这个loger\n\n```\n<configuration>  \n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    \t<encoder>\n\t\t    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n    \t</encoder>\n    </appender>\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender> \n    \n    <logger name=\"com.diandian\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n</configuration>\n```\n\n#### 子节点root\n- root其实是一个根logger,name的名称已经被命名为\"root\",level属性的值同logger;\n\t\n#### encoder参数介绍\n- 负责两件事\n - 一是把日志信息转换成字节数组\n - 二是把字节数组写入到输出流\n- 它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义\n\t\n```\n<encoder>  \n  <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n</encoder> \n\n```\n- `<pattern>`格式介绍:\n    \n转换符| 作用\n---|---\nc {length }  lo {length }  logger {length }  |  输出日志的logger名\nd {pattern } date {pattern }     |  输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容\nm msg message    |  输出应用程序提供的信息\nn | 输出平台相关的分行符“\\n”或者“\\r\\n”\np  le  level | 输出日志级别\nr relative | 输出从程序启动到创建日志记录的时间,单位是毫秒\nt thread | 输出线程名\nreplace(p ){r, t} | p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, \"%replace(%msg){'\\s', ''}\"\n\n格式修饰符 | 作用\n--- | ---\n-(减号) | 左对齐\n4(十进制数表示) | 最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断\n.4(点加十进制数表示) | 最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断\n\n**重要**:格式修饰符位于“%”和转换符之间\n\n```\n<!--完整DEMO-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${USER_HOME}/${FILE_NAME}.log</file>\n\t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t</rollingPolicy>\n\t\t<!-- 日志输出格式 -->\n\t\t<encoder>\n\t\t\t<pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n\t\t</encoder>\n\t</appender>\n\t<logger name=\"com.demo\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</root>\n</configuration>\n```\n\n\n\n\n\n","slug":"编程/log/Logback配置总结","published":1,"updated":"2017-05-25T10:26:04.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj35lqz1z0007hcqy0lq73ncy","content":"<h3 id=\"什么是Logback\"><a href=\"#什么是Logback\" class=\"headerlink\" title=\"什么是Logback?\"></a>什么是Logback?</h3><p>Logback是由log4j创始人设计的又一个开源日志组件,<a href=\"http://logback.qos.ch\" target=\"_blank\" rel=\"external\">官方网站</a>。</p>\n<h3 id=\"Logback配置\"><a href=\"#Logback配置\" class=\"headerlink\" title=\"Logback配置\"></a>Logback配置</h3><h4 id=\"根节点configuration\"><a href=\"#根节点configuration\" class=\"headerlink\" title=\"根节点configuration\"></a>根节点configuration</h4><ul>\n<li>主要包含以下三个子节点<ul>\n<li>appender</li>\n<li>logger</li>\n<li>root</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[configuration]</div><div class=\"line\">A--&gt;B[appender]</div><div class=\"line\">A--&gt;C[logger]</div><div class=\"line\">A--&gt;D[root]</div></pre></td></tr></table></figure>\n<h4 id=\"根节点的属性\"><a href=\"#根节点的属性\" class=\"headerlink\" title=\"根节点的属性\"></a>根节点的属性</h4><ul>\n<li>scan:默认为true,当配置文件改变时,是否自动加载;</li>\n<li>scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;</li>\n<li>debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;!-- 省略中间的配置 --&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><h5 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\"设置变量\"></a>设置变量</h5><ul>\n<li>用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用”${USER_HOME}”来获取变量的值.<ul>\n<li>name:变量的名称</li>\n<li>value:变量的值</li>\n</ul>\n</proerty></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"获取时间戳字符串\"><a href=\"#获取时间戳字符串\" class=\"headerlink\" title=\"获取时间戳字符串\"></a>获取时间戳字符串</h5><ul>\n<li>获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为”${}”<ul>\n<li>key:名称</li>\n<li>datePattern:时间解析为字符串的格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</timestamp></li>\n</ul>\n<h4 id=\"子节点appender\"><a href=\"#子节点appender\" class=\"headerlink\" title=\"子节点appender\"></a>子节点appender</h4><ul>\n<li>appender是负责写日志的组件,有2个属性值:<ul>\n<li>name:appender的名称</li>\n<li>class:指定appender的全限定名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 1--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>appender的clas常用的有三种</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[appender class]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.ConsoleAppender]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.RollingFileAppender]</div><div class=\"line\">A--&gt;D[ch.qos.logback.core.FileAppender]</div></pre></td></tr></table></figure>\n<h5 id=\"ConsoleAppender\"><a href=\"#ConsoleAppender\" class=\"headerlink\" title=\"ConsoleAppender:\"></a>ConsoleAppender:</h5><p>日志输出到控制台,配置参考[demo 1]主要有2个子节点:  </p>\n<ul>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化;  </li>\n<li><code>&lt;target&gt;</code>:字符串System.out或者 System.err,默认 System.out;</li>\n</ul>\n<h5 id=\"RollingFileAppender\"><a href=\"#RollingFileAppender\" class=\"headerlink\" title=\"RollingFileAppender:\"></a>RollingFileAppender:</h5><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:</p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;rollingPolicy&gt;</code>:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）</li>\n<li><code>&lt;triggeringPolicy&gt;</code>: 触发器策略</li>\n<li><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[rollingPolicy]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 2--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;!-- 按日志大小切分日志文件 --&gt;</div><div class=\"line\">    \t&lt;!-- </div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;byDay&#125;/$&#123;FILE_NAME&#125;-$&#123;byDay&#125;-%i.log.zip&lt;/fileNamePattern&gt;</div><div class=\"line\">\t\t\t&lt;minIndex&gt;1&lt;/minIndex&gt;</div><div class=\"line\">\t\t\t&lt;maxIndex&gt;10&lt;/maxIndex&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">        &lt;!-- </div><div class=\"line\">        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动</div><div class=\"line\">        --&gt;</div><div class=\"line\">\t\t&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;</div><div class=\"line\">\t\t&lt;/triggeringPolicy&gt;</div><div class=\"line\"> \t\t--&gt;</div><div class=\"line\"> \t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t\t&lt;!-- 保存?天的日志文件，默认永久保留 --&gt;</div><div class=\"line\">\t\t\t&lt;!-- &lt;maxHistory&gt;30&lt;/maxHistory&gt;  --&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"FileAppender\"><a href=\"#FileAppender\" class=\"headerlink\" title=\"FileAppender:\"></a>FileAppender:</h5><p>日志添加到文件  </p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;prudent&gt;</code>:是否安全写入文件,默认false,设置为ture会影响效率</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 3--&gt;</div><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点logger\"><a href=\"#子节点logger\" class=\"headerlink\" title=\"子节点logger\"></a>子节点logger</h4><ul>\n<li>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性<ul>\n<li>name:用来指定受此loger约束的某一个包或者具体的某一个类</li>\n<li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别</li>\n<li>addtivity:是否向上级loger传递打印信息,默认是true</li>\n</ul>\n</loger></appender></li>\n<li><code>&lt;loger&gt;</code>:可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素,标识这个appender将会添加到这个loger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;  </div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt; </div><div class=\"line\">    </div><div class=\"line\">    &lt;logger name=&quot;com.diandian&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点root\"><a href=\"#子节点root\" class=\"headerlink\" title=\"子节点root\"></a>子节点root</h4><ul>\n<li>root其实是一个根logger,name的名称已经被命名为”root”,level属性的值同logger;</li>\n</ul>\n<h4 id=\"encoder参数介绍\"><a href=\"#encoder参数介绍\" class=\"headerlink\" title=\"encoder参数介绍\"></a>encoder参数介绍</h4><ul>\n<li>负责两件事<ul>\n<li>一是把日志信息转换成字节数组</li>\n<li>二是把字节数组写入到输出流</li>\n</ul>\n</li>\n<li>它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义</pattern></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;encoder&gt;  </div><div class=\"line\">  &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">&lt;/encoder&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;pattern&gt;</code>格式介绍:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c {length }  lo {length }  logger {length }</td>\n<td>输出日志的logger名</td>\n</tr>\n<tr>\n<td>d {pattern } date {pattern }</td>\n<td>输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容</td>\n</tr>\n<tr>\n<td>m msg message</td>\n<td>输出应用程序提供的信息</td>\n</tr>\n<tr>\n<td>n</td>\n<td>输出平台相关的分行符“\\n”或者“\\r\\n”</td>\n</tr>\n<tr>\n<td>p  le  level</td>\n<td>输出日志级别</td>\n</tr>\n<tr>\n<td>r relative</td>\n<td>输出从程序启动到创建日志记录的时间,单位是毫秒</td>\n</tr>\n<tr>\n<td>t thread</td>\n<td>输出线程名</td>\n</tr>\n<tr>\n<td>replace(p ){r, t}</td>\n<td>p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, “%replace(%msg){‘\\s’, ‘’}”</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>格式修饰符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-(减号)</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>4(十进制数表示)</td>\n<td>最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断</td>\n</tr>\n<tr>\n<td>.4(点加十进制数表示)</td>\n<td>最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断</td>\n</tr>\n</tbody>\n</table>\n<p><strong>重要</strong>:格式修饰符位于“%”和转换符之间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--完整DEMO--&gt;</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/file&gt;</div><div class=\"line\">\t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">\t\t&lt;!-- 日志输出格式 --&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">\t&lt;logger name=&quot;com.demo&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">\t&lt;root level=&quot;INFO&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/root&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Logback\"><a href=\"#什么是Logback\" class=\"headerlink\" title=\"什么是Logback?\"></a>什么是Logback?</h3><p>Logback是由log4j创始人设计的又一个开源日志组件,<a href=\"http://logback.qos.ch\">官方网站</a>。</p>\n<h3 id=\"Logback配置\"><a href=\"#Logback配置\" class=\"headerlink\" title=\"Logback配置\"></a>Logback配置</h3><h4 id=\"根节点configuration\"><a href=\"#根节点configuration\" class=\"headerlink\" title=\"根节点configuration\"></a>根节点configuration</h4><ul>\n<li>主要包含以下三个子节点<ul>\n<li>appender</li>\n<li>logger</li>\n<li>root</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[configuration]</div><div class=\"line\">A--&gt;B[appender]</div><div class=\"line\">A--&gt;C[logger]</div><div class=\"line\">A--&gt;D[root]</div></pre></td></tr></table></figure>\n<h4 id=\"根节点的属性\"><a href=\"#根节点的属性\" class=\"headerlink\" title=\"根节点的属性\"></a>根节点的属性</h4><ul>\n<li>scan:默认为true,当配置文件改变时,是否自动加载;</li>\n<li>scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;</li>\n<li>debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;!-- 省略中间的配置 --&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><h5 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\"设置变量\"></a>设置变量</h5><ul>\n<li>用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用”${USER_HOME}”来获取变量的值.<ul>\n<li>name:变量的名称</li>\n<li>value:变量的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"获取时间戳字符串\"><a href=\"#获取时间戳字符串\" class=\"headerlink\" title=\"获取时间戳字符串\"></a>获取时间戳字符串</h5><ul>\n<li>获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为”${}”<ul>\n<li>key:名称</li>\n<li>datePattern:时间解析为字符串的格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"子节点appender\"><a href=\"#子节点appender\" class=\"headerlink\" title=\"子节点appender\"></a>子节点appender</h4><ul>\n<li>appender是负责写日志的组件,有2个属性值:<ul>\n<li>name:appender的名称</li>\n<li>class:指定appender的全限定名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 1--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>appender的clas常用的有三种</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[appender class]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.ConsoleAppender]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.RollingFileAppender]</div><div class=\"line\">A--&gt;D[ch.qos.logback.core.FileAppender]</div></pre></td></tr></table></figure>\n<h5 id=\"ConsoleAppender\"><a href=\"#ConsoleAppender\" class=\"headerlink\" title=\"ConsoleAppender:\"></a>ConsoleAppender:</h5><p>日志输出到控制台,配置参考[demo 1]主要有2个子节点:  </p>\n<ul>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化;  </li>\n<li><code>&lt;target&gt;</code>:字符串System.out或者 System.err,默认 System.out;</li>\n</ul>\n<h5 id=\"RollingFileAppender\"><a href=\"#RollingFileAppender\" class=\"headerlink\" title=\"RollingFileAppender:\"></a>RollingFileAppender:</h5><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:</p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;rollingPolicy&gt;</code>:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）</li>\n<li><code>&lt;triggeringPolicy&gt;</code>: 触发器策略</li>\n<li><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[rollingPolicy]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 2--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;!-- 按日志大小切分日志文件 --&gt;</div><div class=\"line\">    \t&lt;!-- </div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;byDay&#125;/$&#123;FILE_NAME&#125;-$&#123;byDay&#125;-%i.log.zip&lt;/fileNamePattern&gt;</div><div class=\"line\">\t\t\t&lt;minIndex&gt;1&lt;/minIndex&gt;</div><div class=\"line\">\t\t\t&lt;maxIndex&gt;10&lt;/maxIndex&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">        &lt;!-- </div><div class=\"line\">        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动</div><div class=\"line\">        --&gt;</div><div class=\"line\">\t\t&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;</div><div class=\"line\">\t\t&lt;/triggeringPolicy&gt;</div><div class=\"line\"> \t\t--&gt;</div><div class=\"line\"> \t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t\t&lt;!-- 保存?天的日志文件，默认永久保留 --&gt;</div><div class=\"line\">\t\t\t&lt;!-- &lt;maxHistory&gt;30&lt;/maxHistory&gt;  --&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"FileAppender\"><a href=\"#FileAppender\" class=\"headerlink\" title=\"FileAppender:\"></a>FileAppender:</h5><p>日志添加到文件  </p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;prudent&gt;</code>:是否安全写入文件,默认false,设置为ture会影响效率</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 3--&gt;</div><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点logger\"><a href=\"#子节点logger\" class=\"headerlink\" title=\"子节点logger\"></a>子节点logger</h4><ul>\n<li>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性<ul>\n<li>name:用来指定受此loger约束的某一个包或者具体的某一个类</li>\n<li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别</li>\n<li>addtivity:是否向上级loger传递打印信息,默认是true</li>\n</ul>\n</li>\n<li><code>&lt;loger&gt;</code>:可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素,标识这个appender将会添加到这个loger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;  </div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt; </div><div class=\"line\">    </div><div class=\"line\">    &lt;logger name=&quot;com.diandian&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点root\"><a href=\"#子节点root\" class=\"headerlink\" title=\"子节点root\"></a>子节点root</h4><ul>\n<li>root其实是一个根logger,name的名称已经被命名为”root”,level属性的值同logger;</li>\n</ul>\n<h4 id=\"encoder参数介绍\"><a href=\"#encoder参数介绍\" class=\"headerlink\" title=\"encoder参数介绍\"></a>encoder参数介绍</h4><ul>\n<li>负责两件事<ul>\n<li>一是把日志信息转换成字节数组</li>\n<li>二是把字节数组写入到输出流</li>\n</ul>\n</li>\n<li>它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;encoder&gt;  </div><div class=\"line\">  &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">&lt;/encoder&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;pattern&gt;</code>格式介绍:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c {length }  lo {length }  logger {length }</td>\n<td>输出日志的logger名</td>\n</tr>\n<tr>\n<td>d {pattern } date {pattern }</td>\n<td>输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容</td>\n</tr>\n<tr>\n<td>m msg message</td>\n<td>输出应用程序提供的信息</td>\n</tr>\n<tr>\n<td>n</td>\n<td>输出平台相关的分行符“\\n”或者“\\r\\n”</td>\n</tr>\n<tr>\n<td>p  le  level</td>\n<td>输出日志级别</td>\n</tr>\n<tr>\n<td>r relative</td>\n<td>输出从程序启动到创建日志记录的时间,单位是毫秒</td>\n</tr>\n<tr>\n<td>t thread</td>\n<td>输出线程名</td>\n</tr>\n<tr>\n<td>replace(p ){r, t}</td>\n<td>p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, “%replace(%msg){‘\\s’, ‘’}”</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>格式修饰符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-(减号)</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>4(十进制数表示)</td>\n<td>最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断</td>\n</tr>\n<tr>\n<td>.4(点加十进制数表示)</td>\n<td>最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断</td>\n</tr>\n</tbody>\n</table>\n<p><strong>重要</strong>:格式修饰符位于“%”和转换符之间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--完整DEMO--&gt;</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/file&gt;</div><div class=\"line\">\t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">\t\t&lt;!-- 日志输出格式 --&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">\t&lt;logger name=&quot;com.demo&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">\t&lt;root level=&quot;INFO&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/root&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n"},{"title":"搭建hexo+gitHub博客","date":"2017-05-09T06:10:14.000Z","_content":"\n## 准备环境\n### 安装node.js\n点击进入[node.js官网](https://nodejs.org/en/download/)  \n![image](/images/Hexo_blog/nodejs/nodejs官网下载.jpg)  \n下载完成后，双击打开  \n![image](/images/Hexo_blog/nodejs/nodejs安装.jpg)  \n一路next,安装完成。  \n\n **安装完成，让我们来检测一下node.js是否安装成功吧**   \n![image](/images/Hexo_blog/nodejs/nodejs_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n### 安装git \ngit使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，[点击这里](https://git-scm.com/downloads)进入git的下载网站下载git的安装包  \n![image](/images/Hexo_blog/git/index.jpg)\n\n--- \n\n### 安装Hexo\n\nHexo是搭建博客的核心,[点击进入hexo首页](https://hexo.io/)\n\n![image](/images/Hexo_blog/hexo/index.jpg)  \n- **首先创建博客本地的路径**  \n![image](/images/Hexo_blog/hexo/1_newdir.jpg)  \n比如：我这里使用的是e:\\my_blog文件夹  \n- **下载安装hexo**  \n```\n$ npm install -g hexo-cli\n\n```\n**安装完成，让我们来检测一下hexo是否安装成功吧**   \n输入：\n```\n$ hexo -version\n\n```\n![image](/images/Hexo_blog/hexo/2_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n## 配置博客\n\n### hexo初始化  \n```\n//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)\n$ hexo init\n\n```\n\n等等init完成后,继续执行以下指令  \n```\n//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包\n$ npm install\n\n```\n\n初始化完成后,目录如下：  \n![image](/images/Hexo_blog/hexo/4_dir.jpg) \n\n### hexo本地发布  \n\n到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  \n\n```\n//本地发布\n$ hexo s\n\n```\n![image](/images/Hexo_blog/hexo/5_server.jpg)  \n使用浏览器打开[localhost:4000](http://localhost:4000)，可以看到如下的博客首页界面  \n![image](/images/Hexo_blog/hexo/6_index.jpg)\n\n对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# 网站配置\n# Site\ntitle: Hexo # 网站标题\nsubtitle: # 网站副标题\ndescription: # 网站描述\nauthor: John Doe # 您的名字\nlanguage: # 网站使用的语音\ntimezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\n# 网址配置\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com # 网址\nroot: / # 网站根目录\npermalink: :year/:month/:day/:title/ # 文章的永久链接格式\npermalink_defaults: # 永久链接中各部分的默认值\n# 目录配置\n# Directory\nsource_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里\npublic_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags # 标签文件夹\narchive_dir: archives # 归档文件夹\ncategory_dir: categories # 分类文件夹\ncode_dir: downloads/code # Include code 文件夹\ni18n_dir: :lang # 国际化（i18n）文件夹\nskip_render:\n# 文章配置\n# Writing\nnew_post_name: :title.md # 新文章的文件名称\ndefault_layout: post # 预设布局\ntitlecase: false # 把标题转换为 title case\nexternal_link: true # 在新标签中打开链接\nfilename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false # 显示草稿\npost_asset_folder: false # 启动 Asset 文件夹\nrelative_link: false # 把链接改为与根目录的相对位址\nfuture: true # 显示未来的文章\nhighlight: # 代码块的设置\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# 分类 & 标签\n# Category & Tag\ndefault_category: uncategorized # 默认分类\ncategory_map: # 分类别名\t\ntag_map: # 标签别名\n# 日期 & 时间格式\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape #主题配置\n# 部署设置\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n\n```\n\n## 博客发布\n我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!  \n**重要**:*首先你要有个gitHub账号,如果没有,请[点这里](https://github.com/)注册，具体的注册过程就不在这里描述。*  \n- 配置仓库  \n![image](/images/Hexo_blog/git/1_index.jpg)\n登录账号后，在Github页面的右上方选择New repository进行仓库的创建。\n![image](/images/Hexo_blog/git/2_create.jpg)  \n在仓库名字输入框中输入：\n```\nxxx.github.io//xxx表示你的昵称\n\n```\n然后点击==Create repository==来完成创建  \n\n### 配置_config.yml  \n我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git //type类型为git\n  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址\n  branch: master //这里填写master分支\n\n```\n\n### 发布运行  \n到此为止,我们可以使用hexo指令来上传博客到gitHub\n\n```\n$ hexo -g //生成静态文件\n\n$ hexo -d //部署完整(就是发布到我们gitHub仓库)\n    \n```\n\n等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!\n\n\n","source":"_posts/编程/blog/搭建hexo+gitHub博客.md","raw":"---\ntitle: 搭建hexo+gitHub博客\ndate: 2017-05-09 14:10:14\ntags:\ncategories: 编程\n---\n\n## 准备环境\n### 安装node.js\n点击进入[node.js官网](https://nodejs.org/en/download/)  \n![image](/images/Hexo_blog/nodejs/nodejs官网下载.jpg)  \n下载完成后，双击打开  \n![image](/images/Hexo_blog/nodejs/nodejs安装.jpg)  \n一路next,安装完成。  \n\n **安装完成，让我们来检测一下node.js是否安装成功吧**   \n![image](/images/Hexo_blog/nodejs/nodejs_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n### 安装git \ngit使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，[点击这里](https://git-scm.com/downloads)进入git的下载网站下载git的安装包  \n![image](/images/Hexo_blog/git/index.jpg)\n\n--- \n\n### 安装Hexo\n\nHexo是搭建博客的核心,[点击进入hexo首页](https://hexo.io/)\n\n![image](/images/Hexo_blog/hexo/index.jpg)  \n- **首先创建博客本地的路径**  \n![image](/images/Hexo_blog/hexo/1_newdir.jpg)  \n比如：我这里使用的是e:\\my_blog文件夹  \n- **下载安装hexo**  \n```\n$ npm install -g hexo-cli\n\n```\n**安装完成，让我们来检测一下hexo是否安装成功吧**   \n输入：\n```\n$ hexo -version\n\n```\n![image](/images/Hexo_blog/hexo/2_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n## 配置博客\n\n### hexo初始化  \n```\n//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)\n$ hexo init\n\n```\n\n等等init完成后,继续执行以下指令  \n```\n//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包\n$ npm install\n\n```\n\n初始化完成后,目录如下：  \n![image](/images/Hexo_blog/hexo/4_dir.jpg) \n\n### hexo本地发布  \n\n到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  \n\n```\n//本地发布\n$ hexo s\n\n```\n![image](/images/Hexo_blog/hexo/5_server.jpg)  \n使用浏览器打开[localhost:4000](http://localhost:4000)，可以看到如下的博客首页界面  \n![image](/images/Hexo_blog/hexo/6_index.jpg)\n\n对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# 网站配置\n# Site\ntitle: Hexo # 网站标题\nsubtitle: # 网站副标题\ndescription: # 网站描述\nauthor: John Doe # 您的名字\nlanguage: # 网站使用的语音\ntimezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\n# 网址配置\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com # 网址\nroot: / # 网站根目录\npermalink: :year/:month/:day/:title/ # 文章的永久链接格式\npermalink_defaults: # 永久链接中各部分的默认值\n# 目录配置\n# Directory\nsource_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里\npublic_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags # 标签文件夹\narchive_dir: archives # 归档文件夹\ncategory_dir: categories # 分类文件夹\ncode_dir: downloads/code # Include code 文件夹\ni18n_dir: :lang # 国际化（i18n）文件夹\nskip_render:\n# 文章配置\n# Writing\nnew_post_name: :title.md # 新文章的文件名称\ndefault_layout: post # 预设布局\ntitlecase: false # 把标题转换为 title case\nexternal_link: true # 在新标签中打开链接\nfilename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false # 显示草稿\npost_asset_folder: false # 启动 Asset 文件夹\nrelative_link: false # 把链接改为与根目录的相对位址\nfuture: true # 显示未来的文章\nhighlight: # 代码块的设置\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# 分类 & 标签\n# Category & Tag\ndefault_category: uncategorized # 默认分类\ncategory_map: # 分类别名\t\ntag_map: # 标签别名\n# 日期 & 时间格式\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape #主题配置\n# 部署设置\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n\n```\n\n## 博客发布\n我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!  \n**重要**:*首先你要有个gitHub账号,如果没有,请[点这里](https://github.com/)注册，具体的注册过程就不在这里描述。*  \n- 配置仓库  \n![image](/images/Hexo_blog/git/1_index.jpg)\n登录账号后，在Github页面的右上方选择New repository进行仓库的创建。\n![image](/images/Hexo_blog/git/2_create.jpg)  \n在仓库名字输入框中输入：\n```\nxxx.github.io//xxx表示你的昵称\n\n```\n然后点击==Create repository==来完成创建  \n\n### 配置_config.yml  \n我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git //type类型为git\n  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址\n  branch: master //这里填写master分支\n\n```\n\n### 发布运行  \n到此为止,我们可以使用hexo指令来上传博客到gitHub\n\n```\n$ hexo -g //生成静态文件\n\n$ hexo -d //部署完整(就是发布到我们gitHub仓库)\n    \n```\n\n等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!\n\n\n","slug":"编程/blog/搭建hexo+gitHub博客","published":1,"updated":"2017-05-25T10:26:04.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj35lqz23000ahcqyc8tt03q6","content":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>点击进入<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">node.js官网</a><br><img src=\"/images/Hexo_blog/nodejs/nodejs官网下载.jpg\" alt=\"image\"><br>下载完成后，双击打开<br><img src=\"/images/Hexo_blog/nodejs/nodejs安装.jpg\" alt=\"image\"><br>一路next,安装完成。  </p>\n<p> <strong>安装完成，让我们来检测一下node.js是否安装成功吧</strong><br><img src=\"/images/Hexo_blog/nodejs/nodejs_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>git使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">点击这里</a>进入git的下载网站下载git的安装包<br><img src=\"/images/Hexo_blog/git/index.jpg\" alt=\"image\"></p>\n<hr>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Hexo是搭建博客的核心,<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">点击进入hexo首页</a></p>\n<p><img src=\"/images/Hexo_blog/hexo/index.jpg\" alt=\"image\">  </p>\n<ul>\n<li><strong>首先创建博客本地的路径</strong><br><img src=\"/images/Hexo_blog/hexo/1_newdir.jpg\" alt=\"image\"><br>比如：我这里使用的是e:\\my_blog文件夹  </li>\n<li><strong>下载安装hexo</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>安装完成，让我们来检测一下hexo是否安装成功吧</strong><br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -version</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/Hexo_blog/hexo/2_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h2 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h2><h3 id=\"hexo初始化\"><a href=\"#hexo初始化\" class=\"headerlink\" title=\"hexo初始化\"></a>hexo初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)</div><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<p>等等init完成后,继续执行以下指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>初始化完成后,目录如下：<br><img src=\"/images/Hexo_blog/hexo/4_dir.jpg\" alt=\"image\"> </p>\n<h3 id=\"hexo本地发布\"><a href=\"#hexo本地发布\" class=\"headerlink\" title=\"hexo本地发布\"></a>hexo本地发布</h3><p>到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//本地发布</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<p><img src=\"/images/Hexo_blog/hexo/5_server.jpg\" alt=\"image\"><br>使用浏览器打开<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">localhost:4000</a>，可以看到如下的博客首页界面<br><img src=\"/images/Hexo_blog/hexo/6_index.jpg\" alt=\"image\"></p>\n<p>对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"># 网站配置</div><div class=\"line\"># Site</div><div class=\"line\">title: Hexo # 网站标题</div><div class=\"line\">subtitle: # 网站副标题</div><div class=\"line\">description: # 网站描述</div><div class=\"line\">author: John Doe # 您的名字</div><div class=\"line\">language: # 网站使用的语音</div><div class=\"line\">timezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</div><div class=\"line\"># 网址配置</div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com # 网址</div><div class=\"line\">root: / # 网站根目录</div><div class=\"line\">permalink: :year/:month/:day/:title/ # 文章的永久链接格式</div><div class=\"line\">permalink_defaults: # 永久链接中各部分的默认值</div><div class=\"line\"># 目录配置</div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里</div><div class=\"line\">public_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。</div><div class=\"line\">tag_dir: tags # 标签文件夹</div><div class=\"line\">archive_dir: archives # 归档文件夹</div><div class=\"line\">category_dir: categories # 分类文件夹</div><div class=\"line\">code_dir: downloads/code # Include code 文件夹</div><div class=\"line\">i18n_dir: :lang # 国际化（i18n）文件夹</div><div class=\"line\">skip_render:</div><div class=\"line\"># 文章配置</div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # 新文章的文件名称</div><div class=\"line\">default_layout: post # 预设布局</div><div class=\"line\">titlecase: false # 把标题转换为 title case</div><div class=\"line\">external_link: true # 在新标签中打开链接</div><div class=\"line\">filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写</div><div class=\"line\">render_drafts: false # 显示草稿</div><div class=\"line\">post_asset_folder: false # 启动 Asset 文件夹</div><div class=\"line\">relative_link: false # 把链接改为与根目录的相对位址</div><div class=\"line\">future: true # 显示未来的文章</div><div class=\"line\">highlight: # 代码块的设置</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># 分类 &amp; 标签</div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized # 默认分类</div><div class=\"line\">category_map: # 分类别名\t</div><div class=\"line\">tag_map: # 标签别名</div><div class=\"line\"># 日期 &amp; 时间格式</div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape #主题配置</div><div class=\"line\"># 部署设置</div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div></pre></td></tr></table></figure></p>\n<h2 id=\"博客发布\"><a href=\"#博客发布\" class=\"headerlink\" title=\"博客发布\"></a>博客发布</h2><p>我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!<br><strong>重要</strong>:<em>首先你要有个gitHub账号,如果没有,请<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">点这里</a>注册，具体的注册过程就不在这里描述。</em>  </p>\n<ul>\n<li>配置仓库<br><img src=\"/images/Hexo_blog/git/1_index.jpg\" alt=\"image\"><br>登录账号后，在Github页面的右上方选择New repository进行仓库的创建。<br><img src=\"/images/Hexo_blog/git/2_create.jpg\" alt=\"image\"><br>在仓库名字输入框中输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxx.github.io//xxx表示你的昵称</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后点击==Create repository==来完成创建  </p>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置_config.yml\"></a>配置_config.yml</h3><p>我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git //type类型为git</div><div class=\"line\">  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址</div><div class=\"line\">  branch: master //这里填写master分支</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布运行\"><a href=\"#发布运行\" class=\"headerlink\" title=\"发布运行\"></a>发布运行</h3><p>到此为止,我们可以使用hexo指令来上传博客到gitHub</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -g //生成静态文件</div><div class=\"line\"></div><div class=\"line\">$ hexo -d //部署完整(就是发布到我们gitHub仓库)</div></pre></td></tr></table></figure>\n<p>等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>点击进入<a href=\"https://nodejs.org/en/download/\">node.js官网</a><br><img src=\"/images/Hexo_blog/nodejs/nodejs官网下载.jpg\" alt=\"image\"><br>下载完成后，双击打开<br><img src=\"/images/Hexo_blog/nodejs/nodejs安装.jpg\" alt=\"image\"><br>一路next,安装完成。  </p>\n<p> <strong>安装完成，让我们来检测一下node.js是否安装成功吧</strong><br><img src=\"/images/Hexo_blog/nodejs/nodejs_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>git使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，<a href=\"https://git-scm.com/downloads\">点击这里</a>进入git的下载网站下载git的安装包<br><img src=\"/images/Hexo_blog/git/index.jpg\" alt=\"image\"></p>\n<hr>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Hexo是搭建博客的核心,<a href=\"https://hexo.io/\">点击进入hexo首页</a></p>\n<p><img src=\"/images/Hexo_blog/hexo/index.jpg\" alt=\"image\">  </p>\n<ul>\n<li><strong>首先创建博客本地的路径</strong><br><img src=\"/images/Hexo_blog/hexo/1_newdir.jpg\" alt=\"image\"><br>比如：我这里使用的是e:\\my_blog文件夹  </li>\n<li><strong>下载安装hexo</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>安装完成，让我们来检测一下hexo是否安装成功吧</strong><br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -version</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/Hexo_blog/hexo/2_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h2 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h2><h3 id=\"hexo初始化\"><a href=\"#hexo初始化\" class=\"headerlink\" title=\"hexo初始化\"></a>hexo初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)</div><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<p>等等init完成后,继续执行以下指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>初始化完成后,目录如下：<br><img src=\"/images/Hexo_blog/hexo/4_dir.jpg\" alt=\"image\"> </p>\n<h3 id=\"hexo本地发布\"><a href=\"#hexo本地发布\" class=\"headerlink\" title=\"hexo本地发布\"></a>hexo本地发布</h3><p>到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//本地发布</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<p><img src=\"/images/Hexo_blog/hexo/5_server.jpg\" alt=\"image\"><br>使用浏览器打开<a href=\"http://localhost:4000\">localhost:4000</a>，可以看到如下的博客首页界面<br><img src=\"/images/Hexo_blog/hexo/6_index.jpg\" alt=\"image\"></p>\n<p>对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"># 网站配置</div><div class=\"line\"># Site</div><div class=\"line\">title: Hexo # 网站标题</div><div class=\"line\">subtitle: # 网站副标题</div><div class=\"line\">description: # 网站描述</div><div class=\"line\">author: John Doe # 您的名字</div><div class=\"line\">language: # 网站使用的语音</div><div class=\"line\">timezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</div><div class=\"line\"># 网址配置</div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com # 网址</div><div class=\"line\">root: / # 网站根目录</div><div class=\"line\">permalink: :year/:month/:day/:title/ # 文章的永久链接格式</div><div class=\"line\">permalink_defaults: # 永久链接中各部分的默认值</div><div class=\"line\"># 目录配置</div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里</div><div class=\"line\">public_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。</div><div class=\"line\">tag_dir: tags # 标签文件夹</div><div class=\"line\">archive_dir: archives # 归档文件夹</div><div class=\"line\">category_dir: categories # 分类文件夹</div><div class=\"line\">code_dir: downloads/code # Include code 文件夹</div><div class=\"line\">i18n_dir: :lang # 国际化（i18n）文件夹</div><div class=\"line\">skip_render:</div><div class=\"line\"># 文章配置</div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # 新文章的文件名称</div><div class=\"line\">default_layout: post # 预设布局</div><div class=\"line\">titlecase: false # 把标题转换为 title case</div><div class=\"line\">external_link: true # 在新标签中打开链接</div><div class=\"line\">filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写</div><div class=\"line\">render_drafts: false # 显示草稿</div><div class=\"line\">post_asset_folder: false # 启动 Asset 文件夹</div><div class=\"line\">relative_link: false # 把链接改为与根目录的相对位址</div><div class=\"line\">future: true # 显示未来的文章</div><div class=\"line\">highlight: # 代码块的设置</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># 分类 &amp; 标签</div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized # 默认分类</div><div class=\"line\">category_map: # 分类别名\t</div><div class=\"line\">tag_map: # 标签别名</div><div class=\"line\"># 日期 &amp; 时间格式</div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape #主题配置</div><div class=\"line\"># 部署设置</div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div></pre></td></tr></table></figure></p>\n<h2 id=\"博客发布\"><a href=\"#博客发布\" class=\"headerlink\" title=\"博客发布\"></a>博客发布</h2><p>我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!<br><strong>重要</strong>:<em>首先你要有个gitHub账号,如果没有,请<a href=\"https://github.com/\">点这里</a>注册，具体的注册过程就不在这里描述。</em>  </p>\n<ul>\n<li>配置仓库<br><img src=\"/images/Hexo_blog/git/1_index.jpg\" alt=\"image\"><br>登录账号后，在Github页面的右上方选择New repository进行仓库的创建。<br><img src=\"/images/Hexo_blog/git/2_create.jpg\" alt=\"image\"><br>在仓库名字输入框中输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxx.github.io//xxx表示你的昵称</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后点击==Create repository==来完成创建  </p>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置_config.yml\"></a>配置_config.yml</h3><p>我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git //type类型为git</div><div class=\"line\">  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址</div><div class=\"line\">  branch: master //这里填写master分支</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布运行\"><a href=\"#发布运行\" class=\"headerlink\" title=\"发布运行\"></a>发布运行</h3><p>到此为止,我们可以使用hexo指令来上传博客到gitHub</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -g //生成静态文件</div><div class=\"line\"></div><div class=\"line\">$ hexo -d //部署完整(就是发布到我们gitHub仓库)</div></pre></td></tr></table></figure>\n<p>等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!</p>\n"},{"title":"第二篇之Spirng IOC","date":"2017-05-26T05:49:00.000Z","_content":"\n### 了解IOC\n#### IOC是什么\n控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。\n#### IOC的好处\n对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。\n#### IOC和DI\n- DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。\n- IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。\n\n#### 打印Hello Ioc\n\n1.定义HelloIoc的接口\n```\npackage com.szl.SpringIoc.Interface;\n\npublic interface HelloIoc{\n\t\n\tpublic void sayHello();\n\t\n} \n\n```\n2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能\n```\npackage com.szl.SpringIoc.InterfaceImpl;\n\nimport com.szl.SpringIoc.Interface.HelloIoc;\n\npublic class HelloIocImpl implements HelloIoc{\n\n\t@Override\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"hello Ioc\");\n\t}\n} \n\n```\n3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n\t\n\t<bean id=\"helloIoc\" class=\"com.szl.SpringIoc.InterfaceImpl.HelloIocImpl\" />\n\n</beans>\n\n```\n4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能\n```\npackage com.szl.SpringIoc.test;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.szl.SpringIoc.Interface.HelloIoc;\nimport com.szl.SpringIoc.InterfaceImpl.HelloIocImpl;\n\npublic class SpringTest {\n\tApplicationContext ac;\n\t@Before\n\tpublic void init(){\n\t\t//读取配置文件从而实例化IOC容器\n\t\tac = new ClassPathXmlApplicationContext(\"HelloIoc.xml\");\n\t}\n\n\t@Test\n\tpublic void testHello() {\n\t\t//从容器中获取bean\n\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(\"helloIoc\");\n\t\t//执行业务逻辑\n\t\thi.sayHello();\n\t}\n}\n\n```\n执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。\n\n---\n\n### 解读IOC容器\n1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。  \n2.BeanFactory接口有3个类：\n- AutowireCapableBeanFactory  \n该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能\n- HierarchicalBeanFactory  \n定义了BeanFactory的父子链结构 \n- ListableBeanFactory  \n该接口的功能是用来列出所有Bean的名称、类型、注解等信息   \n\n3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。\n\n4.实例化容器(ApplicationContext)  \nApplicationContext的常用实现类\n- ClassPathXmlApplicationContext  \n从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- FileSystemXmlApplicationContext  \n从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- XmlWebApplicationContext  \n从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n\n这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。\n\n**注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程/spring/第二篇之Spirng IOC.md","raw":"---\ntitle: 第二篇之Spirng IOC\ndate: 2017-05-26 13:49\ncategories: Spring的那点事\ntags: Spring\n---\n\n### 了解IOC\n#### IOC是什么\n控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。\n#### IOC的好处\n对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。\n#### IOC和DI\n- DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。\n- IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。\n\n#### 打印Hello Ioc\n\n1.定义HelloIoc的接口\n```\npackage com.szl.SpringIoc.Interface;\n\npublic interface HelloIoc{\n\t\n\tpublic void sayHello();\n\t\n} \n\n```\n2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能\n```\npackage com.szl.SpringIoc.InterfaceImpl;\n\nimport com.szl.SpringIoc.Interface.HelloIoc;\n\npublic class HelloIocImpl implements HelloIoc{\n\n\t@Override\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"hello Ioc\");\n\t}\n} \n\n```\n3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n\t\n\t<bean id=\"helloIoc\" class=\"com.szl.SpringIoc.InterfaceImpl.HelloIocImpl\" />\n\n</beans>\n\n```\n4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能\n```\npackage com.szl.SpringIoc.test;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.szl.SpringIoc.Interface.HelloIoc;\nimport com.szl.SpringIoc.InterfaceImpl.HelloIocImpl;\n\npublic class SpringTest {\n\tApplicationContext ac;\n\t@Before\n\tpublic void init(){\n\t\t//读取配置文件从而实例化IOC容器\n\t\tac = new ClassPathXmlApplicationContext(\"HelloIoc.xml\");\n\t}\n\n\t@Test\n\tpublic void testHello() {\n\t\t//从容器中获取bean\n\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(\"helloIoc\");\n\t\t//执行业务逻辑\n\t\thi.sayHello();\n\t}\n}\n\n```\n执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。\n\n---\n\n### 解读IOC容器\n1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。  \n2.BeanFactory接口有3个类：\n- AutowireCapableBeanFactory  \n该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能\n- HierarchicalBeanFactory  \n定义了BeanFactory的父子链结构 \n- ListableBeanFactory  \n该接口的功能是用来列出所有Bean的名称、类型、注解等信息   \n\n3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。\n\n4.实例化容器(ApplicationContext)  \nApplicationContext的常用实现类\n- ClassPathXmlApplicationContext  \n从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- FileSystemXmlApplicationContext  \n从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- XmlWebApplicationContext  \n从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n\n这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。\n\n**注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"编程/spring/第二篇之Spirng IOC","published":1,"updated":"2017-05-26T08:43:07.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj35lqz25000bhcqyawulmhny","content":"<h3 id=\"了解IOC\"><a href=\"#了解IOC\" class=\"headerlink\" title=\"了解IOC\"></a>了解IOC</h3><h4 id=\"IOC是什么\"><a href=\"#IOC是什么\" class=\"headerlink\" title=\"IOC是什么\"></a>IOC是什么</h4><p>控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。</p>\n<h4 id=\"IOC的好处\"><a href=\"#IOC的好处\" class=\"headerlink\" title=\"IOC的好处\"></a>IOC的好处</h4><p>对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。</p>\n<h4 id=\"IOC和DI\"><a href=\"#IOC和DI\" class=\"headerlink\" title=\"IOC和DI\"></a>IOC和DI</h4><ul>\n<li>DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。</li>\n<li>IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。</li>\n</ul>\n<h4 id=\"打印Hello-Ioc\"><a href=\"#打印Hello-Ioc\" class=\"headerlink\" title=\"打印Hello Ioc\"></a>打印Hello Ioc</h4><p>1.定义HelloIoc的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.Interface;</div><div class=\"line\"></div><div class=\"line\">public interface HelloIoc&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void sayHello();</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.InterfaceImpl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.SpringIoc.Interface.HelloIoc;</div><div class=\"line\"></div><div class=\"line\">public class HelloIocImpl implements HelloIoc&#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void sayHello() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;hello Ioc&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;bean id=&quot;helloIoc&quot; class=&quot;com.szl.SpringIoc.InterfaceImpl.HelloIocImpl&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.test;</div><div class=\"line\"></div><div class=\"line\">import org.junit.Before;</div><div class=\"line\">import org.junit.Test;</div><div class=\"line\">import org.springframework.context.ApplicationContext;</div><div class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\">import com.szl.SpringIoc.Interface.HelloIoc;</div><div class=\"line\">import com.szl.SpringIoc.InterfaceImpl.HelloIocImpl;</div><div class=\"line\"></div><div class=\"line\">public class SpringTest &#123;</div><div class=\"line\">\tApplicationContext ac;</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init()&#123;</div><div class=\"line\">\t\t//读取配置文件从而实例化IOC容器</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;HelloIoc.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testHello() &#123;</div><div class=\"line\">\t\t//从容器中获取bean</div><div class=\"line\">\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(&quot;helloIoc&quot;);</div><div class=\"line\">\t\t//执行业务逻辑</div><div class=\"line\">\t\thi.sayHello();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。</p>\n<hr>\n<h3 id=\"解读IOC容器\"><a href=\"#解读IOC容器\" class=\"headerlink\" title=\"解读IOC容器\"></a>解读IOC容器</h3><p>1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。<br>2.BeanFactory接口有3个类：</p>\n<ul>\n<li>AutowireCapableBeanFactory<br>该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能</li>\n<li>HierarchicalBeanFactory<br>定义了BeanFactory的父子链结构 </li>\n<li>ListableBeanFactory<br>该接口的功能是用来列出所有Bean的名称、类型、注解等信息   </li>\n</ul>\n<p>3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。</p>\n<p>4.实例化容器(ApplicationContext)<br>ApplicationContext的常用实现类</p>\n<ul>\n<li>ClassPathXmlApplicationContext<br>从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>FileSystemXmlApplicationContext<br>从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>XmlWebApplicationContext<br>从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n</ul>\n<p>这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。</p>\n<p><strong>注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"了解IOC\"><a href=\"#了解IOC\" class=\"headerlink\" title=\"了解IOC\"></a>了解IOC</h3><h4 id=\"IOC是什么\"><a href=\"#IOC是什么\" class=\"headerlink\" title=\"IOC是什么\"></a>IOC是什么</h4><p>控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。</p>\n<h4 id=\"IOC的好处\"><a href=\"#IOC的好处\" class=\"headerlink\" title=\"IOC的好处\"></a>IOC的好处</h4><p>对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。</p>\n<h4 id=\"IOC和DI\"><a href=\"#IOC和DI\" class=\"headerlink\" title=\"IOC和DI\"></a>IOC和DI</h4><ul>\n<li>DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。</li>\n<li>IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。</li>\n</ul>\n<h4 id=\"打印Hello-Ioc\"><a href=\"#打印Hello-Ioc\" class=\"headerlink\" title=\"打印Hello Ioc\"></a>打印Hello Ioc</h4><p>1.定义HelloIoc的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.Interface;</div><div class=\"line\"></div><div class=\"line\">public interface HelloIoc&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void sayHello();</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.InterfaceImpl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.SpringIoc.Interface.HelloIoc;</div><div class=\"line\"></div><div class=\"line\">public class HelloIocImpl implements HelloIoc&#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void sayHello() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;hello Ioc&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;bean id=&quot;helloIoc&quot; class=&quot;com.szl.SpringIoc.InterfaceImpl.HelloIocImpl&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.test;</div><div class=\"line\"></div><div class=\"line\">import org.junit.Before;</div><div class=\"line\">import org.junit.Test;</div><div class=\"line\">import org.springframework.context.ApplicationContext;</div><div class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\">import com.szl.SpringIoc.Interface.HelloIoc;</div><div class=\"line\">import com.szl.SpringIoc.InterfaceImpl.HelloIocImpl;</div><div class=\"line\"></div><div class=\"line\">public class SpringTest &#123;</div><div class=\"line\">\tApplicationContext ac;</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init()&#123;</div><div class=\"line\">\t\t//读取配置文件从而实例化IOC容器</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;HelloIoc.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testHello() &#123;</div><div class=\"line\">\t\t//从容器中获取bean</div><div class=\"line\">\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(&quot;helloIoc&quot;);</div><div class=\"line\">\t\t//执行业务逻辑</div><div class=\"line\">\t\thi.sayHello();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。</p>\n<hr>\n<h3 id=\"解读IOC容器\"><a href=\"#解读IOC容器\" class=\"headerlink\" title=\"解读IOC容器\"></a>解读IOC容器</h3><p>1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。<br>2.BeanFactory接口有3个类：</p>\n<ul>\n<li>AutowireCapableBeanFactory<br>该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能</li>\n<li>HierarchicalBeanFactory<br>定义了BeanFactory的父子链结构 </li>\n<li>ListableBeanFactory<br>该接口的功能是用来列出所有Bean的名称、类型、注解等信息   </li>\n</ul>\n<p>3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。</p>\n<p>4.实例化容器(ApplicationContext)<br>ApplicationContext的常用实现类</p>\n<ul>\n<li>ClassPathXmlApplicationContext<br>从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>FileSystemXmlApplicationContext<br>从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>XmlWebApplicationContext<br>从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n</ul>\n<p>这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。</p>\n<p><strong>注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj35lqyzr0003hcqyffqvjgnl","category_id":"cj35lqyzx0004hcqyga9g72r4","_id":"cj35lqyzz0005hcqypbf2l46w"},{"post_id":"cj35lqz25000bhcqyawulmhny","category_id":"cj35lqz200008hcqynuwfdzpx","_id":"cj35lqz2c000fhcqyp1id3spr"},{"post_id":"cj35lqz1x0006hcqyt8p0pero","category_id":"cj35lqz200008hcqynuwfdzpx","_id":"cj35lqz2d000ihcqyddcvp9ne"},{"post_id":"cj35lqz1z0007hcqy0lq73ncy","category_id":"cj35lqz2a000chcqyejhtm0s6","_id":"cj35lqz2d000khcqyepc0y62y"},{"post_id":"cj35lqz23000ahcqyc8tt03q6","category_id":"cj35lqz2c000hhcqyj79k5bx0","_id":"cj35lqz2e000lhcqy3ngt3kop"}],"PostTag":[{"post_id":"cj35lqz25000bhcqyawulmhny","tag_id":"cj35lqz210009hcqyr2vaciua","_id":"cj35lqz2b000ehcqyjybhcron"},{"post_id":"cj35lqz1x0006hcqyt8p0pero","tag_id":"cj35lqz210009hcqyr2vaciua","_id":"cj35lqz2c000ghcqynw1xj9dt"},{"post_id":"cj35lqz1z0007hcqy0lq73ncy","tag_id":"cj35lqz2a000dhcqymacsech8","_id":"cj35lqz2d000jhcqyu4veumn3"}],"Tag":[{"name":"Spring","_id":"cj35lqz210009hcqyr2vaciua"},{"name":"logback","_id":"cj35lqz2a000dhcqymacsech8"}]}}