{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon1.ico","path":"favicon1.ico","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/about/2_wechat.jpg","path":"images/about/2_wechat.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/Hexo_blog/git/1_index.jpg","path":"images/Hexo_blog/git/1_index.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/git/2_create.jpg","path":"images/Hexo_blog/git/2_create.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/1_newdir.jpg","path":"images/Hexo_blog/hexo/1_newdir.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/2_version.jpg","path":"images/Hexo_blog/hexo/2_version.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/4_dir.jpg","path":"images/Hexo_blog/hexo/4_dir.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/3_init.jpg","path":"images/Hexo_blog/hexo/3_init.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/5_server.jpg","path":"images/Hexo_blog/hexo/5_server.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/index.jpg","path":"images/Hexo_blog/hexo/index.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/nodejs/nodejs_version.jpg","path":"images/Hexo_blog/nodejs/nodejs_version.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/nodejs/nodejs安装.jpg","path":"images/Hexo_blog/nodejs/nodejs安装.jpg","modified":1,"renderable":0},{"_id":"source/images/spring/1/spirng架构图.JPG","path":"images/spring/1/spirng架构图.JPG","modified":1,"renderable":0},{"_id":"source/images/spring/1/spring_transaction.jpg","path":"images/spring/1/spring_transaction.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/images/Hexo_blog/git/index.jpg","path":"images/Hexo_blog/git/index.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/hexo/6_index.jpg","path":"images/Hexo_blog/hexo/6_index.jpg","modified":1,"renderable":0},{"_id":"source/images/Hexo_blog/nodejs/nodejs官网下载.jpg","path":"images/Hexo_blog/nodejs/nodejs官网下载.jpg","modified":1,"renderable":0},{"_id":"source/images/about/1_index.jpg","path":"images/about/1_index.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a680d065d1683c9cba36ec8c740c13348ca84385","modified":1495707964330},{"_id":"source/favicon1.ico","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1495707964334},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1495707964393},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1495707964394},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1495707964394},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1495707964395},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1495707964395},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1495707964395},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1495707964396},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1495707964396},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1495707964396},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1495707964396},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1495707964397},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1495707964397},{"_id":"themes/next/_config.yml","hash":"7cf2db8d9b86b439b5239dce7724050fbb98ff40","modified":1495707964397},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1495707964398},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1495707964398},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1495707964431},{"_id":"source/favicon.ico","hash":"5707d09082add38a4c671b5aae22459d357345da","modified":1495707964333},{"_id":"source/about/index.md","hash":"9cac6cce962c7b1283e4c10fcbd5192c4becc122","modified":1495707964332},{"_id":"source/categories/index.md","hash":"cecfc19e7ac7aea9cf88735f0714015b1df83e90","modified":1495707964332},{"_id":"source/tags/index.md","hash":"12dadd3b64b5e8482b5c5266cc675d790b4eea51","modified":1495707964359},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1495707964394},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1495707964395},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1495707964398},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1495707964399},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1495707964399},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1495707964399},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1495707964400},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1495707964402},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1495707964402},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1495707964403},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1495707964403},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1495707964403},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1495707964404},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1495707964404},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1495707964404},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1495707964405},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1495707964428},{"_id":"themes/next/layout/category.swig","hash":"be617f098582c4b110935a6d3551f0a8d09fda5a","modified":1495707964428},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1495707964429},{"_id":"themes/next/layout/page.swig","hash":"0a8783d44db72e134db5e221705c74b4731826c9","modified":1495707964429},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1495707964429},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1495707964429},{"_id":"themes/next/layout/tag.swig","hash":"4d891cb52bbd1b584b1c38669968515987e73e12","modified":1495707964430},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1495707964432},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1495707964433},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1495707964531},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1495707964532},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1495707964532},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964473},{"_id":"source/_posts/杂谈/hello-hexo.md","hash":"c2a49dd480611db7f5c447f97371f2eadc51f59f","modified":1495874197398},{"_id":"source/images/about/2_wechat.jpg","hash":"78b4db958144c37a343b3ddc37f6282f0e0afd64","modified":1495707964359},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495707964405},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495707964405},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1495707964406},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1495707964406},{"_id":"themes/next/layout/_macro/post.swig","hash":"3115575c20f7f78734c90faf590f2baea8d08888","modified":1495707964406},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1495707964407},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1495707964407},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1495707964407},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1495707964408},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4ef13e3f6ef564e75218b6d79ff2570fda84cdfd","modified":1495707964408},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1495707964409},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1495707964410},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1495707964410},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1495707964410},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1495707964410},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1495707964413},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1495707964414},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1495707964417},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1495707964424},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1495707964424},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1495707964424},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1495707964425},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1495707964425},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1495707964433},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1495707964434},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1495707964434},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1495707964434},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1495707964435},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1495707964435},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1495707964473},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495707964474},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495707964474},{"_id":"themes/next/source/images/avatar.png","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1495707964475},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495707964475},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495707964475},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495707964476},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495707964476},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495707964476},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495707964477},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495707964477},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495707964477},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495707964477},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495707964478},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495707964478},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495707964478},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964415},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964416},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964461},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964461},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964463},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964471},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495707964472},{"_id":"source/_posts/编程/blog/搭建hexo+gitHub博客.md","hash":"6a1eb723bb9497381d2667e141ba1955eba642a7","modified":1495707964331},{"_id":"source/_posts/编程/log/Logback配置总结.md","hash":"c02f143fa79433584e379c86fbefec2e9b747f76","modified":1495707964331},{"_id":"source/_posts/编程/spring/第一篇之初识Spring.md","hash":"4127ba3dec9e881c486d2cb5aa0ba998abbd29dc","modified":1495788249921},{"_id":"source/_posts/编程/spring/第七篇之Spring Transaction.md","hash":"ba0d34b0ab81cf618ef511bf1a60e56f8e47703a","modified":1496832203657},{"_id":"source/_posts/编程/spring/第三篇之Spring DI.md","hash":"c11cd0e49cd3efcbb8fa97acb7b097852411c575","modified":1495874630012},{"_id":"source/_posts/编程/spring/第二篇之Spirng IOC.md","hash":"8366c00af8032791ddc8c1c56ea9a7c35f931a92","modified":1495867234512},{"_id":"source/_posts/编程/spring/第五篇之Spring JDBC.md","hash":"9f796b7e3dd6177a5bf562493839e09768d4f9d3","modified":1496288695273},{"_id":"source/_posts/编程/spring/第六篇之Spring ORM.md","hash":"10e1cef220b6413a1ae3b352a0a301f633ec996a","modified":1496654765527},{"_id":"source/_posts/编程/spring/第四篇之Spring AOP.md","hash":"e3412d64483fa0be50ec27469ed91003f3bea5e1","modified":1496288320469},{"_id":"source/images/Hexo_blog/git/1_index.jpg","hash":"76a6e77119a0190080435fb43b77b1e0e8dfdb7a","modified":1495707964335},{"_id":"source/images/Hexo_blog/git/2_create.jpg","hash":"51d6a7d4b4fd18d06d94afde2434b04acc5965a0","modified":1495707964336},{"_id":"source/images/Hexo_blog/hexo/1_newdir.jpg","hash":"05db3b49b764e90f67f0bcb1a1f49e71d1808353","modified":1495707964339},{"_id":"source/images/Hexo_blog/hexo/2_version.jpg","hash":"909f09eea4ccb8a1d993ee82af869d583758f951","modified":1495707964341},{"_id":"source/images/Hexo_blog/hexo/4_dir.jpg","hash":"0254027083ff09b0a3d7eaad861a61749c96720c","modified":1495707964345},{"_id":"source/images/Hexo_blog/hexo/3_init.jpg","hash":"cc022c20bb1ef5dd51cf6bf0add22725d772f40a","modified":1495707964344},{"_id":"source/images/Hexo_blog/hexo/5_server.jpg","hash":"c516be1844fc0dece67a14434809b83447172d8e","modified":1495707964346},{"_id":"source/images/Hexo_blog/hexo/index.jpg","hash":"26d135cd37a0c27b13628f4d809613dedbc25070","modified":1495707964349},{"_id":"source/images/Hexo_blog/nodejs/nodejs_version.jpg","hash":"d15976829e6616ba75db78dfc508a7c018ca4099","modified":1495707964350},{"_id":"source/images/Hexo_blog/nodejs/nodejs安装.jpg","hash":"c7347ecdfac7f533f6a2be5d863a773c27868aa4","modified":1495707964354},{"_id":"source/images/spring/1/spirng架构图.JPG","hash":"feab7dab5631cd508f9dc5b4a0c0d890950eb719","modified":1495684432193},{"_id":"source/images/spring/1/spring_transaction.jpg","hash":"9c6488e139cd706fbd2e80843fc6344dd7631793","modified":1496806097662},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1495707964409},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1495707964409},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1495707964411},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1495707964411},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1495707964411},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1495707964412},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1495707964412},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1495707964412},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1495707964413},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1495707964414},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1495707964417},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1495707964418},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1495707964418},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1495707964419},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1495707964420},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1495707964421},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1495707964421},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1495707964422},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1495707964422},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1495707964422},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1495707964423},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1495707964423},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1495707964423},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1495707964423},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1495707964426},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"c6b610d8965615f25279ba63d14dccbb11cfc41f","modified":1495707964427},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1495707964427},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1495707964428},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1495707964460},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1495707964461},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1495707964462},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1495707964471},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1495707964472},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1495707964472},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1495707964479},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1495707964479},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1495707964480},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1495707964480},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1495707964480},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1495707964481},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1495707964481},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1495707964481},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1495707964483},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1495707964484},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1495707964484},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495707964490},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1495707964493},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1495707964494},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1495707964500},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495707964500},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1495707964501},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1495707964501},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1495707964504},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1495707964504},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495707964505},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1495707964505},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1495707964505},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1495707964516},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1495707964518},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1495707964518},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1495707964518},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1495707964519},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1495707964519},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1495707964519},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1495707964520},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1495707964520},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1495707964521},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1495707964527},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1495707964528},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1495707964530},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1495707964531},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1495707964531},{"_id":"source/images/Hexo_blog/git/index.jpg","hash":"2a206433771623741feffee1737f3164ae94b3ed","modified":1495707964338},{"_id":"source/images/Hexo_blog/hexo/6_index.jpg","hash":"6201560316586f879556c7198d86781797568e5f","modified":1495707964348},{"_id":"source/images/Hexo_blog/nodejs/nodejs官网下载.jpg","hash":"8d389105e0cf5f823d1bf4746f93ab2921148b0b","modified":1495707964355},{"_id":"source/images/about/1_index.jpg","hash":"66d6a1aec30ac04a2342c80673d77ca555b1d450","modified":1495707964357},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1495707964517},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1495707964426},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1495707964426},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1495707964436},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1495707964437},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1495707964437},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1495707964438},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1495707964438},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1495707964443},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1495707964452},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1495707964458},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1495707964458},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1495707964458},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1495707964459},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1495707964460},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1495707964460},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1495707964464},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1495707964464},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1495707964465},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1495707964465},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1495707964465},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1495707964466},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495707964466},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1495707964467},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1495707964468},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495707964468},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1495707964467},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1495707964468},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1495707964469},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1495707964470},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1495707964471},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1495707964483},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1495707964489},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1495707964489},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495707964495},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495707964495},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495707964495},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495707964496},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495707964496},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495707964496},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1495707964499},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1495707964500},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1495707964499},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1495707964503},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495707964503},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1495707964506},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1495707964507},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495707964506},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1495707964527},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1495707964527},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1495707964487},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1495707964488},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1495707964516},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1495707964515},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1495707964529},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1495707964439},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1495707964439},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1495707964438},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1495707964440},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1495707964440},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1495707964441},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1495707964441},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1495707964442},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1495707964442},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1495707964442},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1495707964443},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1495707964443},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1495707964440},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1495707964444},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1495707964444},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1495707964444},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1495707964445},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1495707964445},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1495707964445},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1495707964446},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1495707964447},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1495707964448},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1495707964448},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1495707964449},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1495707964449},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1495707964449},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1495707964450},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1495707964450},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1495707964450},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1495707964451},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1495707964452},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1495707964452},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1495707964453},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1495707964453},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1495707964454},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1495707964453},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1495707964454},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1495707964454},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1495707964455},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1495707964455},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1495707964456},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1495707964457},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1495707964457},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1495707964457},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1495707964466},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495707964467},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1495707964439},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495707964469},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1495707964485},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1495707964486},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1495707964486},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1495707964486},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495707964497},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1495707964497},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1495707964498},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1495707964498},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1495707964498},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1495707964498},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1495707964509},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1495707964512},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1495707964515},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1495707964493},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1495707964526},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1495707964513},{"_id":"public/about/index.html","hash":"00abd29635904b3374f85103ec797f62ea12b574","modified":1496832217664},{"_id":"public/tags/index.html","hash":"39726eee5cafa73a56914949e647a4d87f9ecf9e","modified":1496832217664},{"_id":"public/categories/index.html","hash":"dd4f633ea58af3efff8abb48c91877328f1fade1","modified":1496832217664},{"_id":"public/archives/2017/06/index.html","hash":"fa4b39a97ed986bcc0b3402577bd500a1cee5e3a","modified":1496832217664},{"_id":"public/categories/杂谈/index.html","hash":"46462a0eac931a1fa58656b94bcfccb2195d35b6","modified":1496832217664},{"_id":"public/categories/编程/index.html","hash":"beb5309060f70abb5eff517f69b8f34ed135925c","modified":1496832217664},{"_id":"public/categories/log/index.html","hash":"604cb8cde98e47c8897c3d604d70ea9931eeb2d6","modified":1496832217664},{"_id":"public/categories/Spring的那点事/index.html","hash":"13a05c03b94ad2b9029f4f521ef6ad04cbce7d28","modified":1496832217664},{"_id":"public/tags/logback/index.html","hash":"7dcc1c7b375bb39e78c09e71ccda8f066f31678d","modified":1496832217664},{"_id":"public/tags/Spring/index.html","hash":"cec1a38737589a305ecbfb7ebb3a4d34fa37554c","modified":1496832217664},{"_id":"public/2017/05/02/杂谈/hello-hexo/index.html","hash":"6b046dbeaa3c27011abf07c265f164a2f5c8f039","modified":1496832217664},{"_id":"public/2017/05/09/编程/blog/搭建hexo+gitHub博客/index.html","hash":"bced95e9beed1baca195c1a43eea20454ec71889","modified":1496832217664},{"_id":"public/2017/05/11/编程/log/Logback配置总结/index.html","hash":"fbe8651b9eddb9fe7b41a185c47847542daa9a39","modified":1496832217665},{"_id":"public/2017/05/25/编程/spring/第一篇之初识Spring/index.html","hash":"70cc143e72c29c42aee92fd51951d10664f84b95","modified":1496832217665},{"_id":"public/2017/05/26/编程/spring/第二篇之Spirng IOC/index.html","hash":"b963c8bcc212e24043902c4f14be5fbd73303b60","modified":1496832217665},{"_id":"public/2017/05/27/编程/spring/第三篇之Spring DI/index.html","hash":"5f02a9c331f5ab0ad4ab0ce3f0f188650a073a8c","modified":1496832217665},{"_id":"public/2017/05/28/编程/spring/第四篇之Spring AOP/index.html","hash":"9fb461e0b75b864a2695639ad4f1fab0e79f3b13","modified":1496832217665},{"_id":"public/2017/05/31/编程/spring/第五篇之Spring JDBC/index.html","hash":"6d9bcc3fde0b6d9eeb5520b7727f53354fd9bc77","modified":1496832217666},{"_id":"public/2017/06/05/编程/spring/第六篇之Spring ORM/index.html","hash":"89c7116bba7aa15e502ce6bfaa633f1b5212ed84","modified":1496832217666},{"_id":"public/2017/06/07/编程/spring/第七篇之Spring Transaction/index.html","hash":"faa211c724e6c2e7e2bc18d65b1385133cdf1bfc","modified":1496832217666},{"_id":"public/archives/index.html","hash":"e57bc5293343ced87326f3e46d20cc5652b3570f","modified":1496832217666},{"_id":"public/archives/2017/index.html","hash":"a28b99c3ab90d02022bc461c96cc699938959b52","modified":1496832217666},{"_id":"public/archives/2017/05/index.html","hash":"477768369755d151800eef4dafbc3bce46b24ce9","modified":1496832217666},{"_id":"public/index.html","hash":"d470a195c8f5c48000e7c02875d750fe39a09b70","modified":1496832217666},{"_id":"public/favicon1.ico","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1496832217740},{"_id":"public/CNAME","hash":"a680d065d1683c9cba36ec8c740c13348ca84385","modified":1496832217740},{"_id":"public/images/about/2_wechat.jpg","hash":"78b4db958144c37a343b3ddc37f6282f0e0afd64","modified":1496832217740},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1496832217740},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496832217740},{"_id":"public/images/avatar.png","hash":"1d7772cf0954035136a7b39e8fd44b51ea940a3c","modified":1496832217740},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496832217740},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496832217740},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496832217740},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496832217740},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496832217740},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496832217740},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496832217740},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496832217740},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496832217740},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1496832217740},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496832217740},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1496832217740},{"_id":"public/images/Hexo_blog/hexo/1_newdir.jpg","hash":"05db3b49b764e90f67f0bcb1a1f49e71d1808353","modified":1496832217741},{"_id":"public/images/Hexo_blog/git/2_create.jpg","hash":"51d6a7d4b4fd18d06d94afde2434b04acc5965a0","modified":1496832217741},{"_id":"public/images/Hexo_blog/git/1_index.jpg","hash":"76a6e77119a0190080435fb43b77b1e0e8dfdb7a","modified":1496832217741},{"_id":"public/images/Hexo_blog/hexo/2_version.jpg","hash":"909f09eea4ccb8a1d993ee82af869d583758f951","modified":1496832217741},{"_id":"public/images/Hexo_blog/hexo/3_init.jpg","hash":"cc022c20bb1ef5dd51cf6bf0add22725d772f40a","modified":1496832217741},{"_id":"public/images/Hexo_blog/hexo/5_server.jpg","hash":"c516be1844fc0dece67a14434809b83447172d8e","modified":1496832217741},{"_id":"public/images/Hexo_blog/hexo/index.jpg","hash":"26d135cd37a0c27b13628f4d809613dedbc25070","modified":1496832217741},{"_id":"public/images/Hexo_blog/nodejs/nodejs_version.jpg","hash":"d15976829e6616ba75db78dfc508a7c018ca4099","modified":1496832217741},{"_id":"public/images/Hexo_blog/nodejs/nodejs安装.jpg","hash":"c7347ecdfac7f533f6a2be5d863a773c27868aa4","modified":1496832217741},{"_id":"public/images/spring/1/spirng架构图.JPG","hash":"feab7dab5631cd508f9dc5b4a0c0d890950eb719","modified":1496832217741},{"_id":"public/images/spring/1/spring_transaction.jpg","hash":"9c6488e139cd706fbd2e80843fc6344dd7631793","modified":1496832217741},{"_id":"public/images/Hexo_blog/hexo/4_dir.jpg","hash":"0254027083ff09b0a3d7eaad861a61749c96720c","modified":1496832217741},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1496832217741},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1496832217741},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496832217741},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496832217741},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496832217741},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496832217741},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496832217741},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496832217741},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1496832217741},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496832217741},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496832217741},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496832217741},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496832217741},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496832217741},{"_id":"public/favicon.ico","hash":"5707d09082add38a4c671b5aae22459d357345da","modified":1496832218421},{"_id":"public/images/Hexo_blog/hexo/6_index.jpg","hash":"6201560316586f879556c7198d86781797568e5f","modified":1496832218423},{"_id":"public/images/Hexo_blog/git/index.jpg","hash":"2a206433771623741feffee1737f3164ae94b3ed","modified":1496832218435},{"_id":"public/images/Hexo_blog/nodejs/nodejs官网下载.jpg","hash":"8d389105e0cf5f823d1bf4746f93ab2921148b0b","modified":1496832218435},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496832218435},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496832218436},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496832218440},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496832218440},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496832218440},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496832218440},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496832218440},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1496832218441},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496832218441},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496832218441},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1496832218441},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496832218441},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1496832218441},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496832218441},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496832218441},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1496832218442},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1496832218442},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1496832218442},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1496832218442},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1496832218442},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1496832218442},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1496832218442},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496832218442},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496832218442},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1496832218442},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496832218442},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496832218442},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496832218442},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496832218442},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496832218442},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496832218442},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496832218442},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496832218442},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496832218442},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496832218442},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496832218442},{"_id":"public/css/main.css","hash":"03dc7dbd3e4749462adc2d478981ab796305e851","modified":1496832218442},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1496832218442},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1496832218443},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1496832218443},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496832218443},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496832218443},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496832218443},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1496832218443},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1496832218443},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496832218443},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496832218443},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496832218443},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496832218443},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496832218443},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1496832218443},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1496832218443},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496832218443},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496832218443},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496832218443},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496832218443},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496832218444},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496832218444},{"_id":"public/images/about/1_index.jpg","hash":"66d6a1aec30ac04a2342c80673d77ca555b1d450","modified":1496832218446},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1496832218476}],"Category":[{"name":"杂谈","_id":"cj3mv95je0004pkqyqalitubl"},{"name":"编程","_id":"cj3mv95le0008pkqy6ye2wrs4"},{"name":"log","_id":"cj3mv95lm000dpkqy9vager40"},{"name":"Spring的那点事","_id":"cj3mv95lq000jpkqyy3yfptsv"}],"Data":[],"Page":[{"title":"about","date":"2017-05-02T10:26:43.000Z","tags":null,"_content":"\n![](/images/about/1_index.jpg)\n\n### 关于我  \n  I'm Andrew Song\n  坐标：深圳宝安\n  Java开发工程师\n  快乐生活,快乐工作！\n  \n  ---\n  \n### 联系我  \n\nWeChat:  \n![](/images/about/2_wechat.jpg)\n  \n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-05-02 18:26:43\ntags:\n---\n\n![](/images/about/1_index.jpg)\n\n### 关于我  \n  I'm Andrew Song\n  坐标：深圳宝安\n  Java开发工程师\n  快乐生活,快乐工作！\n  \n  ---\n  \n### 联系我  \n\nWeChat:  \n![](/images/about/2_wechat.jpg)\n  \n\n\n\n\n","updated":"2017-05-25T10:26:04.332Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3mv95ci0000pkqy3it1ckru","content":"<p><img src=\"/images/about/1_index.jpg\" alt=\"\"></p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>  I’m Andrew Song<br>  坐标：深圳宝安<br>  Java开发工程师<br>  快乐生活,快乐工作！</p>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>WeChat:<br><img src=\"/images/about/2_wechat.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/about/1_index.jpg\" alt=\"\"></p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>  I’m Andrew Song<br>  坐标：深圳宝安<br>  Java开发工程师<br>  快乐生活,快乐工作！</p>\n<hr>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p>WeChat:<br><img src=\"/images/about/2_wechat.jpg\" alt=\"\"></p>\n"},{"title":"tags","date":"2017-05-09T08:49:50.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-09 16:49:50\ntype: \"tags\"\ncomments: false\n---","updated":"2017-05-25T10:26:04.359Z","path":"tags/index.html","layout":"page","_id":"cj3mv95cj0001pkqybwamlad5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-05-09T07:49:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-05-09 15:49:50\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-25T10:26:04.332Z","path":"categories/index.html","layout":"page","_id":"cj3mv95cl0002pkqyprxzd430","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello Hexo","date":"2017-05-02T06:26:04.000Z","comments":1,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n### 博客简介  \n\n嘿,这是我的博客,使用hexo+gitHub搭建的!\n  \n之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于搜索引擎,如此循环,在搜索上浪费了很多时间,后来\n使用书签和云笔记的来记录,这情况才得以改善一二. \n \n看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,**只要开始,就不晚!**    \n\nso,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  \n\n一起加油吧！！！\n  \n### 约法二章\n- 如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;\n- 如果您想转载本博客文章,无须申请授权,注明出处即可;\n\n\n\n","source":"_posts/杂谈/hello-hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2017-05-02 14:26:04\ntags:\ncategories: 杂谈\ncomments: true\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n### 博客简介  \n\n嘿,这是我的博客,使用hexo+gitHub搭建的!\n  \n之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于搜索引擎,如此循环,在搜索上浪费了很多时间,后来\n使用书签和云笔记的来记录,这情况才得以改善一二. \n \n看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,**只要开始,就不晚!**    \n\nso,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  \n\n一起加油吧！！！\n  \n### 约法二章\n- 如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;\n- 如果您想转载本博客文章,无须申请授权,注明出处即可;\n\n\n\n","slug":"杂谈/hello-hexo","published":1,"updated":"2017-05-27T08:36:37.398Z","layout":"post","photos":[],"link":"","_id":"cj3mv95j80003pkqymax6xwer","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n<h3 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h3><p>嘿,这是我的博客,使用hexo+gitHub搭建的!</p>\n<p>之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于搜索引擎,如此循环,在搜索上浪费了很多时间,后来<br>使用书签和云笔记的来记录,这情况才得以改善一二. </p>\n<p>看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,<strong>只要开始,就不晚!</strong>    </p>\n<p>so,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  </p>\n<p>一起加油吧！！！</p>\n<h3 id=\"约法二章\"><a href=\"#约法二章\" class=\"headerlink\" title=\"约法二章\"></a>约法二章</h3><ul>\n<li>如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;</li>\n<li>如果您想转载本博客文章,无须申请授权,注明出处即可;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=355992&auto=1&height=66\"></iframe>\n\n<h3 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h3><p>嘿,这是我的博客,使用hexo+gitHub搭建的!</p>\n<p>之前没有总结的习惯,用到很多知识点的时候发现记不住了,只得求救于搜索引擎,如此循环,在搜索上浪费了很多时间,后来<br>使用书签和云笔记的来记录,这情况才得以改善一二. </p>\n<p>看博客真的很舒服,受益良多,虽然在CSDN开了博客,但最终还是没能坚持下来,有惰性,也有文笔的原因,but,i believe,<strong>只要开始,就不晚!</strong>    </p>\n<p>so,博主移步到了hexo,因为喜欢这种大道至简的风格,在此只是想记录一下知识点和分享一下生活趣事,另外锻炼一下的表达和写作能力,权当一个日记本来用了..  </p>\n<p>一起加油吧！！！</p>\n<h3 id=\"约法二章\"><a href=\"#约法二章\" class=\"headerlink\" title=\"约法二章\"></a>约法二章</h3><ul>\n<li>如果文章是转载的,博主会在标题注明[转载]且在文末配上原文链接;</li>\n<li>如果您想转载本博客文章,无须申请授权,注明出处即可;</li>\n</ul>\n"},{"title":"搭建hexo+gitHub博客","date":"2017-05-09T06:10:14.000Z","_content":"\n## 准备环境\n### 安装node.js\n点击进入[node.js官网](https://nodejs.org/en/download/)  \n![image](/images/Hexo_blog/nodejs/nodejs官网下载.jpg)  \n下载完成后，双击打开  \n![image](/images/Hexo_blog/nodejs/nodejs安装.jpg)  \n一路next,安装完成。  \n\n **安装完成，让我们来检测一下node.js是否安装成功吧**   \n![image](/images/Hexo_blog/nodejs/nodejs_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n### 安装git \ngit使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，[点击这里](https://git-scm.com/downloads)进入git的下载网站下载git的安装包  \n![image](/images/Hexo_blog/git/index.jpg)\n\n--- \n\n### 安装Hexo\n\nHexo是搭建博客的核心,[点击进入hexo首页](https://hexo.io/)\n\n![image](/images/Hexo_blog/hexo/index.jpg)  \n- **首先创建博客本地的路径**  \n![image](/images/Hexo_blog/hexo/1_newdir.jpg)  \n比如：我这里使用的是e:\\my_blog文件夹  \n- **下载安装hexo**  \n```\n$ npm install -g hexo-cli\n\n```\n**安装完成，让我们来检测一下hexo是否安装成功吧**   \n输入：\n```\n$ hexo -version\n\n```\n![image](/images/Hexo_blog/hexo/2_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n## 配置博客\n\n### hexo初始化  \n```\n//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)\n$ hexo init\n\n```\n\n等等init完成后,继续执行以下指令  \n```\n//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包\n$ npm install\n\n```\n\n初始化完成后,目录如下：  \n![image](/images/Hexo_blog/hexo/4_dir.jpg) \n\n### hexo本地发布  \n\n到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  \n\n```\n//本地发布\n$ hexo s\n\n```\n![image](/images/Hexo_blog/hexo/5_server.jpg)  \n使用浏览器打开[localhost:4000](http://localhost:4000)，可以看到如下的博客首页界面  \n![image](/images/Hexo_blog/hexo/6_index.jpg)\n\n对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# 网站配置\n# Site\ntitle: Hexo # 网站标题\nsubtitle: # 网站副标题\ndescription: # 网站描述\nauthor: John Doe # 您的名字\nlanguage: # 网站使用的语音\ntimezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\n# 网址配置\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com # 网址\nroot: / # 网站根目录\npermalink: :year/:month/:day/:title/ # 文章的永久链接格式\npermalink_defaults: # 永久链接中各部分的默认值\n# 目录配置\n# Directory\nsource_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里\npublic_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags # 标签文件夹\narchive_dir: archives # 归档文件夹\ncategory_dir: categories # 分类文件夹\ncode_dir: downloads/code # Include code 文件夹\ni18n_dir: :lang # 国际化（i18n）文件夹\nskip_render:\n# 文章配置\n# Writing\nnew_post_name: :title.md # 新文章的文件名称\ndefault_layout: post # 预设布局\ntitlecase: false # 把标题转换为 title case\nexternal_link: true # 在新标签中打开链接\nfilename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false # 显示草稿\npost_asset_folder: false # 启动 Asset 文件夹\nrelative_link: false # 把链接改为与根目录的相对位址\nfuture: true # 显示未来的文章\nhighlight: # 代码块的设置\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# 分类 & 标签\n# Category & Tag\ndefault_category: uncategorized # 默认分类\ncategory_map: # 分类别名\t\ntag_map: # 标签别名\n# 日期 & 时间格式\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape #主题配置\n# 部署设置\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n\n```\n\n## 博客发布\n我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!  \n**重要**:*首先你要有个gitHub账号,如果没有,请[点这里](https://github.com/)注册，具体的注册过程就不在这里描述。*  \n- 配置仓库  \n![image](/images/Hexo_blog/git/1_index.jpg)\n登录账号后，在Github页面的右上方选择New repository进行仓库的创建。\n![image](/images/Hexo_blog/git/2_create.jpg)  \n在仓库名字输入框中输入：\n```\nxxx.github.io//xxx表示你的昵称\n\n```\n然后点击==Create repository==来完成创建  \n\n### 配置_config.yml  \n我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git //type类型为git\n  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址\n  branch: master //这里填写master分支\n\n```\n\n### 发布运行  \n到此为止,我们可以使用hexo指令来上传博客到gitHub\n\n```\n$ hexo -g //生成静态文件\n\n$ hexo -d //部署完整(就是发布到我们gitHub仓库)\n    \n```\n\n等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!\n\n\n","source":"_posts/编程/blog/搭建hexo+gitHub博客.md","raw":"---\ntitle: 搭建hexo+gitHub博客\ndate: 2017-05-09 14:10:14\ntags:\ncategories: 编程\n---\n\n## 准备环境\n### 安装node.js\n点击进入[node.js官网](https://nodejs.org/en/download/)  \n![image](/images/Hexo_blog/nodejs/nodejs官网下载.jpg)  \n下载完成后，双击打开  \n![image](/images/Hexo_blog/nodejs/nodejs安装.jpg)  \n一路next,安装完成。  \n\n **安装完成，让我们来检测一下node.js是否安装成功吧**   \n![image](/images/Hexo_blog/nodejs/nodejs_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n### 安装git \ngit使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，[点击这里](https://git-scm.com/downloads)进入git的下载网站下载git的安装包  \n![image](/images/Hexo_blog/git/index.jpg)\n\n--- \n\n### 安装Hexo\n\nHexo是搭建博客的核心,[点击进入hexo首页](https://hexo.io/)\n\n![image](/images/Hexo_blog/hexo/index.jpg)  \n- **首先创建博客本地的路径**  \n![image](/images/Hexo_blog/hexo/1_newdir.jpg)  \n比如：我这里使用的是e:\\my_blog文件夹  \n- **下载安装hexo**  \n```\n$ npm install -g hexo-cli\n\n```\n**安装完成，让我们来检测一下hexo是否安装成功吧**   \n输入：\n```\n$ hexo -version\n\n```\n![image](/images/Hexo_blog/hexo/2_version.jpg)  \n出现上图所示,恭喜你!安装成功了....  \n\n---\n\n## 配置博客\n\n### hexo初始化  \n```\n//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)\n$ hexo init\n\n```\n\n等等init完成后,继续执行以下指令  \n```\n//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包\n$ npm install\n\n```\n\n初始化完成后,目录如下：  \n![image](/images/Hexo_blog/hexo/4_dir.jpg) \n\n### hexo本地发布  \n\n到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  \n\n```\n//本地发布\n$ hexo s\n\n```\n![image](/images/Hexo_blog/hexo/5_server.jpg)  \n使用浏览器打开[localhost:4000](http://localhost:4000)，可以看到如下的博客首页界面  \n![image](/images/Hexo_blog/hexo/6_index.jpg)\n\n对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# 网站配置\n# Site\ntitle: Hexo # 网站标题\nsubtitle: # 网站副标题\ndescription: # 网站描述\nauthor: John Doe # 您的名字\nlanguage: # 网站使用的语音\ntimezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。\n# 网址配置\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com # 网址\nroot: / # 网站根目录\npermalink: :year/:month/:day/:title/ # 文章的永久链接格式\npermalink_defaults: # 永久链接中各部分的默认值\n# 目录配置\n# Directory\nsource_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里\npublic_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。\ntag_dir: tags # 标签文件夹\narchive_dir: archives # 归档文件夹\ncategory_dir: categories # 分类文件夹\ncode_dir: downloads/code # Include code 文件夹\ni18n_dir: :lang # 国际化（i18n）文件夹\nskip_render:\n# 文章配置\n# Writing\nnew_post_name: :title.md # 新文章的文件名称\ndefault_layout: post # 预设布局\ntitlecase: false # 把标题转换为 title case\nexternal_link: true # 在新标签中打开链接\nfilename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false # 显示草稿\npost_asset_folder: false # 启动 Asset 文件夹\nrelative_link: false # 把链接改为与根目录的相对位址\nfuture: true # 显示未来的文章\nhighlight: # 代码块的设置\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# 分类 & 标签\n# Category & Tag\ndefault_category: uncategorized # 默认分类\ncategory_map: # 分类别名\t\ntag_map: # 标签别名\n# 日期 & 时间格式\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape #主题配置\n# 部署设置\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n\n```\n\n## 博客发布\n我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!  \n**重要**:*首先你要有个gitHub账号,如果没有,请[点这里](https://github.com/)注册，具体的注册过程就不在这里描述。*  \n- 配置仓库  \n![image](/images/Hexo_blog/git/1_index.jpg)\n登录账号后，在Github页面的右上方选择New repository进行仓库的创建。\n![image](/images/Hexo_blog/git/2_create.jpg)  \n在仓库名字输入框中输入：\n```\nxxx.github.io//xxx表示你的昵称\n\n```\n然后点击==Create repository==来完成创建  \n\n### 配置_config.yml  \n我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git //type类型为git\n  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址\n  branch: master //这里填写master分支\n\n```\n\n### 发布运行  \n到此为止,我们可以使用hexo指令来上传博客到gitHub\n\n```\n$ hexo -g //生成静态文件\n\n$ hexo -d //部署完整(就是发布到我们gitHub仓库)\n    \n```\n\n等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!\n\n\n","slug":"编程/blog/搭建hexo+gitHub博客","published":1,"updated":"2017-05-25T10:26:04.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lb0006pkqy5hmeplso","content":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>点击进入<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">node.js官网</a><br><img src=\"/images/Hexo_blog/nodejs/nodejs官网下载.jpg\" alt=\"image\"><br>下载完成后，双击打开<br><img src=\"/images/Hexo_blog/nodejs/nodejs安装.jpg\" alt=\"image\"><br>一路next,安装完成。  </p>\n<p> <strong>安装完成，让我们来检测一下node.js是否安装成功吧</strong><br><img src=\"/images/Hexo_blog/nodejs/nodejs_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>git使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">点击这里</a>进入git的下载网站下载git的安装包<br><img src=\"/images/Hexo_blog/git/index.jpg\" alt=\"image\"></p>\n<hr>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Hexo是搭建博客的核心,<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">点击进入hexo首页</a></p>\n<p><img src=\"/images/Hexo_blog/hexo/index.jpg\" alt=\"image\">  </p>\n<ul>\n<li><strong>首先创建博客本地的路径</strong><br><img src=\"/images/Hexo_blog/hexo/1_newdir.jpg\" alt=\"image\"><br>比如：我这里使用的是e:\\my_blog文件夹  </li>\n<li><strong>下载安装hexo</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>安装完成，让我们来检测一下hexo是否安装成功吧</strong><br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -version</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/Hexo_blog/hexo/2_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h2 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h2><h3 id=\"hexo初始化\"><a href=\"#hexo初始化\" class=\"headerlink\" title=\"hexo初始化\"></a>hexo初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)</div><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<p>等等init完成后,继续执行以下指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>初始化完成后,目录如下：<br><img src=\"/images/Hexo_blog/hexo/4_dir.jpg\" alt=\"image\"> </p>\n<h3 id=\"hexo本地发布\"><a href=\"#hexo本地发布\" class=\"headerlink\" title=\"hexo本地发布\"></a>hexo本地发布</h3><p>到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//本地发布</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<p><img src=\"/images/Hexo_blog/hexo/5_server.jpg\" alt=\"image\"><br>使用浏览器打开<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">localhost:4000</a>，可以看到如下的博客首页界面<br><img src=\"/images/Hexo_blog/hexo/6_index.jpg\" alt=\"image\"></p>\n<p>对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"># 网站配置</div><div class=\"line\"># Site</div><div class=\"line\">title: Hexo # 网站标题</div><div class=\"line\">subtitle: # 网站副标题</div><div class=\"line\">description: # 网站描述</div><div class=\"line\">author: John Doe # 您的名字</div><div class=\"line\">language: # 网站使用的语音</div><div class=\"line\">timezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</div><div class=\"line\"># 网址配置</div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com # 网址</div><div class=\"line\">root: / # 网站根目录</div><div class=\"line\">permalink: :year/:month/:day/:title/ # 文章的永久链接格式</div><div class=\"line\">permalink_defaults: # 永久链接中各部分的默认值</div><div class=\"line\"># 目录配置</div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里</div><div class=\"line\">public_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。</div><div class=\"line\">tag_dir: tags # 标签文件夹</div><div class=\"line\">archive_dir: archives # 归档文件夹</div><div class=\"line\">category_dir: categories # 分类文件夹</div><div class=\"line\">code_dir: downloads/code # Include code 文件夹</div><div class=\"line\">i18n_dir: :lang # 国际化（i18n）文件夹</div><div class=\"line\">skip_render:</div><div class=\"line\"># 文章配置</div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # 新文章的文件名称</div><div class=\"line\">default_layout: post # 预设布局</div><div class=\"line\">titlecase: false # 把标题转换为 title case</div><div class=\"line\">external_link: true # 在新标签中打开链接</div><div class=\"line\">filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写</div><div class=\"line\">render_drafts: false # 显示草稿</div><div class=\"line\">post_asset_folder: false # 启动 Asset 文件夹</div><div class=\"line\">relative_link: false # 把链接改为与根目录的相对位址</div><div class=\"line\">future: true # 显示未来的文章</div><div class=\"line\">highlight: # 代码块的设置</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># 分类 &amp; 标签</div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized # 默认分类</div><div class=\"line\">category_map: # 分类别名\t</div><div class=\"line\">tag_map: # 标签别名</div><div class=\"line\"># 日期 &amp; 时间格式</div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape #主题配置</div><div class=\"line\"># 部署设置</div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div></pre></td></tr></table></figure></p>\n<h2 id=\"博客发布\"><a href=\"#博客发布\" class=\"headerlink\" title=\"博客发布\"></a>博客发布</h2><p>我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!<br><strong>重要</strong>:<em>首先你要有个gitHub账号,如果没有,请<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">点这里</a>注册，具体的注册过程就不在这里描述。</em>  </p>\n<ul>\n<li>配置仓库<br><img src=\"/images/Hexo_blog/git/1_index.jpg\" alt=\"image\"><br>登录账号后，在Github页面的右上方选择New repository进行仓库的创建。<br><img src=\"/images/Hexo_blog/git/2_create.jpg\" alt=\"image\"><br>在仓库名字输入框中输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxx.github.io//xxx表示你的昵称</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后点击==Create repository==来完成创建  </p>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置_config.yml\"></a>配置_config.yml</h3><p>我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git //type类型为git</div><div class=\"line\">  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址</div><div class=\"line\">  branch: master //这里填写master分支</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布运行\"><a href=\"#发布运行\" class=\"headerlink\" title=\"发布运行\"></a>发布运行</h3><p>到此为止,我们可以使用hexo指令来上传博客到gitHub</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -g //生成静态文件</div><div class=\"line\"></div><div class=\"line\">$ hexo -d //部署完整(就是发布到我们gitHub仓库)</div></pre></td></tr></table></figure>\n<p>等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>点击进入<a href=\"https://nodejs.org/en/download/\">node.js官网</a><br><img src=\"/images/Hexo_blog/nodejs/nodejs官网下载.jpg\" alt=\"image\"><br>下载完成后，双击打开<br><img src=\"/images/Hexo_blog/nodejs/nodejs安装.jpg\" alt=\"image\"><br>一路next,安装完成。  </p>\n<p> <strong>安装完成，让我们来检测一下node.js是否安装成功吧</strong><br><img src=\"/images/Hexo_blog/nodejs/nodejs_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>git使用一般有两种方式，一种是图形化界面（GUI），另一种是通过命令行，我们这里要使用的是后者，<a href=\"https://git-scm.com/downloads\">点击这里</a>进入git的下载网站下载git的安装包<br><img src=\"/images/Hexo_blog/git/index.jpg\" alt=\"image\"></p>\n<hr>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Hexo是搭建博客的核心,<a href=\"https://hexo.io/\">点击进入hexo首页</a></p>\n<p><img src=\"/images/Hexo_blog/hexo/index.jpg\" alt=\"image\">  </p>\n<ul>\n<li><strong>首先创建博客本地的路径</strong><br><img src=\"/images/Hexo_blog/hexo/1_newdir.jpg\" alt=\"image\"><br>比如：我这里使用的是e:\\my_blog文件夹  </li>\n<li><strong>下载安装hexo</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>安装完成，让我们来检测一下hexo是否安装成功吧</strong><br>输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -version</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/Hexo_blog/hexo/2_version.jpg\" alt=\"image\"><br>出现上图所示,恭喜你!安装成功了….  </p>\n<hr>\n<h2 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h2><h3 id=\"hexo初始化\"><a href=\"#hexo初始化\" class=\"headerlink\" title=\"hexo初始化\"></a>hexo初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//我们在刚开始建好的博客文件夹下执行(我这里使用的是e:\\my_blog)</div><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<p>等等init完成后,继续执行以下指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>初始化完成后,目录如下：<br><img src=\"/images/Hexo_blog/hexo/4_dir.jpg\" alt=\"image\"> </p>\n<h3 id=\"hexo本地发布\"><a href=\"#hexo本地发布\" class=\"headerlink\" title=\"hexo本地发布\"></a>hexo本地发布</h3><p>到这里我们已经开始运行博客了,是不是已经有点迫不及待了,让我们先看以下运行效果  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//本地发布</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure>\n<p><img src=\"/images/Hexo_blog/hexo/5_server.jpg\" alt=\"image\"><br>使用浏览器打开<a href=\"http://localhost:4000\">localhost:4000</a>，可以看到如下的博客首页界面<br><img src=\"/images/Hexo_blog/hexo/6_index.jpg\" alt=\"image\"></p>\n<p>对于博客的配置，我们需要用到_config.yml文件，下面是该文件的默认参数信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"># 网站配置</div><div class=\"line\"># Site</div><div class=\"line\">title: Hexo # 网站标题</div><div class=\"line\">subtitle: # 网站副标题</div><div class=\"line\">description: # 网站描述</div><div class=\"line\">author: John Doe # 您的名字</div><div class=\"line\">language: # 网站使用的语音</div><div class=\"line\">timezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</div><div class=\"line\"># 网址配置</div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com # 网址</div><div class=\"line\">root: / # 网站根目录</div><div class=\"line\">permalink: :year/:month/:day/:title/ # 文章的永久链接格式</div><div class=\"line\">permalink_defaults: # 永久链接中各部分的默认值</div><div class=\"line\"># 目录配置</div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source # 资源文件夹，这个文件夹用来存放内容,我们写的文章就存放在这里</div><div class=\"line\">public_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。</div><div class=\"line\">tag_dir: tags # 标签文件夹</div><div class=\"line\">archive_dir: archives # 归档文件夹</div><div class=\"line\">category_dir: categories # 分类文件夹</div><div class=\"line\">code_dir: downloads/code # Include code 文件夹</div><div class=\"line\">i18n_dir: :lang # 国际化（i18n）文件夹</div><div class=\"line\">skip_render:</div><div class=\"line\"># 文章配置</div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # 新文章的文件名称</div><div class=\"line\">default_layout: post # 预设布局</div><div class=\"line\">titlecase: false # 把标题转换为 title case</div><div class=\"line\">external_link: true # 在新标签中打开链接</div><div class=\"line\">filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写</div><div class=\"line\">render_drafts: false # 显示草稿</div><div class=\"line\">post_asset_folder: false # 启动 Asset 文件夹</div><div class=\"line\">relative_link: false # 把链接改为与根目录的相对位址</div><div class=\"line\">future: true # 显示未来的文章</div><div class=\"line\">highlight: # 代码块的设置</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># 分类 &amp; 标签</div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized # 默认分类</div><div class=\"line\">category_map: # 分类别名\t</div><div class=\"line\">tag_map: # 标签别名</div><div class=\"line\"># 日期 &amp; 时间格式</div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape #主题配置</div><div class=\"line\"># 部署设置</div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div></pre></td></tr></table></figure></p>\n<h2 id=\"博客发布\"><a href=\"#博客发布\" class=\"headerlink\" title=\"博客发布\"></a>博客发布</h2><p>我们可以把博客发布到github，这样别人就可以看到我们写的博客了，下面我们就一起来发布吧!<br><strong>重要</strong>:<em>首先你要有个gitHub账号,如果没有,请<a href=\"https://github.com/\">点这里</a>注册，具体的注册过程就不在这里描述。</em>  </p>\n<ul>\n<li>配置仓库<br><img src=\"/images/Hexo_blog/git/1_index.jpg\" alt=\"image\"><br>登录账号后，在Github页面的右上方选择New repository进行仓库的创建。<br><img src=\"/images/Hexo_blog/git/2_create.jpg\" alt=\"image\"><br>在仓库名字输入框中输入：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxx.github.io//xxx表示你的昵称</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后点击==Create repository==来完成创建  </p>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置_config.yml\"></a>配置_config.yml</h3><p>我们在博客目录中找到_config.yml配置文件，然后找到Deployment的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git //type类型为git</div><div class=\"line\">  repo: https://github.com/leungandi/xxx.github.io.git //这里填写你刚刚创建的仓库地址</div><div class=\"line\">  branch: master //这里填写master分支</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布运行\"><a href=\"#发布运行\" class=\"headerlink\" title=\"发布运行\"></a>发布运行</h3><p>到此为止,我们可以使用hexo指令来上传博客到gitHub</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -g //生成静态文件</div><div class=\"line\"></div><div class=\"line\">$ hexo -d //部署完整(就是发布到我们gitHub仓库)</div></pre></td></tr></table></figure>\n<p>等待上传完成,我们就可以使用gitHub的域名来访问我们的博客了!!!</p>\n"},{"title":"Logback配置总结","date":"2017-05-11T07:22:00.000Z","_content":"\n\n### 什么是Logback?  \nLogback是由log4j创始人设计的又一个开源日志组件,[官方网站](http://logback.qos.ch)。\n\n### Logback配置\n#### 根节点configuration\n- 主要包含以下三个子节点\n - appender\n - logger\n - root\n \n```\ngraph TD\nA[configuration]\nA-->B[appender]\nA-->C[logger]\nA-->D[root]\n```\n\n#### 根节点的属性\n - scan:默认为true,当配置文件改变时,是否自动加载;\n - scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;\n - debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<!-- 省略中间的配置 -->\n</configuration>\n```\n\n#### 全局设置\n##### 设置变量\n- 用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用\"${USER_HOME}\"来获取变量的值.\n - name:变量的名称\n - value:变量的值\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n</configuration>\n```\n\n##### 获取时间戳字符串\n- 获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为\"${}\"\n - key:名称\n - datePattern:时间解析为字符串的格式\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n</configuration>\n```\n\n#### 子节点appender\n- appender是负责写日志的组件,有2个属性值:\n - name:appender的名称\n - class:指定appender的全限定名\n\n```\n<!-- demo 1-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\t\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n</configuration>\n```\n\n- appender的clas常用的有三种\n\n```\ngraph TD\nA[appender class]\nA-->B[ch.qos.logback.core.ConsoleAppender]\nA-->C[ch.qos.logback.core.rolling.RollingFileAppender]\nA-->D[ch.qos.logback.core.FileAppender]\n\n```\n\n##### ConsoleAppender:\n日志输出到控制台,配置参考[demo 1]主要有2个子节点:  \n - `<encoder>`:对日志进行格式化;  \n - `<target>`:字符串System.out或者 System.err,默认 System.out;\n \n##### RollingFileAppender:\n滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:\n - `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n - `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n - `<encoder>`:对日志进行格式化\n - `<rollingPolicy>`:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）\n - `<triggeringPolicy>`: 触发器策略\n - `<prudent>`：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空\n    \n```\ngraph TD\nA[rollingPolicy]\nA-->B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]\nA-->C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]\n```\n\n```\n<!-- demo 2-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <!-- 按日志大小切分日志文件 -->\n    \t<!-- \n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${byDay}/${FILE_NAME}-${byDay}-%i.log.zip</fileNamePattern>\n\t\t\t<minIndex>1</minIndex>\n\t\t\t<maxIndex>10</maxIndex>\n\t\t</rollingPolicy>\n        <!-- \n        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动\n        -->\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<maxFileSize>5MB</maxFileSize>\n\t\t</triggeringPolicy>\n \t\t-->\n \t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t\t<!-- 保存?天的日志文件，默认永久保留 -->\n\t\t\t<!-- <maxHistory>30</maxHistory>  -->\n\t\t</rollingPolicy>\n    \t<encoder>\n\t\t    <pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n    \t</encoder>\n    </appender>\n</configuration>\n```\n \n##### FileAppender:\n日志添加到文件  \n- `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n- `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n- `<encoder>`:对日志进行格式化\n- `<prudent>`:是否安全写入文件,默认false,设置为ture会影响效率\n\n```\n<!-- demo 3-->\n<configuration>\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender>  \n</configuration>\n```\n\n#### 子节点logger\n- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性\n - name:用来指定受此loger约束的某一个包或者具体的某一个类\n - level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别\n - addtivity:是否向上级loger传递打印信息,默认是true\n- `<loger>`:可以包含零个或多个`<appender-ref>`元素,标识这个appender将会添加到这个loger\n\n```\n<configuration>  \n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    \t<encoder>\n\t\t    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n    \t</encoder>\n    </appender>\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender> \n    \n    <logger name=\"com.diandian\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n</configuration>\n```\n\n#### 子节点root\n- root其实是一个根logger,name的名称已经被命名为\"root\",level属性的值同logger;\n\t\n#### encoder参数介绍\n- 负责两件事\n - 一是把日志信息转换成字节数组\n - 二是把字节数组写入到输出流\n- 它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义\n\t\n```\n<encoder>  \n  <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n</encoder> \n\n```\n- `<pattern>`格式介绍:\n    \n转换符| 作用\n---|---\nc {length }  lo {length }  logger {length }  |  输出日志的logger名\nd {pattern } date {pattern }     |  输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容\nm msg message    |  输出应用程序提供的信息\nn | 输出平台相关的分行符“\\n”或者“\\r\\n”\np  le  level | 输出日志级别\nr relative | 输出从程序启动到创建日志记录的时间,单位是毫秒\nt thread | 输出线程名\nreplace(p ){r, t} | p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, \"%replace(%msg){'\\s', ''}\"\n\n格式修饰符 | 作用\n--- | ---\n-(减号) | 左对齐\n4(十进制数表示) | 最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断\n.4(点加十进制数表示) | 最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断\n\n**重要**:格式修饰符位于“%”和转换符之间\n\n```\n<!--完整DEMO-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${USER_HOME}/${FILE_NAME}.log</file>\n\t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t</rollingPolicy>\n\t\t<!-- 日志输出格式 -->\n\t\t<encoder>\n\t\t\t<pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n\t\t</encoder>\n\t</appender>\n\t<logger name=\"com.demo\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</root>\n</configuration>\n```\n\n\n\n\n\n","source":"_posts/编程/log/Logback配置总结.md","raw":"---\ntitle: Logback配置总结\ndate: 2017-05-11 15:22\ncategories: log\ntags: logback\n---\n\n\n### 什么是Logback?  \nLogback是由log4j创始人设计的又一个开源日志组件,[官方网站](http://logback.qos.ch)。\n\n### Logback配置\n#### 根节点configuration\n- 主要包含以下三个子节点\n - appender\n - logger\n - root\n \n```\ngraph TD\nA[configuration]\nA-->B[appender]\nA-->C[logger]\nA-->D[root]\n```\n\n#### 根节点的属性\n - scan:默认为true,当配置文件改变时,是否自动加载;\n - scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;\n - debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<!-- 省略中间的配置 -->\n</configuration>\n```\n\n#### 全局设置\n##### 设置变量\n- 用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用\"${USER_HOME}\"来获取变量的值.\n - name:变量的名称\n - value:变量的值\n\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n</configuration>\n```\n\n##### 获取时间戳字符串\n- 获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为\"${}\"\n - key:名称\n - datePattern:时间解析为字符串的格式\n```\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n</configuration>\n```\n\n#### 子节点appender\n- appender是负责写日志的组件,有2个属性值:\n - name:appender的名称\n - class:指定appender的全限定名\n\n```\n<!-- demo 1-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\t\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n</configuration>\n```\n\n- appender的clas常用的有三种\n\n```\ngraph TD\nA[appender class]\nA-->B[ch.qos.logback.core.ConsoleAppender]\nA-->C[ch.qos.logback.core.rolling.RollingFileAppender]\nA-->D[ch.qos.logback.core.FileAppender]\n\n```\n\n##### ConsoleAppender:\n日志输出到控制台,配置参考[demo 1]主要有2个子节点:  \n - `<encoder>`:对日志进行格式化;  \n - `<target>`:字符串System.out或者 System.err,默认 System.out;\n \n##### RollingFileAppender:\n滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:\n - `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n - `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n - `<encoder>`:对日志进行格式化\n - `<rollingPolicy>`:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）\n - `<triggeringPolicy>`: 触发器策略\n - `<prudent>`：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空\n    \n```\ngraph TD\nA[rollingPolicy]\nA-->B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]\nA-->C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]\n```\n\n```\n<!-- demo 2-->\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"file\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <!-- 按日志大小切分日志文件 -->\n    \t<!-- \n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${byDay}/${FILE_NAME}-${byDay}-%i.log.zip</fileNamePattern>\n\t\t\t<minIndex>1</minIndex>\n\t\t\t<maxIndex>10</maxIndex>\n\t\t</rollingPolicy>\n        <!-- \n        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动\n        -->\n\t\t<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">\n\t\t\t<maxFileSize>5MB</maxFileSize>\n\t\t</triggeringPolicy>\n \t\t-->\n \t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t\t<!-- 保存?天的日志文件，默认永久保留 -->\n\t\t\t<!-- <maxHistory>30</maxHistory>  -->\n\t\t</rollingPolicy>\n    \t<encoder>\n\t\t    <pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n    \t</encoder>\n    </appender>\n</configuration>\n```\n \n##### FileAppender:\n日志添加到文件  \n- `<file>`:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建\n- `<append>`:日志是否追加到文件结尾,可设置的参数为true或者false\n- `<encoder>`:对日志进行格式化\n- `<prudent>`:是否安全写入文件,默认false,设置为ture会影响效率\n\n```\n<!-- demo 3-->\n<configuration>\n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender>  \n</configuration>\n```\n\n#### 子节点logger\n- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性\n - name:用来指定受此loger约束的某一个包或者具体的某一个类\n - level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别\n - addtivity:是否向上级loger传递打印信息,默认是true\n- `<loger>`:可以包含零个或多个`<appender-ref>`元素,标识这个appender将会添加到这个loger\n\n```\n<configuration>  \n    <property name=\"USER_HOME\" value=\"/opt/logs\" />\n    <property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n    <timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n    \n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    \t<encoder>\n\t\t    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n    \t</encoder>\n    </appender>\n    \n    <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n        <file>${USER_HOME}/${FILE_NAME}.log</>\n        <append>true</append>  \n        <encoder>  \n          <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n        </encoder>  \n    </appender> \n    \n    <logger name=\"com.diandian\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n</configuration>\n```\n\n#### 子节点root\n- root其实是一个根logger,name的名称已经被命名为\"root\",level属性的值同logger;\n\t\n#### encoder参数介绍\n- 负责两件事\n - 一是把日志信息转换成字节数组\n - 二是把字节数组写入到输出流\n- 它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义\n\t\n```\n<encoder>  \n  <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n</encoder> \n\n```\n- `<pattern>`格式介绍:\n    \n转换符| 作用\n---|---\nc {length }  lo {length }  logger {length }  |  输出日志的logger名\nd {pattern } date {pattern }     |  输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容\nm msg message    |  输出应用程序提供的信息\nn | 输出平台相关的分行符“\\n”或者“\\r\\n”\np  le  level | 输出日志级别\nr relative | 输出从程序启动到创建日志记录的时间,单位是毫秒\nt thread | 输出线程名\nreplace(p ){r, t} | p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, \"%replace(%msg){'\\s', ''}\"\n\n格式修饰符 | 作用\n--- | ---\n-(减号) | 左对齐\n4(十进制数表示) | 最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断\n.4(点加十进制数表示) | 最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断\n\n**重要**:格式修饰符位于“%”和转换符之间\n\n```\n<!--完整DEMO-->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration scan=\"true\" scanPeriod=\"1800 seconds\" debug=\"false\">\n\n\t<property name=\"USER_HOME\" value=\"/opt/logs\" />\n\t<property scope=\"context\" name=\"FILE_NAME\" value=\"test_log\" />\n\n\t<timestamp key=\"byDay\" datePattern=\"yyyy-MM-dd\" />\n\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${USER_HOME}/${FILE_NAME}.log</file>\n\t\t<!-- 按照日期切分日志文件，每天生成一个日志文件 -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${USER_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}.log.tar.gz</fileNamePattern>  \n\t\t</rollingPolicy>\n\t\t<!-- 日志输出格式 -->\n\t\t<encoder>\n\t\t\t<pattern>%-4relative %d - [%thread] %-5level %logger{35} - %msg%n </pattern>\n\t\t</encoder>\n\t</appender>\n\t<logger name=\"com.demo\" level=\"debug\" additivity=\"false\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</logger>\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"FILE\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</root>\n</configuration>\n```\n\n\n\n\n\n","slug":"编程/log/Logback配置总结","published":1,"updated":"2017-05-25T10:26:04.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lc0007pkqy3jltsznc","content":"<h3 id=\"什么是Logback\"><a href=\"#什么是Logback\" class=\"headerlink\" title=\"什么是Logback?\"></a>什么是Logback?</h3><p>Logback是由log4j创始人设计的又一个开源日志组件,<a href=\"http://logback.qos.ch\" target=\"_blank\" rel=\"external\">官方网站</a>。</p>\n<h3 id=\"Logback配置\"><a href=\"#Logback配置\" class=\"headerlink\" title=\"Logback配置\"></a>Logback配置</h3><h4 id=\"根节点configuration\"><a href=\"#根节点configuration\" class=\"headerlink\" title=\"根节点configuration\"></a>根节点configuration</h4><ul>\n<li>主要包含以下三个子节点<ul>\n<li>appender</li>\n<li>logger</li>\n<li>root</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[configuration]</div><div class=\"line\">A--&gt;B[appender]</div><div class=\"line\">A--&gt;C[logger]</div><div class=\"line\">A--&gt;D[root]</div></pre></td></tr></table></figure>\n<h4 id=\"根节点的属性\"><a href=\"#根节点的属性\" class=\"headerlink\" title=\"根节点的属性\"></a>根节点的属性</h4><ul>\n<li>scan:默认为true,当配置文件改变时,是否自动加载;</li>\n<li>scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;</li>\n<li>debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;!-- 省略中间的配置 --&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><h5 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\"设置变量\"></a>设置变量</h5><ul>\n<li>用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用”${USER_HOME}”来获取变量的值.<ul>\n<li>name:变量的名称</li>\n<li>value:变量的值</li>\n</ul>\n</proerty></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"获取时间戳字符串\"><a href=\"#获取时间戳字符串\" class=\"headerlink\" title=\"获取时间戳字符串\"></a>获取时间戳字符串</h5><ul>\n<li>获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为”${}”<ul>\n<li>key:名称</li>\n<li>datePattern:时间解析为字符串的格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</timestamp></li>\n</ul>\n<h4 id=\"子节点appender\"><a href=\"#子节点appender\" class=\"headerlink\" title=\"子节点appender\"></a>子节点appender</h4><ul>\n<li>appender是负责写日志的组件,有2个属性值:<ul>\n<li>name:appender的名称</li>\n<li>class:指定appender的全限定名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 1--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>appender的clas常用的有三种</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[appender class]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.ConsoleAppender]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.RollingFileAppender]</div><div class=\"line\">A--&gt;D[ch.qos.logback.core.FileAppender]</div></pre></td></tr></table></figure>\n<h5 id=\"ConsoleAppender\"><a href=\"#ConsoleAppender\" class=\"headerlink\" title=\"ConsoleAppender:\"></a>ConsoleAppender:</h5><p>日志输出到控制台,配置参考[demo 1]主要有2个子节点:  </p>\n<ul>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化;  </li>\n<li><code>&lt;target&gt;</code>:字符串System.out或者 System.err,默认 System.out;</li>\n</ul>\n<h5 id=\"RollingFileAppender\"><a href=\"#RollingFileAppender\" class=\"headerlink\" title=\"RollingFileAppender:\"></a>RollingFileAppender:</h5><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:</p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;rollingPolicy&gt;</code>:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）</li>\n<li><code>&lt;triggeringPolicy&gt;</code>: 触发器策略</li>\n<li><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[rollingPolicy]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 2--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;!-- 按日志大小切分日志文件 --&gt;</div><div class=\"line\">    \t&lt;!-- </div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;byDay&#125;/$&#123;FILE_NAME&#125;-$&#123;byDay&#125;-%i.log.zip&lt;/fileNamePattern&gt;</div><div class=\"line\">\t\t\t&lt;minIndex&gt;1&lt;/minIndex&gt;</div><div class=\"line\">\t\t\t&lt;maxIndex&gt;10&lt;/maxIndex&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">        &lt;!-- </div><div class=\"line\">        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动</div><div class=\"line\">        --&gt;</div><div class=\"line\">\t\t&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;</div><div class=\"line\">\t\t&lt;/triggeringPolicy&gt;</div><div class=\"line\"> \t\t--&gt;</div><div class=\"line\"> \t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t\t&lt;!-- 保存?天的日志文件，默认永久保留 --&gt;</div><div class=\"line\">\t\t\t&lt;!-- &lt;maxHistory&gt;30&lt;/maxHistory&gt;  --&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"FileAppender\"><a href=\"#FileAppender\" class=\"headerlink\" title=\"FileAppender:\"></a>FileAppender:</h5><p>日志添加到文件  </p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;prudent&gt;</code>:是否安全写入文件,默认false,设置为ture会影响效率</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 3--&gt;</div><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点logger\"><a href=\"#子节点logger\" class=\"headerlink\" title=\"子节点logger\"></a>子节点logger</h4><ul>\n<li>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性<ul>\n<li>name:用来指定受此loger约束的某一个包或者具体的某一个类</li>\n<li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别</li>\n<li>addtivity:是否向上级loger传递打印信息,默认是true</li>\n</ul>\n</loger></appender></li>\n<li><code>&lt;loger&gt;</code>:可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素,标识这个appender将会添加到这个loger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;  </div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt; </div><div class=\"line\">    </div><div class=\"line\">    &lt;logger name=&quot;com.diandian&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点root\"><a href=\"#子节点root\" class=\"headerlink\" title=\"子节点root\"></a>子节点root</h4><ul>\n<li>root其实是一个根logger,name的名称已经被命名为”root”,level属性的值同logger;</li>\n</ul>\n<h4 id=\"encoder参数介绍\"><a href=\"#encoder参数介绍\" class=\"headerlink\" title=\"encoder参数介绍\"></a>encoder参数介绍</h4><ul>\n<li>负责两件事<ul>\n<li>一是把日志信息转换成字节数组</li>\n<li>二是把字节数组写入到输出流</li>\n</ul>\n</li>\n<li>它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义</pattern></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;encoder&gt;  </div><div class=\"line\">  &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">&lt;/encoder&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;pattern&gt;</code>格式介绍:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c {length }  lo {length }  logger {length }</td>\n<td>输出日志的logger名</td>\n</tr>\n<tr>\n<td>d {pattern } date {pattern }</td>\n<td>输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容</td>\n</tr>\n<tr>\n<td>m msg message</td>\n<td>输出应用程序提供的信息</td>\n</tr>\n<tr>\n<td>n</td>\n<td>输出平台相关的分行符“\\n”或者“\\r\\n”</td>\n</tr>\n<tr>\n<td>p  le  level</td>\n<td>输出日志级别</td>\n</tr>\n<tr>\n<td>r relative</td>\n<td>输出从程序启动到创建日志记录的时间,单位是毫秒</td>\n</tr>\n<tr>\n<td>t thread</td>\n<td>输出线程名</td>\n</tr>\n<tr>\n<td>replace(p ){r, t}</td>\n<td>p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, “%replace(%msg){‘\\s’, ‘’}”</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>格式修饰符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-(减号)</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>4(十进制数表示)</td>\n<td>最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断</td>\n</tr>\n<tr>\n<td>.4(点加十进制数表示)</td>\n<td>最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断</td>\n</tr>\n</tbody>\n</table>\n<p><strong>重要</strong>:格式修饰符位于“%”和转换符之间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--完整DEMO--&gt;</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/file&gt;</div><div class=\"line\">\t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">\t\t&lt;!-- 日志输出格式 --&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">\t&lt;logger name=&quot;com.demo&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">\t&lt;root level=&quot;INFO&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/root&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Logback\"><a href=\"#什么是Logback\" class=\"headerlink\" title=\"什么是Logback?\"></a>什么是Logback?</h3><p>Logback是由log4j创始人设计的又一个开源日志组件,<a href=\"http://logback.qos.ch\">官方网站</a>。</p>\n<h3 id=\"Logback配置\"><a href=\"#Logback配置\" class=\"headerlink\" title=\"Logback配置\"></a>Logback配置</h3><h4 id=\"根节点configuration\"><a href=\"#根节点configuration\" class=\"headerlink\" title=\"根节点configuration\"></a>根节点configuration</h4><ul>\n<li>主要包含以下三个子节点<ul>\n<li>appender</li>\n<li>logger</li>\n<li>root</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[configuration]</div><div class=\"line\">A--&gt;B[appender]</div><div class=\"line\">A--&gt;C[logger]</div><div class=\"line\">A--&gt;D[root]</div></pre></td></tr></table></figure>\n<h4 id=\"根节点的属性\"><a href=\"#根节点的属性\" class=\"headerlink\" title=\"根节点的属性\"></a>根节点的属性</h4><ul>\n<li>scan:默认为true,当配置文件改变时,是否自动加载;</li>\n<li>scanPreiod:默认为1分钟(60 seconds),设置监测配置文件是否有修改的时间间隔,当scan为true时,此属性才会生效;</li>\n<li>debug:默认为false,设置为true时,会打印Logback的内部日志,查看Logback的运行状态;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;!-- 省略中间的配置 --&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h4><h5 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\"设置变量\"></a>设置变量</h5><ul>\n<li>用来自定义用户的变量,使用<proerty>来进行定义,property有2个属性值,我们可以使用”${USER_HOME}”来获取变量的值.<ul>\n<li>name:变量的名称</li>\n<li>value:变量的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"获取时间戳字符串\"><a href=\"#获取时间戳字符串\" class=\"headerlink\" title=\"获取时间戳字符串\"></a>获取时间戳字符串</h5><ul>\n<li>获取时间戳字符串,使用<timestamp>来进行定义,timestamp也有2个属性值,获取值得方法同样为”${}”<ul>\n<li>key:名称</li>\n<li>datePattern:时间解析为字符串的格式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"子节点appender\"><a href=\"#子节点appender\" class=\"headerlink\" title=\"子节点appender\"></a>子节点appender</h4><ul>\n<li>appender是负责写日志的组件,有2个属性值:<ul>\n<li>name:appender的名称</li>\n<li>class:指定appender的全限定名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 1--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>appender的clas常用的有三种</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[appender class]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.ConsoleAppender]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.RollingFileAppender]</div><div class=\"line\">A--&gt;D[ch.qos.logback.core.FileAppender]</div></pre></td></tr></table></figure>\n<h5 id=\"ConsoleAppender\"><a href=\"#ConsoleAppender\" class=\"headerlink\" title=\"ConsoleAppender:\"></a>ConsoleAppender:</h5><p>日志输出到控制台,配置参考[demo 1]主要有2个子节点:  </p>\n<ul>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化;  </li>\n<li><code>&lt;target&gt;</code>:字符串System.out或者 System.err,默认 System.out;</li>\n</ul>\n<h5 id=\"RollingFileAppender\"><a href=\"#RollingFileAppender\" class=\"headerlink\" title=\"RollingFileAppender:\"></a>RollingFileAppender:</h5><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件,主要有4个节点:</p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;rollingPolicy&gt;</code>:滚动策略,有TimeBasedRollingPolicy（按时间制定策略,常用这种）和FixedWindowRollingPolicy（按固定窗口算法）</li>\n<li><code>&lt;triggeringPolicy&gt;</code>: 触发器策略</li>\n<li><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">graph TD</div><div class=\"line\">A[rollingPolicy]</div><div class=\"line\">A--&gt;B[ch.qos.logback.core.rolling.FixedWindowRollingPolicy]</div><div class=\"line\">A--&gt;C[ch.qos.logback.core.rolling.TimeBasedRollingPolicy]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 2--&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;!-- 按日志大小切分日志文件 --&gt;</div><div class=\"line\">    \t&lt;!-- </div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;byDay&#125;/$&#123;FILE_NAME&#125;-$&#123;byDay&#125;-%i.log.zip&lt;/fileNamePattern&gt;</div><div class=\"line\">\t\t\t&lt;minIndex&gt;1&lt;/minIndex&gt;</div><div class=\"line\">\t\t\t&lt;maxIndex&gt;10&lt;/maxIndex&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">        &lt;!-- </div><div class=\"line\">        当SizeBasedTriggeringPolicy触发时（即文件大小达到5MB），则启 动FixedWindowsRollingPolicy对日志文件进行滚动。MinIndex和MaxIndex分别表示最小计数和最大计数。 MaxFileSize则表示日志文件达到多少的时候进行滚动</div><div class=\"line\">        --&gt;</div><div class=\"line\">\t\t&lt;triggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;</div><div class=\"line\">\t\t&lt;/triggeringPolicy&gt;</div><div class=\"line\"> \t\t--&gt;</div><div class=\"line\"> \t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t\t&lt;!-- 保存?天的日志文件，默认永久保留 --&gt;</div><div class=\"line\">\t\t\t&lt;!-- &lt;maxHistory&gt;30&lt;/maxHistory&gt;  --&gt;</div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"FileAppender\"><a href=\"#FileAppender\" class=\"headerlink\" title=\"FileAppender:\"></a>FileAppender:</h5><p>日志添加到文件  </p>\n<ul>\n<li><code>&lt;file&gt;</code>:写入的文件名,相对/绝对路径都可以,如果目录不存在,Logback会创建</li>\n<li><code>&lt;append&gt;</code>:日志是否追加到文件结尾,可设置的参数为true或者false</li>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化</li>\n<li><code>&lt;prudent&gt;</code>:是否安全写入文件,默认false,设置为ture会影响效率</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- demo 3--&gt;</div><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点logger\"><a href=\"#子节点logger\" class=\"headerlink\" title=\"子节点logger\"></a>子节点logger</h4><ul>\n<li>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>,<loger>仅有一个name属性,一个可选的level和一个可选的addtivity属性<ul>\n<li>name:用来指定受此loger约束的某一个包或者具体的某一个类</li>\n<li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF,还有一个特俗值INHERITED或者同义词NULL,代表强制执行上级的级别</li>\n<li>addtivity:是否向上级loger传递打印信息,默认是true</li>\n</ul>\n</li>\n<li><code>&lt;loger&gt;</code>:可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素,标识这个appender将会添加到这个loger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;  </div><div class=\"line\">    &lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">    &lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\">    &lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">    \t&lt;encoder&gt;</div><div class=\"line\">\t\t    &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">    \t&lt;/encoder&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">    </div><div class=\"line\">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;  </div><div class=\"line\">        &lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/&gt;</div><div class=\"line\">        &lt;append&gt;true&lt;/append&gt;  </div><div class=\"line\">        &lt;encoder&gt;  </div><div class=\"line\">          &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">        &lt;/encoder&gt;  </div><div class=\"line\">    &lt;/appender&gt; </div><div class=\"line\">    </div><div class=\"line\">    &lt;logger name=&quot;com.diandian&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"子节点root\"><a href=\"#子节点root\" class=\"headerlink\" title=\"子节点root\"></a>子节点root</h4><ul>\n<li>root其实是一个根logger,name的名称已经被命名为”root”,level属性的值同logger;</li>\n</ul>\n<h4 id=\"encoder参数介绍\"><a href=\"#encoder参数介绍\" class=\"headerlink\" title=\"encoder参数介绍\"></a>encoder参数介绍</h4><ul>\n<li>负责两件事<ul>\n<li>一是把日志信息转换成字节数组</li>\n<li>二是把字节数组写入到输出流</li>\n</ul>\n</li>\n<li>它有一个<pattern>子节点,用来设置日志的输出格式,使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;encoder&gt;  </div><div class=\"line\">  &lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n&lt;/pattern&gt;  </div><div class=\"line\">&lt;/encoder&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;pattern&gt;</code>格式介绍:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转换符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c {length }  lo {length }  logger {length }</td>\n<td>输出日志的logger名</td>\n</tr>\n<tr>\n<td>d {pattern } date {pattern }</td>\n<td>输出日志的打印日志,模式语法与java.text.SimpleDateFormat 兼容</td>\n</tr>\n<tr>\n<td>m msg message</td>\n<td>输出应用程序提供的信息</td>\n</tr>\n<tr>\n<td>n</td>\n<td>输出平台相关的分行符“\\n”或者“\\r\\n”</td>\n</tr>\n<tr>\n<td>p  le  level</td>\n<td>输出日志级别</td>\n</tr>\n<tr>\n<td>r relative</td>\n<td>输出从程序启动到创建日志记录的时间,单位是毫秒</td>\n</tr>\n<tr>\n<td>t thread</td>\n<td>输出线程名</td>\n</tr>\n<tr>\n<td>replace(p ){r, t}</td>\n<td>p 为日志内容,r 是正则表达式,将p 中符合r 的内容替换为t,例如, “%replace(%msg){‘\\s’, ‘’}”</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>格式修饰符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-(减号)</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>4(十进制数表示)</td>\n<td>最小宽度,如果字符小于最小宽度,则左填充或右填充，默认是左填充（即右对齐）,填充符为空格,如果字符大于最小宽度,字符永远不会被截断</td>\n</tr>\n<tr>\n<td>.4(点加十进制数表示)</td>\n<td>最大宽度,如果字符大于最大宽度,则从前面截断;点符号“.”后面加减号“-”在加数字,表示从尾部截断</td>\n</tr>\n</tbody>\n</table>\n<p><strong>重要</strong>:格式修饰符位于“%”和转换符之间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--完整DEMO--&gt;</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;1800 seconds&quot; debug=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;property name=&quot;USER_HOME&quot; value=&quot;/opt/logs&quot; /&gt;</div><div class=\"line\">\t&lt;property scope=&quot;context&quot; name=&quot;FILE_NAME&quot; value=&quot;test_log&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;timestamp key=&quot;byDay&quot; datePattern=&quot;yyyy-MM-dd&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class=\"line\">\t\t&lt;file&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;.log&lt;/file&gt;</div><div class=\"line\">\t\t&lt;!-- 按照日期切分日志文件，每天生成一个日志文件 --&gt;</div><div class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;USER_HOME&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log.tar.gz&lt;/fileNamePattern&gt;  </div><div class=\"line\">\t\t&lt;/rollingPolicy&gt;</div><div class=\"line\">\t\t&lt;!-- 日志输出格式 --&gt;</div><div class=\"line\">\t\t&lt;encoder&gt;</div><div class=\"line\">\t\t\t&lt;pattern&gt;%-4relative %d - [%thread] %-5level %logger&#123;35&#125; - %msg%n &lt;/pattern&gt;</div><div class=\"line\">\t\t&lt;/encoder&gt;</div><div class=\"line\">\t&lt;/appender&gt;</div><div class=\"line\">\t&lt;logger name=&quot;com.demo&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/logger&gt;</div><div class=\"line\">\t&lt;root level=&quot;INFO&quot;&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class=\"line\">\t\t&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class=\"line\">\t&lt;/root&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n"},{"title":"第一篇之初识Spring","date":"2017-05-25T03:40:00.000Z","_content":"\n### 初识Spring\n#### 简单了解Spring\nSpring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。\n\n### Spring框架结构\n![image](\\images\\spring\\1\\spirng架构图.JPG)\n\n#### Core Container(核心容器)\n由core，Bean，上下文和表达式语言模块组成\n- Core模块：Spring的核心类库，主要实现Ioc功能。\n- Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。\n- Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。\n- EL模块：提供强大的表达式语言支持。\n#### Date Access/Integration(数据访问/集成模块)\n包括JDBC，ORM，OXM，JMS 和事务处理模块\n- JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。\n- ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。\n- OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。\n- JMS：Java Messaging Service\n- Transactions：用于Spring管理事务，支持编程和声明性的事物管理。\n#### Web\n由 Web，Servlet，Struts 和 Portlet 组成\n- Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。\n- Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。\n- Web-Struts：提供了与Struts无缝集成。\n- Portlet：提供Portlet环境中实现MVC。\n#### Aop&Aspects\n- Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。\n- Aspects：提供了与 AspectJ 的集成。\n#### Instrumentaiion\n模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。\n#### Test\nSpring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。\n### Spring的特点\n- 轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。\n- 事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。\n- AOP支持：方便面向切面编程，把通用的功能提取出来。\n- JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。\n- Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。","source":"_posts/编程/spring/第一篇之初识Spring.md","raw":"---\ntitle: 第一篇之初识Spring\ndate: 2017-05-25 11:40\ncategories: Spring的那点事\ntags: Spring\n---\n\n### 初识Spring\n#### 简单了解Spring\nSpring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。\n\n### Spring框架结构\n![image](\\images\\spring\\1\\spirng架构图.JPG)\n\n#### Core Container(核心容器)\n由core，Bean，上下文和表达式语言模块组成\n- Core模块：Spring的核心类库，主要实现Ioc功能。\n- Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。\n- Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。\n- EL模块：提供强大的表达式语言支持。\n#### Date Access/Integration(数据访问/集成模块)\n包括JDBC，ORM，OXM，JMS 和事务处理模块\n- JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。\n- ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。\n- OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。\n- JMS：Java Messaging Service\n- Transactions：用于Spring管理事务，支持编程和声明性的事物管理。\n#### Web\n由 Web，Servlet，Struts 和 Portlet 组成\n- Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。\n- Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。\n- Web-Struts：提供了与Struts无缝集成。\n- Portlet：提供Portlet环境中实现MVC。\n#### Aop&Aspects\n- Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。\n- Aspects：提供了与 AspectJ 的集成。\n#### Instrumentaiion\n模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。\n#### Test\nSpring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。\n### Spring的特点\n- 轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。\n- 事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。\n- AOP支持：方便面向切面编程，把通用的功能提取出来。\n- JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。\n- Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。","slug":"编程/spring/第一篇之初识Spring","published":1,"updated":"2017-05-26T08:44:09.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lf0009pkqyz35l3ou3","content":"<h3 id=\"初识Spring\"><a href=\"#初识Spring\" class=\"headerlink\" title=\"初识Spring\"></a>初识Spring</h3><h4 id=\"简单了解Spring\"><a href=\"#简单了解Spring\" class=\"headerlink\" title=\"简单了解Spring\"></a>简单了解Spring</h4><p>Spring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。</p>\n<h3 id=\"Spring框架结构\"><a href=\"#Spring框架结构\" class=\"headerlink\" title=\"Spring框架结构\"></a>Spring框架结构</h3><p><img src=\"\\images\\spring\\1\\spirng架构图.JPG\" alt=\"image\"></p>\n<h4 id=\"Core-Container-核心容器\"><a href=\"#Core-Container-核心容器\" class=\"headerlink\" title=\"Core Container(核心容器)\"></a>Core Container(核心容器)</h4><p>由core，Bean，上下文和表达式语言模块组成</p>\n<ul>\n<li>Core模块：Spring的核心类库，主要实现Ioc功能。</li>\n<li>Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。</li>\n<li>Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。</li>\n<li>EL模块：提供强大的表达式语言支持。<h4 id=\"Date-Access-Integration-数据访问-集成模块\"><a href=\"#Date-Access-Integration-数据访问-集成模块\" class=\"headerlink\" title=\"Date Access/Integration(数据访问/集成模块)\"></a>Date Access/Integration(数据访问/集成模块)</h4>包括JDBC，ORM，OXM，JMS 和事务处理模块</li>\n<li>JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。</li>\n<li>ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。</li>\n<li>OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li>\n<li>JMS：Java Messaging Service</li>\n<li>Transactions：用于Spring管理事务，支持编程和声明性的事物管理。<h4 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h4>由 Web，Servlet，Struts 和 Portlet 组成</li>\n<li>Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。</li>\n<li>Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。</li>\n<li>Web-Struts：提供了与Struts无缝集成。</li>\n<li>Portlet：提供Portlet环境中实现MVC。<h4 id=\"Aop-amp-Aspects\"><a href=\"#Aop-amp-Aspects\" class=\"headerlink\" title=\"Aop&amp;Aspects\"></a>Aop&amp;Aspects</h4></li>\n<li>Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。</li>\n<li>Aspects：提供了与 AspectJ 的集成。<h4 id=\"Instrumentaiion\"><a href=\"#Instrumentaiion\" class=\"headerlink\" title=\"Instrumentaiion\"></a>Instrumentaiion</h4>模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4>Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。<h3 id=\"Spring的特点\"><a href=\"#Spring的特点\" class=\"headerlink\" title=\"Spring的特点\"></a>Spring的特点</h3></li>\n<li>轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。</li>\n<li>事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。</li>\n<li>AOP支持：方便面向切面编程，把通用的功能提取出来。</li>\n<li>JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。</li>\n<li>Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"初识Spring\"><a href=\"#初识Spring\" class=\"headerlink\" title=\"初识Spring\"></a>初识Spring</h3><h4 id=\"简单了解Spring\"><a href=\"#简单了解Spring\" class=\"headerlink\" title=\"简单了解Spring\"></a>简单了解Spring</h4><p>Spring是一个轻量级的企业开源框架，于2003年兴起，由Rod Johnson创建！其目的是为了简化企业及应用程序的开发，Spring框架的核心是一个Ioc容器。</p>\n<h3 id=\"Spring框架结构\"><a href=\"#Spring框架结构\" class=\"headerlink\" title=\"Spring框架结构\"></a>Spring框架结构</h3><p><img src=\"\\images\\spring\\1\\spirng架构图.JPG\" alt=\"image\"></p>\n<h4 id=\"Core-Container-核心容器\"><a href=\"#Core-Container-核心容器\" class=\"headerlink\" title=\"Core Container(核心容器)\"></a>Core Container(核心容器)</h4><p>由core，Bean，上下文和表达式语言模块组成</p>\n<ul>\n<li>Core模块：Spring的核心类库，主要实现Ioc功能。</li>\n<li>Beans模块：模块提供Bean Factory，提倡面向接口编程，所有的依赖关系都有Bean Factory来维护。</li>\n<li>Context模块：模块建立在由核心和 Bean 模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext 接口是上下文模块的重点。</li>\n<li>EL模块：提供强大的表达式语言支持。<h4 id=\"Date-Access-Integration-数据访问-集成模块\"><a href=\"#Date-Access-Integration-数据访问-集成模块\" class=\"headerlink\" title=\"Date Access/Integration(数据访问/集成模块)\"></a>Date Access/Integration(数据访问/集成模块)</h4>包括JDBC，ORM，OXM，JMS 和事务处理模块</li>\n<li>JDBC：提供JDBC的JdbcTemplate，减少传统JDBC冗余的编码和事务控制。</li>\n<li>ORM：提供对象关系映射API，包括 JPA，JDO，hibernate 和 MyBatis，提供了集成层。</li>\n<li>OXM：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li>\n<li>JMS：Java Messaging Service</li>\n<li>Transactions：用于Spring管理事务，支持编程和声明性的事物管理。<h4 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h4>由 Web，Servlet，Struts 和 Portlet 组成</li>\n<li>Web：提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。</li>\n<li>Web-Servlet：提供了一个Spring MVC Web框架实现,即：模型-视图-控制器（MVC）。</li>\n<li>Web-Struts：提供了与Struts无缝集成。</li>\n<li>Portlet：提供Portlet环境中实现MVC。<h4 id=\"Aop-amp-Aspects\"><a href=\"#Aop-amp-Aspects\" class=\"headerlink\" title=\"Aop&amp;Aspects\"></a>Aop&amp;Aspects</h4></li>\n<li>Aop：提供了面向方面的编程实现，允许自定义方法拦截器和切入点对代码进行干净地解耦，比如业务代码和日志代码的解耦。</li>\n<li>Aspects：提供了与 AspectJ 的集成。<h4 id=\"Instrumentaiion\"><a href=\"#Instrumentaiion\" class=\"headerlink\" title=\"Instrumentaiion\"></a>Instrumentaiion</h4>模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。<h4 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h4>Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。<h3 id=\"Spring的特点\"><a href=\"#Spring的特点\" class=\"headerlink\" title=\"Spring的特点\"></a>Spring的特点</h3></li>\n<li>轻量级的容器：Spring容器是非侵入式的，对象创建和装配和生命周期完全由容器负责。</li>\n<li>事务管理：Spring的事务管理可以让我们专注于业务逻辑的开发。</li>\n<li>AOP支持：方便面向切面编程，把通用的功能提取出来。</li>\n<li>JDBC抽象和ORM框架的支持：Spring简化了传统的JDBC冗余编码,并且非常方便集成第三方ORM，如Mybatis。</li>\n<li>Web支持：非常方便集成web框架,且Spirng提供了SpringMVC,可以无缝集成。</li>\n</ul>\n"},{"title":"第七篇之Spring Transaction","date":"2017-06-07T03:12:00.000Z","_content":"\n## 数据库事务概念\n\n> 数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。\n\n### 相关属性\n名称|解释\n---|---\n原子性(Atomicity)|事务必须是原子工作单元。对于其数据修改，要么全都执行，要么全都不执行\n一致性(Consistency)|事务在完成时，必须使所有的数据都保持一致状态\n隔离性(Isolation)|由并发事务所作的修改必须与任何其它并发事务所作的修改隔离，这需要事务隔离级别来指定隔离性\n持久性(Durability)|事务完成之后，它对于系统的影响是永久性的\n\n### 隔离级别\n\n在数据库操作中，为了有效保证并发读取数据的正确性，提出的事务隔离级别。\n名称|解释\n---|---\n未提交读(Read Uncommitted)|最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读\n提交读(Read Committed)|一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不可能出现丢失更新、脏读，但可能出现不可重复读、幻读\n可重复读(Repeatable Read)|保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读\n序列化(Serializable)|最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读\n\n> 隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。\n\n## Spring提供的事务管理\n\nSpring并不直接管理事务，而是提供了多种事务管理器，将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现\n\nSpring事务管理涉及的接口的如下\n![image](\\images\\spring\\1\\spring_transaction.jpg)\n图片来源于网络\n\n### PlatformTransactionManager接口\n#### PlatformTransactionManager接口：\n\n```\npackage org.springframework.transaction;\n\npublic interface PlatformTransactionManager {\n\n//返回一个已经激活的事务或创建一个新的事务（根据给定的TransactionDefinition类型参数定义的事务属性）\nTransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;\n//提交\nvoid commit(TransactionStatus status) throws TransactionException;\n//回滚\nvoid rollback(TransactionStatus status) throws TransactionException;\n\n}\n\n```\n#### TransactionDefinition接口\n\n这个接口提供定义事务属性\n\n```\npackage org.springframework.transaction;\n\nimport java.sql.Connection;\npublic interface TransactionDefinition {\n\n\tint PROPAGATION_REQUIRED = 0;\n\n\tint PROPAGATION_SUPPORTS = 1;\n\t\n\tint PROPAGATION_MANDATORY = 2;\n\n\tint PROPAGATION_REQUIRES_NEW = 3;\n\n\tint PROPAGATION_NOT_SUPPORTED = 4;\n\n\tint PROPAGATION_NEVER = 5;\n\n\tint PROPAGATION_NESTED = 6;\n\n\tint ISOLATION_DEFAULT = -1;\n\n\tint ISOLATION_READ_UNCOMMITTED = Connection.TRANSACTION_READ_UNCOMMITTED;\n\t\n\tint ISOLATION_READ_COMMITTED = Connection.TRANSACTION_READ_COMMITTED;\n\n\tint ISOLATION_REPEATABLE_READ = Connection.TRANSACTION_REPEATABLE_READ;\n\n\tint ISOLATION_SERIALIZABLE = Connection.TRANSACTION_SERIALIZABLE;\n\n\tint TIMEOUT_DEFAULT = -1;\n    //返回定义的事务传播行为\n\tint getPropagationBehavior();\n    //返回定义的事务隔离级别\n\tint getIsolationLevel();\n    //返回定义的事务超时时间\n\tint getTimeout();\n    //返回定义的事务是否是只读的\n\tboolean isReadOnly();\n    //返回定义的事务名字\n\tString getName();\n\n}\n\n\n```\n\n#### TransactionStatus接口\n\n这个接口提供简单的控制事务执行和查询事务状态的方法\n\n```\npackage org.springframework.transaction;\nimport java.io.Flushable;\npublic interface TransactionStatus extends SavepointManager, Flushable {\n    //返回当前事务状态是否是新事务\n\tboolean isNewTransaction();\n    //返回当前事务是否有保存点\n\tboolean hasSavepoint();\n    //设置当前事务应该回滚\n\tvoid setRollbackOnly();\n    //回当前事务是否应该回滚\n\tboolean isRollbackOnly();\n    //用于刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，可能对如JDBC类型的事务无任何影响\n\t@Override\n\tvoid flush();\n    //当前事务否已经完成\n\tboolean isCompleted();\n\n}\n\n\n```\n\n### Spring内置事务管理器实现\n名称|解释\n---|---\nDataSourceTransactionManager|位于org.springframework.jdbc.datasource包中，数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC抽象框架、iBATIS或MyBatis框架的事务管理\nJdoTransactionManager|位于org.springframework.orm.jdo包中，提供对单个javax.jdo.PersistenceManagerFactory事务管理，用于集成JDO框架时的事务管理\nJpaTransactionManager|位于org.springframework.orm.jpa包中，提供对单个javax.persistence.EntityManagerFactory事务支持，用于集成JPA实现框架时的事务管理\nHibernateTransactionManager|于org.springframework.orm.hibernate3包中，提供对单个org.hibernate.SessionFactory事务支持，用于集成Hibernate框架时的事务管理\nJtaTransactionManager|位于org.springframework.transaction.jta包中，提供对分布式事务管理的支持，并将事务管理委托给Java EE应用服务器事务管理器\nOC4JjtaTransactionManager|位于org.springframework.transaction.jta包中，Spring提供的对OC4J10.1.3+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持\nWebSphereUowTransactionManager|位于org.springframework.transaction.jta包中，Spring提供的对WebSphere 6.0+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持\nWebLogicJtaTransactionManager|位于org.springframework.transaction.jta包中，Spring提供的对WebLogic 8.1+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持\n\n\n### Spring事务属性\n事务管理器接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性\n\n#### 传播行为\n\n事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。\n\nSpring定义了七种传播行为：\n\n传播行为|含义\n---|---\nPROPAGATION_REQUIRED|表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务\nPROPAGATION_SUPPORTS|表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行\nPROPAGATION_MANDATORY|表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\nPROPAGATION_REQUIRED_NEW|表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\nPROPAGATION_NOT_SUPPORTED|表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\nPROPAGATION_NEVER|表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\nPROPAGATION_NESTED|表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。\n\n#### 隔离级别\n\n隔离级别定义了一个事务可能受其他并发事务影响的程度\n\n隔离级别|含义\n---|---\nISOLATION_DEFAULT|默认隔离级别，即使用底层数据库默认的隔离级别\nISOLATION_READ_UNCOMMITTED|未提交读；\nISOLATION_READ_COMMITTED|提交读，一般情况下我们使用这个\nISOLATION_REPEATABLE_READ|可重复读\nISOLATION_SERIALIZABLE|序列化\n\n## Spring事务测试\n\n> Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦。 \n简单地说，编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以既能起到事务管理的作用，又可以不影响业务代码的具体实现。\n\n\n### 编程式事务\n\nSpring提供两种方式的编程式事务管理，分别是：\n\n1.使用PlatformTransactionManager\n\n2.使用TransactionTemplate\n> TransactionTemplate模板类用于简化事务管理，事务管理由模板类定义，而具体操作需要通过TransactionCallback回调接口或TransactionCallbackWithoutResult回调接口指定，通过调用模板类的参数类型为TransactionCallback或TransactionCallbackWithoutResult的execute方法来自动享受事务管理，TransactionTemplate是线程安全的。\n\n#### 使用PlatformTransactionManager\n##### xml配置\n\n```\n<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->\n <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">    \n    <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n\n```\n\n##### 测试代码\n```\n@Test\npublic void testPlatformTransactionManager(){\n \tPlatformTransactionManager ptm = ac.getBean(\"transactionManager\",PlatformTransactionManager.class);\n \tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n \t//定义事务属性\n \tDefaultTransactionDefinition dtd = new DefaultTransactionDefinition();\n \t//设置隔离级别\n \tdtd.setIsolationLevel(DefaultTransactionDefinition.ISOLATION_DEFAULT);\n\t//设置传播行为\n \tdtd.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED);\n \t//获取事务状态\n \tTransactionStatus ts = ptm.getTransaction(dtd);\n\tList<Map<String, Object>> queryUser;\n\ttry {\n\t\t//业务逻辑的处理\n\t\tqueryUser = userDaoImpl.queryUser();\n\t\tSystem.out.println(\"testMapperFactoryBean:\"+queryUser.toString());\n\t\t//提交\n\t\tptm.commit(ts);\n\t} catch (Exception e) {\n\t\t//回滚\n\t\tptm.rollback(ts);\n\t}\t\n}\n\n```\n\n#### 使用TransactionTemplate\n\n##### xml配置\n\n```\n<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->\n <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">    \n    <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n\n<!-- 使用TransactionTemplate -->\n<bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n\t<!-- 设置transactionManager -->\n\t<constructor-arg name=\"transactionManager\" ref=\"transactionManager\"></constructor-arg>\n</bean>\n\n```\n\n##### 测试代码\n```\n@Test\npublic void testTransactionTemplate(){\n\tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\tTransactionTemplate tt = ac.getBean(\"transactionTemplate\",TransactionTemplate.class);\n\t\t\tList<Map<String, Object>> queryUser = tt.execute(new TransactionCallback<List<Map<String, Object>>>() {\n\n\t\t@Override\n\t\tpublic List<Map<String, Object>> doInTransaction(TransactionStatus status) {\n\t\t\t//业务逻辑的处理\n\t\t\ttry {\n\t\t\t\treturn userDaoImpl.queryUser();\n\t\t\t} catch (Exception e) {\n\t\t\t\t//异常回滚\n\t\t\t\tstatus.setRollbackOnly();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t});\n\tSystem.out.println(\"testTransactionTemplate:\"+queryUser.toString());\n}\n\n```\n\n### 声明式事务\n\n> 声明式事务支持，使用该方式后最大的获益是简单，事务管理不再是令人痛苦的，而且此方式属于无侵入式，对业务逻辑实现无影响。\n\n#### xml配置\n\n```\n<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">    \n    <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n\n\n<!-- ****************************声明式事务***************************************** -->\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t<tx:attributes>\n\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" isolation=\"DEFAULT\"/>\n\t\t<tx:method name=\"*\" propagation=\"REQUIRED\" isolation=\"DEFAULT\" read-only=\"true\"/>\n\t</tx:attributes>\n</tx:advice>\n\n<aop:config proxy-target-class=\"true\">\n\t<aop:pointcut expression=\"execution(* com.szl.springorm.service.impl.*.*(..))\" id=\"txPointcut\"/>\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointcut\"/>\n</aop:config>\n\t\t\n```\n\n#### 测试代码\n\n```\n\n/**\n * 声明式事务测试\n * @author SongZhangLiang\n */\n@Test\npublic void testTransaction(){\n\tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testPlatformTransactionManager:\"+queryUser.toString());\n}\n\n```\n\n#### 声明式事务XML配置详解\n\n属性|含义\n---|---\n`<tx:advice`|事务通知定义，用于指定事务属性，其中`transaction-manager`属性指定事务管理器，并通过`<tx:attributes >`指定具体需要拦截的方法\n`<tx:method name=\"update*\">`|表示将拦截以update开头的方法，被拦截的方法将应用配置的事务属性：propagation=\"REQUIRED\"表示传播行为是Required，isolation=\"DEFAULT\"表示隔离级别依赖底层事务系统\n`<tx:method name=\"*\">`|表示将拦截其他所有方法，被拦截的方法将应用配置的事务属性：propagation=\"REQUIRED\"表示传播行为是Required，isolation=\"DEFAULT\"表示隔离级别依赖底层事务系统，read-only=\"true\"表示事务只读\n`<aop:config>`|AOP相关配置\n`<aop:pointcut/>`|切入点定义，定义名为\"serviceMethod\"的aspectj切入点，切入点表达式为`execution(* com.szl.springorm.service.impl.*.*(..))`表示拦截impl包及子包下的任何类的任何方法\n`<aop:advisor>`|Advisor定义，其中切入点为txPointcut，通知为txAdvice\n\n\n### @Transactional实现事务管理\n\n> 对声明式事务管理，Spring提供基于@Transactional注解方式来实现，但需要Java 5+。\n 注解方式是最简单的事务配置方式，可以直接在Java源代码中声明事务属性，且对于每一个业务类或方法如果需要事务都必须使用此注解。\n \n#### XML配置\n\n配置支持声明式事务\n\n```\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n```\n\n#### 业务代码\n\n业务逻辑层代码，我们在方法上使用`@Transactional`注解\n```\n@Transactional\n@Override\npublic List<Map<String, Object>> queryUser() {\n\treturn userDao1.queryUser();\n}\n\n```\n \n#### 测试代码\n\n```\n/**\n * 声明式事务测试_注解\n * @author SongZhangLiang\n */\n@Test\npublic void testTransactionAnnotation(){\n\tcom.szl.springtransaction.service.impl.UserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl1\",com.szl.springtransaction.service.impl.UserServiceImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testTransactionAnnotation:\"+queryUser.toString());\n}\n\n```\n\n#### @Transactional配置介绍\n\nSpring提供的`<tx:annotation-driven/>`用于开启对注解事务管理的支持，从而能识别Bean类上的@Transactional注解元数据，其具有以下属性：\n\n- transaction-manager：指定事务管理器名字，默认为transactionManager，当使用其他名字时需要明确指定\n- proxy-target-class：表示将使用的代码机制，默认false表示使用JDK代理，如果为true将使用CGLIB代理\n- order：定义事务通知顺序，默认Ordered.LOWEST_PRECEDENCE，表示将顺序决定权交给AOP来处理。\n\nSpring使用`@Transaction`来指定事务属性，可以在接口、类或方法上指定，如果类和方法上都指定了`@Transaction`，则方法上的事务属性被优先使用，具体属性如下：\n\n- value：指定事务管理器名字，默认使用`<tx:annotation-driven/>`指定的事务管理器，用于支持多事务管理器环境\n- propagation：指定事务传播行为，默认为Required，使用Propagation.REQUIRED指定\n- isolation：指定事务隔离级别，默认为“DEFAULT”，使用Isolation.DEFAULT指定\n- readOnly：指定事务是否只读，默认false表示事务非只读\n- timeout：指定事务超时时间，以秒为单位，默认-1表示事务超时将依赖于底层事务系统\n- rollbackFor：指定一组异常类，遇到该类异常将回滚事务\n- rollbackForClassname：指定一组异常类名字，其含义与`<tx:method>`中的rollback-for属性语义完全一样\n- noRollbackFor：指定一组异常类，即使遇到该类异常也将提交事务，即不回滚事务\n- noRollbackForClassname：指定一组异常类名字，其含义与`<tx:method>`中的no-rollback-for属性语义完全一样\n\n#### @Transactional注意事项\n- 如果在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为方法>实现类>接口\n- 默认只对RuntimeException异常回滚\n- 在使用Spring代理时，默认只有在public可见度的方法的@Transactional 注解才是有效的，其它可见度（protected、private、包可见）的方法上即使有@Transactional 注解也不会应用这些事务属性的，Spring也不会报错，如果你非要使用非公共方法注解事务管理的话，可考虑使用AspectJ\n\n\n\n\n","source":"_posts/编程/spring/第七篇之Spring Transaction.md","raw":"---\ntitle: 第七篇之Spring Transaction\ndate: 2017-06-07 11:12\ncategories: Spring的那点事\ntags: Spring\n---\n\n## 数据库事务概念\n\n> 数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。\n\n### 相关属性\n名称|解释\n---|---\n原子性(Atomicity)|事务必须是原子工作单元。对于其数据修改，要么全都执行，要么全都不执行\n一致性(Consistency)|事务在完成时，必须使所有的数据都保持一致状态\n隔离性(Isolation)|由并发事务所作的修改必须与任何其它并发事务所作的修改隔离，这需要事务隔离级别来指定隔离性\n持久性(Durability)|事务完成之后，它对于系统的影响是永久性的\n\n### 隔离级别\n\n在数据库操作中，为了有效保证并发读取数据的正确性，提出的事务隔离级别。\n名称|解释\n---|---\n未提交读(Read Uncommitted)|最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读\n提交读(Read Committed)|一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不可能出现丢失更新、脏读，但可能出现不可重复读、幻读\n可重复读(Repeatable Read)|保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读\n序列化(Serializable)|最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读\n\n> 隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。\n\n## Spring提供的事务管理\n\nSpring并不直接管理事务，而是提供了多种事务管理器，将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现\n\nSpring事务管理涉及的接口的如下\n![image](\\images\\spring\\1\\spring_transaction.jpg)\n图片来源于网络\n\n### PlatformTransactionManager接口\n#### PlatformTransactionManager接口：\n\n```\npackage org.springframework.transaction;\n\npublic interface PlatformTransactionManager {\n\n//返回一个已经激活的事务或创建一个新的事务（根据给定的TransactionDefinition类型参数定义的事务属性）\nTransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;\n//提交\nvoid commit(TransactionStatus status) throws TransactionException;\n//回滚\nvoid rollback(TransactionStatus status) throws TransactionException;\n\n}\n\n```\n#### TransactionDefinition接口\n\n这个接口提供定义事务属性\n\n```\npackage org.springframework.transaction;\n\nimport java.sql.Connection;\npublic interface TransactionDefinition {\n\n\tint PROPAGATION_REQUIRED = 0;\n\n\tint PROPAGATION_SUPPORTS = 1;\n\t\n\tint PROPAGATION_MANDATORY = 2;\n\n\tint PROPAGATION_REQUIRES_NEW = 3;\n\n\tint PROPAGATION_NOT_SUPPORTED = 4;\n\n\tint PROPAGATION_NEVER = 5;\n\n\tint PROPAGATION_NESTED = 6;\n\n\tint ISOLATION_DEFAULT = -1;\n\n\tint ISOLATION_READ_UNCOMMITTED = Connection.TRANSACTION_READ_UNCOMMITTED;\n\t\n\tint ISOLATION_READ_COMMITTED = Connection.TRANSACTION_READ_COMMITTED;\n\n\tint ISOLATION_REPEATABLE_READ = Connection.TRANSACTION_REPEATABLE_READ;\n\n\tint ISOLATION_SERIALIZABLE = Connection.TRANSACTION_SERIALIZABLE;\n\n\tint TIMEOUT_DEFAULT = -1;\n    //返回定义的事务传播行为\n\tint getPropagationBehavior();\n    //返回定义的事务隔离级别\n\tint getIsolationLevel();\n    //返回定义的事务超时时间\n\tint getTimeout();\n    //返回定义的事务是否是只读的\n\tboolean isReadOnly();\n    //返回定义的事务名字\n\tString getName();\n\n}\n\n\n```\n\n#### TransactionStatus接口\n\n这个接口提供简单的控制事务执行和查询事务状态的方法\n\n```\npackage org.springframework.transaction;\nimport java.io.Flushable;\npublic interface TransactionStatus extends SavepointManager, Flushable {\n    //返回当前事务状态是否是新事务\n\tboolean isNewTransaction();\n    //返回当前事务是否有保存点\n\tboolean hasSavepoint();\n    //设置当前事务应该回滚\n\tvoid setRollbackOnly();\n    //回当前事务是否应该回滚\n\tboolean isRollbackOnly();\n    //用于刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，可能对如JDBC类型的事务无任何影响\n\t@Override\n\tvoid flush();\n    //当前事务否已经完成\n\tboolean isCompleted();\n\n}\n\n\n```\n\n### Spring内置事务管理器实现\n名称|解释\n---|---\nDataSourceTransactionManager|位于org.springframework.jdbc.datasource包中，数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC抽象框架、iBATIS或MyBatis框架的事务管理\nJdoTransactionManager|位于org.springframework.orm.jdo包中，提供对单个javax.jdo.PersistenceManagerFactory事务管理，用于集成JDO框架时的事务管理\nJpaTransactionManager|位于org.springframework.orm.jpa包中，提供对单个javax.persistence.EntityManagerFactory事务支持，用于集成JPA实现框架时的事务管理\nHibernateTransactionManager|于org.springframework.orm.hibernate3包中，提供对单个org.hibernate.SessionFactory事务支持，用于集成Hibernate框架时的事务管理\nJtaTransactionManager|位于org.springframework.transaction.jta包中，提供对分布式事务管理的支持，并将事务管理委托给Java EE应用服务器事务管理器\nOC4JjtaTransactionManager|位于org.springframework.transaction.jta包中，Spring提供的对OC4J10.1.3+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持\nWebSphereUowTransactionManager|位于org.springframework.transaction.jta包中，Spring提供的对WebSphere 6.0+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持\nWebLogicJtaTransactionManager|位于org.springframework.transaction.jta包中，Spring提供的对WebLogic 8.1+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持\n\n\n### Spring事务属性\n事务管理器接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性\n\n#### 传播行为\n\n事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。\n\nSpring定义了七种传播行为：\n\n传播行为|含义\n---|---\nPROPAGATION_REQUIRED|表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务\nPROPAGATION_SUPPORTS|表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行\nPROPAGATION_MANDATORY|表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\nPROPAGATION_REQUIRED_NEW|表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\nPROPAGATION_NOT_SUPPORTED|表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\nPROPAGATION_NEVER|表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\nPROPAGATION_NESTED|表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。\n\n#### 隔离级别\n\n隔离级别定义了一个事务可能受其他并发事务影响的程度\n\n隔离级别|含义\n---|---\nISOLATION_DEFAULT|默认隔离级别，即使用底层数据库默认的隔离级别\nISOLATION_READ_UNCOMMITTED|未提交读；\nISOLATION_READ_COMMITTED|提交读，一般情况下我们使用这个\nISOLATION_REPEATABLE_READ|可重复读\nISOLATION_SERIALIZABLE|序列化\n\n## Spring事务测试\n\n> Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦。 \n简单地说，编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以既能起到事务管理的作用，又可以不影响业务代码的具体实现。\n\n\n### 编程式事务\n\nSpring提供两种方式的编程式事务管理，分别是：\n\n1.使用PlatformTransactionManager\n\n2.使用TransactionTemplate\n> TransactionTemplate模板类用于简化事务管理，事务管理由模板类定义，而具体操作需要通过TransactionCallback回调接口或TransactionCallbackWithoutResult回调接口指定，通过调用模板类的参数类型为TransactionCallback或TransactionCallbackWithoutResult的execute方法来自动享受事务管理，TransactionTemplate是线程安全的。\n\n#### 使用PlatformTransactionManager\n##### xml配置\n\n```\n<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->\n <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">    \n    <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n\n```\n\n##### 测试代码\n```\n@Test\npublic void testPlatformTransactionManager(){\n \tPlatformTransactionManager ptm = ac.getBean(\"transactionManager\",PlatformTransactionManager.class);\n \tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n \t//定义事务属性\n \tDefaultTransactionDefinition dtd = new DefaultTransactionDefinition();\n \t//设置隔离级别\n \tdtd.setIsolationLevel(DefaultTransactionDefinition.ISOLATION_DEFAULT);\n\t//设置传播行为\n \tdtd.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED);\n \t//获取事务状态\n \tTransactionStatus ts = ptm.getTransaction(dtd);\n\tList<Map<String, Object>> queryUser;\n\ttry {\n\t\t//业务逻辑的处理\n\t\tqueryUser = userDaoImpl.queryUser();\n\t\tSystem.out.println(\"testMapperFactoryBean:\"+queryUser.toString());\n\t\t//提交\n\t\tptm.commit(ts);\n\t} catch (Exception e) {\n\t\t//回滚\n\t\tptm.rollback(ts);\n\t}\t\n}\n\n```\n\n#### 使用TransactionTemplate\n\n##### xml配置\n\n```\n<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->\n <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">    \n    <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n\n<!-- 使用TransactionTemplate -->\n<bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n\t<!-- 设置transactionManager -->\n\t<constructor-arg name=\"transactionManager\" ref=\"transactionManager\"></constructor-arg>\n</bean>\n\n```\n\n##### 测试代码\n```\n@Test\npublic void testTransactionTemplate(){\n\tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\tTransactionTemplate tt = ac.getBean(\"transactionTemplate\",TransactionTemplate.class);\n\t\t\tList<Map<String, Object>> queryUser = tt.execute(new TransactionCallback<List<Map<String, Object>>>() {\n\n\t\t@Override\n\t\tpublic List<Map<String, Object>> doInTransaction(TransactionStatus status) {\n\t\t\t//业务逻辑的处理\n\t\t\ttry {\n\t\t\t\treturn userDaoImpl.queryUser();\n\t\t\t} catch (Exception e) {\n\t\t\t\t//异常回滚\n\t\t\t\tstatus.setRollbackOnly();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t});\n\tSystem.out.println(\"testTransactionTemplate:\"+queryUser.toString());\n}\n\n```\n\n### 声明式事务\n\n> 声明式事务支持，使用该方式后最大的获益是简单，事务管理不再是令人痛苦的，而且此方式属于无侵入式，对业务逻辑实现无影响。\n\n#### xml配置\n\n```\n<!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC -->\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">    \n    <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n\n\n<!-- ****************************声明式事务***************************************** -->\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t<tx:attributes>\n\t\t<tx:method name=\"update*\" propagation=\"REQUIRED\" isolation=\"DEFAULT\"/>\n\t\t<tx:method name=\"*\" propagation=\"REQUIRED\" isolation=\"DEFAULT\" read-only=\"true\"/>\n\t</tx:attributes>\n</tx:advice>\n\n<aop:config proxy-target-class=\"true\">\n\t<aop:pointcut expression=\"execution(* com.szl.springorm.service.impl.*.*(..))\" id=\"txPointcut\"/>\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointcut\"/>\n</aop:config>\n\t\t\n```\n\n#### 测试代码\n\n```\n\n/**\n * 声明式事务测试\n * @author SongZhangLiang\n */\n@Test\npublic void testTransaction(){\n\tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testPlatformTransactionManager:\"+queryUser.toString());\n}\n\n```\n\n#### 声明式事务XML配置详解\n\n属性|含义\n---|---\n`<tx:advice`|事务通知定义，用于指定事务属性，其中`transaction-manager`属性指定事务管理器，并通过`<tx:attributes >`指定具体需要拦截的方法\n`<tx:method name=\"update*\">`|表示将拦截以update开头的方法，被拦截的方法将应用配置的事务属性：propagation=\"REQUIRED\"表示传播行为是Required，isolation=\"DEFAULT\"表示隔离级别依赖底层事务系统\n`<tx:method name=\"*\">`|表示将拦截其他所有方法，被拦截的方法将应用配置的事务属性：propagation=\"REQUIRED\"表示传播行为是Required，isolation=\"DEFAULT\"表示隔离级别依赖底层事务系统，read-only=\"true\"表示事务只读\n`<aop:config>`|AOP相关配置\n`<aop:pointcut/>`|切入点定义，定义名为\"serviceMethod\"的aspectj切入点，切入点表达式为`execution(* com.szl.springorm.service.impl.*.*(..))`表示拦截impl包及子包下的任何类的任何方法\n`<aop:advisor>`|Advisor定义，其中切入点为txPointcut，通知为txAdvice\n\n\n### @Transactional实现事务管理\n\n> 对声明式事务管理，Spring提供基于@Transactional注解方式来实现，但需要Java 5+。\n 注解方式是最简单的事务配置方式，可以直接在Java源代码中声明事务属性，且对于每一个业务类或方法如果需要事务都必须使用此注解。\n \n#### XML配置\n\n配置支持声明式事务\n\n```\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n```\n\n#### 业务代码\n\n业务逻辑层代码，我们在方法上使用`@Transactional`注解\n```\n@Transactional\n@Override\npublic List<Map<String, Object>> queryUser() {\n\treturn userDao1.queryUser();\n}\n\n```\n \n#### 测试代码\n\n```\n/**\n * 声明式事务测试_注解\n * @author SongZhangLiang\n */\n@Test\npublic void testTransactionAnnotation(){\n\tcom.szl.springtransaction.service.impl.UserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl1\",com.szl.springtransaction.service.impl.UserServiceImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testTransactionAnnotation:\"+queryUser.toString());\n}\n\n```\n\n#### @Transactional配置介绍\n\nSpring提供的`<tx:annotation-driven/>`用于开启对注解事务管理的支持，从而能识别Bean类上的@Transactional注解元数据，其具有以下属性：\n\n- transaction-manager：指定事务管理器名字，默认为transactionManager，当使用其他名字时需要明确指定\n- proxy-target-class：表示将使用的代码机制，默认false表示使用JDK代理，如果为true将使用CGLIB代理\n- order：定义事务通知顺序，默认Ordered.LOWEST_PRECEDENCE，表示将顺序决定权交给AOP来处理。\n\nSpring使用`@Transaction`来指定事务属性，可以在接口、类或方法上指定，如果类和方法上都指定了`@Transaction`，则方法上的事务属性被优先使用，具体属性如下：\n\n- value：指定事务管理器名字，默认使用`<tx:annotation-driven/>`指定的事务管理器，用于支持多事务管理器环境\n- propagation：指定事务传播行为，默认为Required，使用Propagation.REQUIRED指定\n- isolation：指定事务隔离级别，默认为“DEFAULT”，使用Isolation.DEFAULT指定\n- readOnly：指定事务是否只读，默认false表示事务非只读\n- timeout：指定事务超时时间，以秒为单位，默认-1表示事务超时将依赖于底层事务系统\n- rollbackFor：指定一组异常类，遇到该类异常将回滚事务\n- rollbackForClassname：指定一组异常类名字，其含义与`<tx:method>`中的rollback-for属性语义完全一样\n- noRollbackFor：指定一组异常类，即使遇到该类异常也将提交事务，即不回滚事务\n- noRollbackForClassname：指定一组异常类名字，其含义与`<tx:method>`中的no-rollback-for属性语义完全一样\n\n#### @Transactional注意事项\n- 如果在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为方法>实现类>接口\n- 默认只对RuntimeException异常回滚\n- 在使用Spring代理时，默认只有在public可见度的方法的@Transactional 注解才是有效的，其它可见度（protected、private、包可见）的方法上即使有@Transactional 注解也不会应用这些事务属性的，Spring也不会报错，如果你非要使用非公共方法注解事务管理的话，可考虑使用AspectJ\n\n\n\n\n","slug":"编程/spring/第七篇之Spring Transaction","published":1,"updated":"2017-06-07T10:43:23.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lh000bpkqyakasstht","content":"<h2 id=\"数据库事务概念\"><a href=\"#数据库事务概念\" class=\"headerlink\" title=\"数据库事务概念\"></a>数据库事务概念</h2><blockquote>\n<p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</p>\n</blockquote>\n<h3 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原子性(Atomicity)</td>\n<td>事务必须是原子工作单元。对于其数据修改，要么全都执行，要么全都不执行</td>\n</tr>\n<tr>\n<td>一致性(Consistency)</td>\n<td>事务在完成时，必须使所有的数据都保持一致状态</td>\n</tr>\n<tr>\n<td>隔离性(Isolation)</td>\n<td>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离，这需要事务隔离级别来指定隔离性</td>\n</tr>\n<tr>\n<td>持久性(Durability)</td>\n<td>事务完成之后，它对于系统的影响是永久性的</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><p>在数据库操作中，为了有效保证并发读取数据的正确性，提出的事务隔离级别。<br>名称|解释<br>—|—<br>未提交读(Read Uncommitted)|最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读<br>提交读(Read Committed)|一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不可能出现丢失更新、脏读，但可能出现不可重复读、幻读<br>可重复读(Repeatable Read)|保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读<br>序列化(Serializable)|最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读</p>\n<blockquote>\n<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>\n</blockquote>\n<h2 id=\"Spring提供的事务管理\"><a href=\"#Spring提供的事务管理\" class=\"headerlink\" title=\"Spring提供的事务管理\"></a>Spring提供的事务管理</h2><p>Spring并不直接管理事务，而是提供了多种事务管理器，将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现</p>\n<p>Spring事务管理涉及的接口的如下<br><img src=\"\\images\\spring\\1\\spring_transaction.jpg\" alt=\"image\"><br>图片来源于网络</p>\n<h3 id=\"PlatformTransactionManager接口\"><a href=\"#PlatformTransactionManager接口\" class=\"headerlink\" title=\"PlatformTransactionManager接口\"></a>PlatformTransactionManager接口</h3><h4 id=\"PlatformTransactionManager接口：\"><a href=\"#PlatformTransactionManager接口：\" class=\"headerlink\" title=\"PlatformTransactionManager接口：\"></a>PlatformTransactionManager接口：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.springframework.transaction;</div><div class=\"line\"></div><div class=\"line\">public interface PlatformTransactionManager &#123;</div><div class=\"line\"></div><div class=\"line\">//返回一个已经激活的事务或创建一个新的事务（根据给定的TransactionDefinition类型参数定义的事务属性）</div><div class=\"line\">TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;</div><div class=\"line\">//提交</div><div class=\"line\">void commit(TransactionStatus status) throws TransactionException;</div><div class=\"line\">//回滚</div><div class=\"line\">void rollback(TransactionStatus status) throws TransactionException;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"TransactionDefinition接口\"><a href=\"#TransactionDefinition接口\" class=\"headerlink\" title=\"TransactionDefinition接口\"></a>TransactionDefinition接口</h4><p>这个接口提供定义事务属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.springframework.transaction;</div><div class=\"line\"></div><div class=\"line\">import java.sql.Connection;</div><div class=\"line\">public interface TransactionDefinition &#123;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_REQUIRED = 0;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_SUPPORTS = 1;</div><div class=\"line\">\t</div><div class=\"line\">\tint PROPAGATION_MANDATORY = 2;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_REQUIRES_NEW = 3;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_NOT_SUPPORTED = 4;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_NEVER = 5;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_NESTED = 6;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_DEFAULT = -1;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_READ_UNCOMMITTED = Connection.TRANSACTION_READ_UNCOMMITTED;</div><div class=\"line\">\t</div><div class=\"line\">\tint ISOLATION_READ_COMMITTED = Connection.TRANSACTION_READ_COMMITTED;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_REPEATABLE_READ = Connection.TRANSACTION_REPEATABLE_READ;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_SERIALIZABLE = Connection.TRANSACTION_SERIALIZABLE;</div><div class=\"line\"></div><div class=\"line\">\tint TIMEOUT_DEFAULT = -1;</div><div class=\"line\">    //返回定义的事务传播行为</div><div class=\"line\">\tint getPropagationBehavior();</div><div class=\"line\">    //返回定义的事务隔离级别</div><div class=\"line\">\tint getIsolationLevel();</div><div class=\"line\">    //返回定义的事务超时时间</div><div class=\"line\">\tint getTimeout();</div><div class=\"line\">    //返回定义的事务是否是只读的</div><div class=\"line\">\tboolean isReadOnly();</div><div class=\"line\">    //返回定义的事务名字</div><div class=\"line\">\tString getName();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"TransactionStatus接口\"><a href=\"#TransactionStatus接口\" class=\"headerlink\" title=\"TransactionStatus接口\"></a>TransactionStatus接口</h4><p>这个接口提供简单的控制事务执行和查询事务状态的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.springframework.transaction;</div><div class=\"line\">import java.io.Flushable;</div><div class=\"line\">public interface TransactionStatus extends SavepointManager, Flushable &#123;</div><div class=\"line\">    //返回当前事务状态是否是新事务</div><div class=\"line\">\tboolean isNewTransaction();</div><div class=\"line\">    //返回当前事务是否有保存点</div><div class=\"line\">\tboolean hasSavepoint();</div><div class=\"line\">    //设置当前事务应该回滚</div><div class=\"line\">\tvoid setRollbackOnly();</div><div class=\"line\">    //回当前事务是否应该回滚</div><div class=\"line\">\tboolean isRollbackOnly();</div><div class=\"line\">    //用于刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，可能对如JDBC类型的事务无任何影响</div><div class=\"line\">\t@Override</div><div class=\"line\">\tvoid flush();</div><div class=\"line\">    //当前事务否已经完成</div><div class=\"line\">\tboolean isCompleted();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Spring内置事务管理器实现\"><a href=\"#Spring内置事务管理器实现\" class=\"headerlink\" title=\"Spring内置事务管理器实现\"></a>Spring内置事务管理器实现</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSourceTransactionManager</td>\n<td>位于org.springframework.jdbc.datasource包中，数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC抽象框架、iBATIS或MyBatis框架的事务管理</td>\n</tr>\n<tr>\n<td>JdoTransactionManager</td>\n<td>位于org.springframework.orm.jdo包中，提供对单个javax.jdo.PersistenceManagerFactory事务管理，用于集成JDO框架时的事务管理</td>\n</tr>\n<tr>\n<td>JpaTransactionManager</td>\n<td>位于org.springframework.orm.jpa包中，提供对单个javax.persistence.EntityManagerFactory事务支持，用于集成JPA实现框架时的事务管理</td>\n</tr>\n<tr>\n<td>HibernateTransactionManager</td>\n<td>于org.springframework.orm.hibernate3包中，提供对单个org.hibernate.SessionFactory事务支持，用于集成Hibernate框架时的事务管理</td>\n</tr>\n<tr>\n<td>JtaTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，提供对分布式事务管理的支持，并将事务管理委托给Java EE应用服务器事务管理器</td>\n</tr>\n<tr>\n<td>OC4JjtaTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，Spring提供的对OC4J10.1.3+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持</td>\n</tr>\n<tr>\n<td>WebSphereUowTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，Spring提供的对WebSphere 6.0+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持</td>\n</tr>\n<tr>\n<td>WebLogicJtaTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，Spring提供的对WebLogic 8.1+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Spring事务属性\"><a href=\"#Spring事务属性\" class=\"headerlink\" title=\"Spring事务属性\"></a>Spring事务属性</h3><p>事务管理器接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性</p>\n<h4 id=\"传播行为\"><a href=\"#传播行为\" class=\"headerlink\" title=\"传播行为\"></a>传播行为</h4><p>事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>\n<p>Spring定义了七种传播行为：</p>\n<table>\n<thead>\n<tr>\n<th>传播行为</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PROPAGATION_REQUIRED</td>\n<td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</td>\n</tr>\n<tr>\n<td>PROPAGATION_SUPPORTS</td>\n<td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td>\n</tr>\n<tr>\n<td>PROPAGATION_MANDATORY</td>\n<td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRED_NEW</td>\n<td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td>\n</tr>\n<tr>\n<td>PROPAGATION_NOT_SUPPORTED</td>\n<td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td>\n</tr>\n<tr>\n<td>PROPAGATION_NEVER</td>\n<td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NESTED</td>\n<td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"隔离级别-1\"><a href=\"#隔离级别-1\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4><p>隔离级别定义了一个事务可能受其他并发事务影响的程度</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ISOLATION_DEFAULT</td>\n<td>默认隔离级别，即使用底层数据库默认的隔离级别</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_UNCOMMITTED</td>\n<td>未提交读；</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_COMMITTED</td>\n<td>提交读，一般情况下我们使用这个</td>\n</tr>\n<tr>\n<td>ISOLATION_REPEATABLE_READ</td>\n<td>可重复读</td>\n</tr>\n<tr>\n<td>ISOLATION_SERIALIZABLE</td>\n<td>序列化</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Spring事务测试\"><a href=\"#Spring事务测试\" class=\"headerlink\" title=\"Spring事务测试\"></a>Spring事务测试</h2><blockquote>\n<p>Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦。<br>简单地说，编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以既能起到事务管理的作用，又可以不影响业务代码的具体实现。</p>\n</blockquote>\n<h3 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h3><p>Spring提供两种方式的编程式事务管理，分别是：</p>\n<p>1.使用PlatformTransactionManager</p>\n<p>2.使用TransactionTemplate</p>\n<blockquote>\n<p>TransactionTemplate模板类用于简化事务管理，事务管理由模板类定义，而具体操作需要通过TransactionCallback回调接口或TransactionCallbackWithoutResult回调接口指定，通过调用模板类的参数类型为TransactionCallback或TransactionCallbackWithoutResult的execute方法来自动享受事务管理，TransactionTemplate是线程安全的。</p>\n</blockquote>\n<h4 id=\"使用PlatformTransactionManager\"><a href=\"#使用PlatformTransactionManager\" class=\"headerlink\" title=\"使用PlatformTransactionManager\"></a>使用PlatformTransactionManager</h4><h5 id=\"xml配置\"><a href=\"#xml配置\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC --&gt;</div><div class=\"line\"> &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    </div><div class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testPlatformTransactionManager()&#123;</div><div class=\"line\"> \tPlatformTransactionManager ptm = ac.getBean(&quot;transactionManager&quot;,PlatformTransactionManager.class);</div><div class=\"line\"> \tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\"> \t//定义事务属性</div><div class=\"line\"> \tDefaultTransactionDefinition dtd = new DefaultTransactionDefinition();</div><div class=\"line\"> \t//设置隔离级别</div><div class=\"line\"> \tdtd.setIsolationLevel(DefaultTransactionDefinition.ISOLATION_DEFAULT);</div><div class=\"line\">\t//设置传播行为</div><div class=\"line\"> \tdtd.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED);</div><div class=\"line\"> \t//获取事务状态</div><div class=\"line\"> \tTransactionStatus ts = ptm.getTransaction(dtd);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser;</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\t//业务逻辑的处理</div><div class=\"line\">\t\tqueryUser = userDaoImpl.queryUser();</div><div class=\"line\">\t\tSystem.out.println(&quot;testMapperFactoryBean:&quot;+queryUser.toString());</div><div class=\"line\">\t\t//提交</div><div class=\"line\">\t\tptm.commit(ts);</div><div class=\"line\">\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t//回滚</div><div class=\"line\">\t\tptm.rollback(ts);</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用TransactionTemplate\"><a href=\"#使用TransactionTemplate\" class=\"headerlink\" title=\"使用TransactionTemplate\"></a>使用TransactionTemplate</h4><h5 id=\"xml配置-1\"><a href=\"#xml配置-1\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC --&gt;</div><div class=\"line\"> &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    </div><div class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </div><div class=\"line\">&lt;/bean&gt; </div><div class=\"line\"></div><div class=\"line\">&lt;!-- 使用TransactionTemplate --&gt;</div><div class=\"line\">&lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</div><div class=\"line\">\t&lt;!-- 设置transactionManager --&gt;</div><div class=\"line\">\t&lt;constructor-arg name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testTransactionTemplate()&#123;</div><div class=\"line\">\tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\tTransactionTemplate tt = ac.getBean(&quot;transactionTemplate&quot;,TransactionTemplate.class);</div><div class=\"line\">\t\t\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = tt.execute(new TransactionCallback&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t@Override</div><div class=\"line\">\t\tpublic List&lt;Map&lt;String, Object&gt;&gt; doInTransaction(TransactionStatus status) &#123;</div><div class=\"line\">\t\t\t//业务逻辑的处理</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\treturn userDaoImpl.queryUser();</div><div class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t//异常回滚</div><div class=\"line\">\t\t\t\tstatus.setRollbackOnly();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\treturn null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tSystem.out.println(&quot;testTransactionTemplate:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h3><blockquote>\n<p>声明式事务支持，使用该方式后最大的获益是简单，事务管理不再是令人痛苦的，而且此方式属于无侵入式，对业务逻辑实现无影响。</p>\n</blockquote>\n<h4 id=\"xml配置-2\"><a href=\"#xml配置-2\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC --&gt;</div><div class=\"line\">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    </div><div class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </div><div class=\"line\">&lt;/bean&gt; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;!-- ****************************声明式事务***************************************** --&gt;</div><div class=\"line\">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class=\"line\">\t&lt;tx:attributes&gt;</div><div class=\"line\">\t\t&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot;/&gt;</div><div class=\"line\">\t\t&lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; read-only=&quot;true&quot;/&gt;</div><div class=\"line\">\t&lt;/tx:attributes&gt;</div><div class=\"line\">&lt;/tx:advice&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;aop:config proxy-target-class=&quot;true&quot;&gt;</div><div class=\"line\">\t&lt;aop:pointcut expression=&quot;execution(* com.szl.springorm.service.impl.*.*(..))&quot; id=&quot;txPointcut&quot;/&gt;</div><div class=\"line\">\t&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot;/&gt;</div><div class=\"line\">&lt;/aop:config&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试代码-2\"><a href=\"#测试代码-2\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 声明式事务测试</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testTransaction()&#123;</div><div class=\"line\">\tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testPlatformTransactionManager:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"声明式事务XML配置详解\"><a href=\"#声明式事务XML配置详解\" class=\"headerlink\" title=\"声明式事务XML配置详解\"></a>声明式事务XML配置详解</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;tx:advice</code></td>\n<td>事务通知定义，用于指定事务属性，其中<code>transaction-manager</code>属性指定事务管理器，并通过<code>&lt;tx:attributes &gt;</code>指定具体需要拦截的方法</td>\n</tr>\n<tr>\n<td><code>&lt;tx:method name=&quot;update*&quot;&gt;</code></td>\n<td>表示将拦截以update开头的方法，被拦截的方法将应用配置的事务属性：propagation=”REQUIRED”表示传播行为是Required，isolation=”DEFAULT”表示隔离级别依赖底层事务系统</td>\n</tr>\n<tr>\n<td><code>&lt;tx:method name=&quot;*&quot;&gt;</code></td>\n<td>表示将拦截其他所有方法，被拦截的方法将应用配置的事务属性：propagation=”REQUIRED”表示传播行为是Required，isolation=”DEFAULT”表示隔离级别依赖底层事务系统，read-only=”true”表示事务只读</td>\n</tr>\n<tr>\n<td><code>&lt;aop:config&gt;</code></td>\n<td>AOP相关配置</td>\n</tr>\n<tr>\n<td><code>&lt;aop:pointcut/&gt;</code></td>\n<td>切入点定义，定义名为”serviceMethod”的aspectj切入点，切入点表达式为<code>execution(* com.szl.springorm.service.impl.*.*(..))</code>表示拦截impl包及子包下的任何类的任何方法</td>\n</tr>\n<tr>\n<td><code>&lt;aop:advisor&gt;</code></td>\n<td>Advisor定义，其中切入点为txPointcut，通知为txAdvice</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Transactional实现事务管理\"><a href=\"#Transactional实现事务管理\" class=\"headerlink\" title=\"@Transactional实现事务管理\"></a>@Transactional实现事务管理</h3><blockquote>\n<p>对声明式事务管理，Spring提供基于@Transactional注解方式来实现，但需要Java 5+。<br> 注解方式是最简单的事务配置方式，可以直接在Java源代码中声明事务属性，且对于每一个业务类或方法如果需要事务都必须使用此注解。</p>\n</blockquote>\n<h4 id=\"XML配置\"><a href=\"#XML配置\" class=\"headerlink\" title=\"XML配置\"></a>XML配置</h4><p>配置支持声明式事务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"业务代码\"><a href=\"#业务代码\" class=\"headerlink\" title=\"业务代码\"></a>业务代码</h4><p>业务逻辑层代码，我们在方法上使用<code>@Transactional</code>注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Transactional</div><div class=\"line\">@Override</div><div class=\"line\">public List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\treturn userDao1.queryUser();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试代码-3\"><a href=\"#测试代码-3\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 声明式事务测试_注解</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testTransactionAnnotation()&#123;</div><div class=\"line\">\tcom.szl.springtransaction.service.impl.UserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl1&quot;,com.szl.springtransaction.service.impl.UserServiceImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testTransactionAnnotation:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Transactional配置介绍\"><a href=\"#Transactional配置介绍\" class=\"headerlink\" title=\"@Transactional配置介绍\"></a>@Transactional配置介绍</h4><p>Spring提供的<code>&lt;tx:annotation-driven/&gt;</code>用于开启对注解事务管理的支持，从而能识别Bean类上的@Transactional注解元数据，其具有以下属性：</p>\n<ul>\n<li>transaction-manager：指定事务管理器名字，默认为transactionManager，当使用其他名字时需要明确指定</li>\n<li>proxy-target-class：表示将使用的代码机制，默认false表示使用JDK代理，如果为true将使用CGLIB代理</li>\n<li>order：定义事务通知顺序，默认Ordered.LOWEST_PRECEDENCE，表示将顺序决定权交给AOP来处理。</li>\n</ul>\n<p>Spring使用<code>@Transaction</code>来指定事务属性，可以在接口、类或方法上指定，如果类和方法上都指定了<code>@Transaction</code>，则方法上的事务属性被优先使用，具体属性如下：</p>\n<ul>\n<li>value：指定事务管理器名字，默认使用<code>&lt;tx:annotation-driven/&gt;</code>指定的事务管理器，用于支持多事务管理器环境</li>\n<li>propagation：指定事务传播行为，默认为Required，使用Propagation.REQUIRED指定</li>\n<li>isolation：指定事务隔离级别，默认为“DEFAULT”，使用Isolation.DEFAULT指定</li>\n<li>readOnly：指定事务是否只读，默认false表示事务非只读</li>\n<li>timeout：指定事务超时时间，以秒为单位，默认-1表示事务超时将依赖于底层事务系统</li>\n<li>rollbackFor：指定一组异常类，遇到该类异常将回滚事务</li>\n<li>rollbackForClassname：指定一组异常类名字，其含义与<code>&lt;tx:method&gt;</code>中的rollback-for属性语义完全一样</li>\n<li>noRollbackFor：指定一组异常类，即使遇到该类异常也将提交事务，即不回滚事务</li>\n<li>noRollbackForClassname：指定一组异常类名字，其含义与<code>&lt;tx:method&gt;</code>中的no-rollback-for属性语义完全一样</li>\n</ul>\n<h4 id=\"Transactional注意事项\"><a href=\"#Transactional注意事项\" class=\"headerlink\" title=\"@Transactional注意事项\"></a>@Transactional注意事项</h4><ul>\n<li>如果在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为方法&gt;实现类&gt;接口</li>\n<li>默认只对RuntimeException异常回滚</li>\n<li>在使用Spring代理时，默认只有在public可见度的方法的@Transactional 注解才是有效的，其它可见度（protected、private、包可见）的方法上即使有@Transactional 注解也不会应用这些事务属性的，Spring也不会报错，如果你非要使用非公共方法注解事务管理的话，可考虑使用AspectJ</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据库事务概念\"><a href=\"#数据库事务概念\" class=\"headerlink\" title=\"数据库事务概念\"></a>数据库事务概念</h2><blockquote>\n<p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</p>\n</blockquote>\n<h3 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原子性(Atomicity)</td>\n<td>事务必须是原子工作单元。对于其数据修改，要么全都执行，要么全都不执行</td>\n</tr>\n<tr>\n<td>一致性(Consistency)</td>\n<td>事务在完成时，必须使所有的数据都保持一致状态</td>\n</tr>\n<tr>\n<td>隔离性(Isolation)</td>\n<td>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离，这需要事务隔离级别来指定隔离性</td>\n</tr>\n<tr>\n<td>持久性(Durability)</td>\n<td>事务完成之后，它对于系统的影响是永久性的</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><p>在数据库操作中，为了有效保证并发读取数据的正确性，提出的事务隔离级别。<br>名称|解释<br>—|—<br>未提交读(Read Uncommitted)|最低隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读<br>提交读(Read Committed)|一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据，不可能出现丢失更新、脏读，但可能出现不可重复读、幻读<br>可重复读(Repeatable Read)|保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响，不可能出现丢失更新、脏读、不可重复读，但可能出现幻读<br>序列化(Serializable)|最高隔离级别，不允许事务并发执行，而必须串行化执行，最安全，不可能出现更新、脏读、不可重复读、幻读</p>\n<blockquote>\n<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p>\n</blockquote>\n<h2 id=\"Spring提供的事务管理\"><a href=\"#Spring提供的事务管理\" class=\"headerlink\" title=\"Spring提供的事务管理\"></a>Spring提供的事务管理</h2><p>Spring并不直接管理事务，而是提供了多种事务管理器，将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现</p>\n<p>Spring事务管理涉及的接口的如下<br><img src=\"\\images\\spring\\1\\spring_transaction.jpg\" alt=\"image\"><br>图片来源于网络</p>\n<h3 id=\"PlatformTransactionManager接口\"><a href=\"#PlatformTransactionManager接口\" class=\"headerlink\" title=\"PlatformTransactionManager接口\"></a>PlatformTransactionManager接口</h3><h4 id=\"PlatformTransactionManager接口：\"><a href=\"#PlatformTransactionManager接口：\" class=\"headerlink\" title=\"PlatformTransactionManager接口：\"></a>PlatformTransactionManager接口：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.springframework.transaction;</div><div class=\"line\"></div><div class=\"line\">public interface PlatformTransactionManager &#123;</div><div class=\"line\"></div><div class=\"line\">//返回一个已经激活的事务或创建一个新的事务（根据给定的TransactionDefinition类型参数定义的事务属性）</div><div class=\"line\">TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;</div><div class=\"line\">//提交</div><div class=\"line\">void commit(TransactionStatus status) throws TransactionException;</div><div class=\"line\">//回滚</div><div class=\"line\">void rollback(TransactionStatus status) throws TransactionException;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"TransactionDefinition接口\"><a href=\"#TransactionDefinition接口\" class=\"headerlink\" title=\"TransactionDefinition接口\"></a>TransactionDefinition接口</h4><p>这个接口提供定义事务属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.springframework.transaction;</div><div class=\"line\"></div><div class=\"line\">import java.sql.Connection;</div><div class=\"line\">public interface TransactionDefinition &#123;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_REQUIRED = 0;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_SUPPORTS = 1;</div><div class=\"line\">\t</div><div class=\"line\">\tint PROPAGATION_MANDATORY = 2;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_REQUIRES_NEW = 3;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_NOT_SUPPORTED = 4;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_NEVER = 5;</div><div class=\"line\"></div><div class=\"line\">\tint PROPAGATION_NESTED = 6;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_DEFAULT = -1;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_READ_UNCOMMITTED = Connection.TRANSACTION_READ_UNCOMMITTED;</div><div class=\"line\">\t</div><div class=\"line\">\tint ISOLATION_READ_COMMITTED = Connection.TRANSACTION_READ_COMMITTED;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_REPEATABLE_READ = Connection.TRANSACTION_REPEATABLE_READ;</div><div class=\"line\"></div><div class=\"line\">\tint ISOLATION_SERIALIZABLE = Connection.TRANSACTION_SERIALIZABLE;</div><div class=\"line\"></div><div class=\"line\">\tint TIMEOUT_DEFAULT = -1;</div><div class=\"line\">    //返回定义的事务传播行为</div><div class=\"line\">\tint getPropagationBehavior();</div><div class=\"line\">    //返回定义的事务隔离级别</div><div class=\"line\">\tint getIsolationLevel();</div><div class=\"line\">    //返回定义的事务超时时间</div><div class=\"line\">\tint getTimeout();</div><div class=\"line\">    //返回定义的事务是否是只读的</div><div class=\"line\">\tboolean isReadOnly();</div><div class=\"line\">    //返回定义的事务名字</div><div class=\"line\">\tString getName();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"TransactionStatus接口\"><a href=\"#TransactionStatus接口\" class=\"headerlink\" title=\"TransactionStatus接口\"></a>TransactionStatus接口</h4><p>这个接口提供简单的控制事务执行和查询事务状态的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package org.springframework.transaction;</div><div class=\"line\">import java.io.Flushable;</div><div class=\"line\">public interface TransactionStatus extends SavepointManager, Flushable &#123;</div><div class=\"line\">    //返回当前事务状态是否是新事务</div><div class=\"line\">\tboolean isNewTransaction();</div><div class=\"line\">    //返回当前事务是否有保存点</div><div class=\"line\">\tboolean hasSavepoint();</div><div class=\"line\">    //设置当前事务应该回滚</div><div class=\"line\">\tvoid setRollbackOnly();</div><div class=\"line\">    //回当前事务是否应该回滚</div><div class=\"line\">\tboolean isRollbackOnly();</div><div class=\"line\">    //用于刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，可能对如JDBC类型的事务无任何影响</div><div class=\"line\">\t@Override</div><div class=\"line\">\tvoid flush();</div><div class=\"line\">    //当前事务否已经完成</div><div class=\"line\">\tboolean isCompleted();</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Spring内置事务管理器实现\"><a href=\"#Spring内置事务管理器实现\" class=\"headerlink\" title=\"Spring内置事务管理器实现\"></a>Spring内置事务管理器实现</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSourceTransactionManager</td>\n<td>位于org.springframework.jdbc.datasource包中，数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC抽象框架、iBATIS或MyBatis框架的事务管理</td>\n</tr>\n<tr>\n<td>JdoTransactionManager</td>\n<td>位于org.springframework.orm.jdo包中，提供对单个javax.jdo.PersistenceManagerFactory事务管理，用于集成JDO框架时的事务管理</td>\n</tr>\n<tr>\n<td>JpaTransactionManager</td>\n<td>位于org.springframework.orm.jpa包中，提供对单个javax.persistence.EntityManagerFactory事务支持，用于集成JPA实现框架时的事务管理</td>\n</tr>\n<tr>\n<td>HibernateTransactionManager</td>\n<td>于org.springframework.orm.hibernate3包中，提供对单个org.hibernate.SessionFactory事务支持，用于集成Hibernate框架时的事务管理</td>\n</tr>\n<tr>\n<td>JtaTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，提供对分布式事务管理的支持，并将事务管理委托给Java EE应用服务器事务管理器</td>\n</tr>\n<tr>\n<td>OC4JjtaTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，Spring提供的对OC4J10.1.3+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持</td>\n</tr>\n<tr>\n<td>WebSphereUowTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，Spring提供的对WebSphere 6.0+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持</td>\n</tr>\n<tr>\n<td>WebLogicJtaTransactionManager</td>\n<td>位于org.springframework.transaction.jta包中，Spring提供的对WebLogic 8.1+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Spring事务属性\"><a href=\"#Spring事务属性\" class=\"headerlink\" title=\"Spring事务属性\"></a>Spring事务属性</h3><p>事务管理器接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到事务，这个方法里面的参数是TransactionDefinition类，这个类就定义了一些基本的事务属性</p>\n<h4 id=\"传播行为\"><a href=\"#传播行为\" class=\"headerlink\" title=\"传播行为\"></a>传播行为</h4><p>事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>\n<p>Spring定义了七种传播行为：</p>\n<table>\n<thead>\n<tr>\n<th>传播行为</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PROPAGATION_REQUIRED</td>\n<td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</td>\n</tr>\n<tr>\n<td>PROPAGATION_SUPPORTS</td>\n<td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td>\n</tr>\n<tr>\n<td>PROPAGATION_MANDATORY</td>\n<td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRED_NEW</td>\n<td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td>\n</tr>\n<tr>\n<td>PROPAGATION_NOT_SUPPORTED</td>\n<td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td>\n</tr>\n<tr>\n<td>PROPAGATION_NEVER</td>\n<td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NESTED</td>\n<td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"隔离级别-1\"><a href=\"#隔离级别-1\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4><p>隔离级别定义了一个事务可能受其他并发事务影响的程度</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ISOLATION_DEFAULT</td>\n<td>默认隔离级别，即使用底层数据库默认的隔离级别</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_UNCOMMITTED</td>\n<td>未提交读；</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_COMMITTED</td>\n<td>提交读，一般情况下我们使用这个</td>\n</tr>\n<tr>\n<td>ISOLATION_REPEATABLE_READ</td>\n<td>可重复读</td>\n</tr>\n<tr>\n<td>ISOLATION_SERIALIZABLE</td>\n<td>序列化</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Spring事务测试\"><a href=\"#Spring事务测试\" class=\"headerlink\" title=\"Spring事务测试\"></a>Spring事务测试</h2><blockquote>\n<p>Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦。<br>简单地说，编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以既能起到事务管理的作用，又可以不影响业务代码的具体实现。</p>\n</blockquote>\n<h3 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h3><p>Spring提供两种方式的编程式事务管理，分别是：</p>\n<p>1.使用PlatformTransactionManager</p>\n<p>2.使用TransactionTemplate</p>\n<blockquote>\n<p>TransactionTemplate模板类用于简化事务管理，事务管理由模板类定义，而具体操作需要通过TransactionCallback回调接口或TransactionCallbackWithoutResult回调接口指定，通过调用模板类的参数类型为TransactionCallback或TransactionCallbackWithoutResult的execute方法来自动享受事务管理，TransactionTemplate是线程安全的。</p>\n</blockquote>\n<h4 id=\"使用PlatformTransactionManager\"><a href=\"#使用PlatformTransactionManager\" class=\"headerlink\" title=\"使用PlatformTransactionManager\"></a>使用PlatformTransactionManager</h4><h5 id=\"xml配置\"><a href=\"#xml配置\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC --&gt;</div><div class=\"line\"> &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    </div><div class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testPlatformTransactionManager()&#123;</div><div class=\"line\"> \tPlatformTransactionManager ptm = ac.getBean(&quot;transactionManager&quot;,PlatformTransactionManager.class);</div><div class=\"line\"> \tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\"> \t//定义事务属性</div><div class=\"line\"> \tDefaultTransactionDefinition dtd = new DefaultTransactionDefinition();</div><div class=\"line\"> \t//设置隔离级别</div><div class=\"line\"> \tdtd.setIsolationLevel(DefaultTransactionDefinition.ISOLATION_DEFAULT);</div><div class=\"line\">\t//设置传播行为</div><div class=\"line\"> \tdtd.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED);</div><div class=\"line\"> \t//获取事务状态</div><div class=\"line\"> \tTransactionStatus ts = ptm.getTransaction(dtd);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser;</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\t//业务逻辑的处理</div><div class=\"line\">\t\tqueryUser = userDaoImpl.queryUser();</div><div class=\"line\">\t\tSystem.out.println(&quot;testMapperFactoryBean:&quot;+queryUser.toString());</div><div class=\"line\">\t\t//提交</div><div class=\"line\">\t\tptm.commit(ts);</div><div class=\"line\">\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t//回滚</div><div class=\"line\">\t\tptm.rollback(ts);</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用TransactionTemplate\"><a href=\"#使用TransactionTemplate\" class=\"headerlink\" title=\"使用TransactionTemplate\"></a>使用TransactionTemplate</h4><h5 id=\"xml配置-1\"><a href=\"#xml配置-1\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC --&gt;</div><div class=\"line\"> &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    </div><div class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </div><div class=\"line\">&lt;/bean&gt; </div><div class=\"line\"></div><div class=\"line\">&lt;!-- 使用TransactionTemplate --&gt;</div><div class=\"line\">&lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</div><div class=\"line\">\t&lt;!-- 设置transactionManager --&gt;</div><div class=\"line\">\t&lt;constructor-arg name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testTransactionTemplate()&#123;</div><div class=\"line\">\tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\tTransactionTemplate tt = ac.getBean(&quot;transactionTemplate&quot;,TransactionTemplate.class);</div><div class=\"line\">\t\t\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = tt.execute(new TransactionCallback&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t@Override</div><div class=\"line\">\t\tpublic List&lt;Map&lt;String, Object&gt;&gt; doInTransaction(TransactionStatus status) &#123;</div><div class=\"line\">\t\t\t//业务逻辑的处理</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\treturn userDaoImpl.queryUser();</div><div class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t//异常回滚</div><div class=\"line\">\t\t\t\tstatus.setRollbackOnly();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\treturn null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tSystem.out.println(&quot;testTransactionTemplate:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h3><blockquote>\n<p>声明式事务支持，使用该方式后最大的获益是简单，事务管理不再是令人痛苦的，而且此方式属于无侵入式，对业务逻辑实现无影响。</p>\n</blockquote>\n<h4 id=\"xml配置-2\"><a href=\"#xml配置-2\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 定义一个某个框架平台的TransactionManager,此处使用JDBC --&gt;</div><div class=\"line\">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    </div><div class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;  </div><div class=\"line\">&lt;/bean&gt; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;!-- ****************************声明式事务***************************************** --&gt;</div><div class=\"line\">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</div><div class=\"line\">\t&lt;tx:attributes&gt;</div><div class=\"line\">\t\t&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot;/&gt;</div><div class=\"line\">\t\t&lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; read-only=&quot;true&quot;/&gt;</div><div class=\"line\">\t&lt;/tx:attributes&gt;</div><div class=\"line\">&lt;/tx:advice&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;aop:config proxy-target-class=&quot;true&quot;&gt;</div><div class=\"line\">\t&lt;aop:pointcut expression=&quot;execution(* com.szl.springorm.service.impl.*.*(..))&quot; id=&quot;txPointcut&quot;/&gt;</div><div class=\"line\">\t&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot;/&gt;</div><div class=\"line\">&lt;/aop:config&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试代码-2\"><a href=\"#测试代码-2\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 声明式事务测试</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testTransaction()&#123;</div><div class=\"line\">\tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testPlatformTransactionManager:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"声明式事务XML配置详解\"><a href=\"#声明式事务XML配置详解\" class=\"headerlink\" title=\"声明式事务XML配置详解\"></a>声明式事务XML配置详解</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;tx:advice</code></td>\n<td>事务通知定义，用于指定事务属性，其中<code>transaction-manager</code>属性指定事务管理器，并通过<code>&lt;tx:attributes &gt;</code>指定具体需要拦截的方法</td>\n</tr>\n<tr>\n<td><code>&lt;tx:method name=&quot;update*&quot;&gt;</code></td>\n<td>表示将拦截以update开头的方法，被拦截的方法将应用配置的事务属性：propagation=”REQUIRED”表示传播行为是Required，isolation=”DEFAULT”表示隔离级别依赖底层事务系统</td>\n</tr>\n<tr>\n<td><code>&lt;tx:method name=&quot;*&quot;&gt;</code></td>\n<td>表示将拦截其他所有方法，被拦截的方法将应用配置的事务属性：propagation=”REQUIRED”表示传播行为是Required，isolation=”DEFAULT”表示隔离级别依赖底层事务系统，read-only=”true”表示事务只读</td>\n</tr>\n<tr>\n<td><code>&lt;aop:config&gt;</code></td>\n<td>AOP相关配置</td>\n</tr>\n<tr>\n<td><code>&lt;aop:pointcut/&gt;</code></td>\n<td>切入点定义，定义名为”serviceMethod”的aspectj切入点，切入点表达式为<code>execution(* com.szl.springorm.service.impl.*.*(..))</code>表示拦截impl包及子包下的任何类的任何方法</td>\n</tr>\n<tr>\n<td><code>&lt;aop:advisor&gt;</code></td>\n<td>Advisor定义，其中切入点为txPointcut，通知为txAdvice</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Transactional实现事务管理\"><a href=\"#Transactional实现事务管理\" class=\"headerlink\" title=\"@Transactional实现事务管理\"></a>@Transactional实现事务管理</h3><blockquote>\n<p>对声明式事务管理，Spring提供基于@Transactional注解方式来实现，但需要Java 5+。<br> 注解方式是最简单的事务配置方式，可以直接在Java源代码中声明事务属性，且对于每一个业务类或方法如果需要事务都必须使用此注解。</p>\n</blockquote>\n<h4 id=\"XML配置\"><a href=\"#XML配置\" class=\"headerlink\" title=\"XML配置\"></a>XML配置</h4><p>配置支持声明式事务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"业务代码\"><a href=\"#业务代码\" class=\"headerlink\" title=\"业务代码\"></a>业务代码</h4><p>业务逻辑层代码，我们在方法上使用<code>@Transactional</code>注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Transactional</div><div class=\"line\">@Override</div><div class=\"line\">public List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\treturn userDao1.queryUser();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试代码-3\"><a href=\"#测试代码-3\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 声明式事务测试_注解</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testTransactionAnnotation()&#123;</div><div class=\"line\">\tcom.szl.springtransaction.service.impl.UserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl1&quot;,com.szl.springtransaction.service.impl.UserServiceImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testTransactionAnnotation:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Transactional配置介绍\"><a href=\"#Transactional配置介绍\" class=\"headerlink\" title=\"@Transactional配置介绍\"></a>@Transactional配置介绍</h4><p>Spring提供的<code>&lt;tx:annotation-driven/&gt;</code>用于开启对注解事务管理的支持，从而能识别Bean类上的@Transactional注解元数据，其具有以下属性：</p>\n<ul>\n<li>transaction-manager：指定事务管理器名字，默认为transactionManager，当使用其他名字时需要明确指定</li>\n<li>proxy-target-class：表示将使用的代码机制，默认false表示使用JDK代理，如果为true将使用CGLIB代理</li>\n<li>order：定义事务通知顺序，默认Ordered.LOWEST_PRECEDENCE，表示将顺序决定权交给AOP来处理。</li>\n</ul>\n<p>Spring使用<code>@Transaction</code>来指定事务属性，可以在接口、类或方法上指定，如果类和方法上都指定了<code>@Transaction</code>，则方法上的事务属性被优先使用，具体属性如下：</p>\n<ul>\n<li>value：指定事务管理器名字，默认使用<code>&lt;tx:annotation-driven/&gt;</code>指定的事务管理器，用于支持多事务管理器环境</li>\n<li>propagation：指定事务传播行为，默认为Required，使用Propagation.REQUIRED指定</li>\n<li>isolation：指定事务隔离级别，默认为“DEFAULT”，使用Isolation.DEFAULT指定</li>\n<li>readOnly：指定事务是否只读，默认false表示事务非只读</li>\n<li>timeout：指定事务超时时间，以秒为单位，默认-1表示事务超时将依赖于底层事务系统</li>\n<li>rollbackFor：指定一组异常类，遇到该类异常将回滚事务</li>\n<li>rollbackForClassname：指定一组异常类名字，其含义与<code>&lt;tx:method&gt;</code>中的rollback-for属性语义完全一样</li>\n<li>noRollbackFor：指定一组异常类，即使遇到该类异常也将提交事务，即不回滚事务</li>\n<li>noRollbackForClassname：指定一组异常类名字，其含义与<code>&lt;tx:method&gt;</code>中的no-rollback-for属性语义完全一样</li>\n</ul>\n<h4 id=\"Transactional注意事项\"><a href=\"#Transactional注意事项\" class=\"headerlink\" title=\"@Transactional注意事项\"></a>@Transactional注意事项</h4><ul>\n<li>如果在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为方法&gt;实现类&gt;接口</li>\n<li>默认只对RuntimeException异常回滚</li>\n<li>在使用Spring代理时，默认只有在public可见度的方法的@Transactional 注解才是有效的，其它可见度（protected、private、包可见）的方法上即使有@Transactional 注解也不会应用这些事务属性的，Spring也不会报错，如果你非要使用非公共方法注解事务管理的话，可考虑使用AspectJ</li>\n</ul>\n"},{"title":"第三篇之Spring DI","date":"2017-05-27T03:49:00.000Z","_content":"\n### Spring IoC容器注入依赖资源主要有以下两种基本实现方式\n- 构造器注入\n- setter注入\n\n我们在介绍注入之前，先建立一个User实体类，且生成无参、有参构造及setter，重写`toString()`方法以便输出信息。\n\n```\npackage com.szl.springioc.model;\n\npublic class User {\n\t\n\tprivate String name;\n\tprivate int age;\n\tprivate String email;\n\n\t/**\n\t * 无参构造(当我们生成有参构造时，默认的无参构造要自行添加)\n\t */\n\tpublic User() {\n\t\tsuper();\n\t}\n\t\n\t/**\n\t * 有参构造\n\t * @param name\n\t * @param age\n\t * @param email\n\t */\n\tpublic User(String name, int age, String email) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.email = email;\n\t}\n\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User [name=\" + name + \", age=\" + age + \", email=\" + email + \"]\";\n\t}\n}\n\n```\n\n#### 构造器注入\n##### 无参构造\n- xml配置\n\n```\n<bean id=\"user\" class=\"com.szl.springioc.model.User\" />\n\n```\n- test\n\n```\n@Test\npublic void testDI() {\n\tUser user = ac.getBean(\"user\",User.class);\n\tSystem.out.println(user.toString());\n}\n\n```\n- 输出\n\n```\nUser [name=null, age=0, email=null]\n\n```\n- 结论\nxml文件中的配置相当于我们代码中写`User user = new User();`。\n\n- 注意\n当我们在类中自己生成有参构造时，默认的无参构造要自行添加。\n\n##### 有参构造\n- xml配置\n\n```\n<!-- 有参构造 -->\n<bean id=\"user1\" class=\"com.szl.springioc.model.User\">\n\t<constructor-arg value=\"张三\"></constructor-arg>\n\t<constructor-arg value=\"18\"></constructor-arg>\n\t<constructor-arg value=\"zhangsan@qq.com\"></constructor-arg>\n</bean>\n\n```\n- test\n\n```\n\n@Test\npublic void testDI() {\n\t//测试有参构造注入\n\tUser user1 = ac.getBean(\"user1\",User.class);\n\tSystem.out.println(user1.toString());\n\n}\n\n```\n\n- 输出\n\n```\nUser [name=张三, age=18, email=zhangsan@qq.com]\n```\n- 结论\nxml文件中的配置相当于我们代码中写`User user = new User(\"张三\",\"18\",\"zhangsan@qq.com\");`。\n\n- 注意\n参数的类型和数量必须一致，`constructor-arg`标签属性中可以使用index指定参数的位置、使用type指定参数的类型及使用name指定参数的名称。\n\n#### setter注入\n- xml配置\n\n```\n<!-- setter注入 -->\n<bean id=\"user2\" class=\"com.szl.springioc.model.User\">\n\t<property name=\"name\" value=\"李四\"></property>\n</bean>\n```\n- test\n\n```\n@Test\npublic void testDI() {\n\t//测试setter注入\n\tUser user2 = ac.getBean(\"user2\",User.class);\n\tSystem.out.println(user2.toString());\n\n}\n\n```\n- 输出\n\n```\nUser [name=李四, age=0, email=null]\n\n```\n- 结论\n\nxml文件中的配置相当于我们代码中写`User user = new User(); user.setName(\"李四\")`。\n- 注意\n\nsetter注入的方法名要遵循“JavaBean getter/setter 方法命名约定”，`<property>`标签中name表示类中setter的名字，value表示要注入的参数值。\n\n### 其他注入测试\n\n我们建下面的一个实体类，我们来测试setter注入boolean，List,Map和Set类型。\n```\npackage com.szl.springioc.model;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Collections {\n\t\n\tprivate boolean flag;\n\t\n\tprivate Map<String, Object> mapParams;\n\t\n\tprivate List<String> listParmas;\n\t\n\tprivate Set<String> setParams;\n\n\tpublic boolean isFlag() {\n\t\treturn flag;\n\t}\n\n\tpublic void setFlag(boolean flag) {\n\t\tthis.flag = flag;\n\t}\n\n\tpublic Map<String, Object> getMapParams() {\n\t\treturn mapParams;\n\t}\n\n\tpublic void setMapParams(Map<String, Object> mapParams) {\n\t\tthis.mapParams = mapParams;\n\t}\n\n\tpublic List<String> getListParmas() {\n\t\treturn listParmas;\n\t}\n\n\tpublic void setListParmas(List<String> listParmas) {\n\t\tthis.listParmas = listParmas;\n\t}\n\n\tpublic Set<String> getSetParams() {\n\t\treturn setParams;\n\t}\n\n\tpublic void setSetParams(Set<String> setParams) {\n\t\tthis.setParams = setParams;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Collections [flag=\" + flag + \", mapParams=\" + mapParams + \", listParmas=\" + listParmas + \", setParams=\"\n\t\t\t\t+ setParams + \"]\";\n\t}\n\n}\n\n\n```\n#### 注入Boolean类型\n- xml配置\n\n```\n<!-- setter注入 boolean类型 -->\n<bean id=\"collectionsBoolean\" class=\"com.szl.springioc.model.Collections\">\n\t<property name=\"flag\" value=\"true\"></property>\n</bean>\n\n```\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n\t//测试setter注入\n\tCollections collectionsBoolean = ac.getBean(\"collectionsBoolean\",Collections.class);\n\tSystem.out.println(collectionsBoolean.toString());\n\t\n}\n\n```\n- 输出\n\n```\nCollections [flag=true, mapParams=null, listParmas=null, setParams=null]\n\n```\n\n- 结论\n\nsetter注入Boolean类型，`<property>`标签中的value值可以是以下几种来代表“真假”\n\nNO.|支持的参数值\n---|---\n1|true/false\n2|1/0\n3|on/off\n4|yes/no\n\n#### 注List类型\n- xml文件配置\n\n```\n<!-- setter注入 List类型 -->\n<bean id=\"collectionsList\" class=\"com.szl.springioc.model.Collections\">\n<property name=\"listParmas\">\n\t<list>\n\t\t<value>test</value>\n\t\t<value>test1</value>\n\t</list>\n</property>\n</bean>\n\n```\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n    //测试List注入\n    Collections collectionsList = ac.getBean(\"collectionsList\",Collections.class);\n    System.out.println(collectionsList.toString());\n\n}\n\n```\n- 输出\n\n```\nCollections [flag=false, mapParams=null, listParmas=[test, test1], setParams=null]\n```\n- 结论\n注入List需要使用`<list>`标签，该标签中有可选的value-type属性，用来指定数据类型，比如`value-type=java.lang.String`。\n\n\n#### 注Map类型\n- xml文件配置\n\n```\n<!-- setter注入 Map类型 -->\n<bean id=\"collectionsMap\" class=\"com.szl.springioc.model.Collections\">\n\t<property name=\"mapParams\">\n\t\t<map>\n\t\t\t<entry key=\"key1\" value=\"你好\"></entry>\n\t\t\t<entry key=\"key2\" value=\"世界\"></entry>\n\t\t</map>\n\t</property>\n</bean>\n\n```\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n\t//测试Map注入\n\tCollections collectionsMap = ac.getBean(\"collectionsMap\",Collections.class);\n\tSystem.out.println(collectionsMap.toString());\n\t\n}\n\n```\n- 输出\n\n```\nCollections [flag=false, mapParams={key1=你好, key2=世界}, listParmas=null, setParams=null]\n```\n- 结论\n\n注入List需要使用`<map>`标签，该标签中有可选的key-type、value-type属性，用来指定数据类型。\n\n#### 注入Set类型\n\n注入Set需要使用`<set>`标签，同注入List一样，该标签中有可选的value-type属性，用来指定数据类型。\n\n### p命名空间简化setter注入\n\n- xml文件配置\n\n```\n<!-- p命名空间 -->\n<bean id=\"collectionsP\" class=\"com.szl.springioc.model.Collections\" \n\tp:flag=\"1\"\n/>\n\n```\n\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n\tCollections collectionsP = ac.getBean(\"collectionsP\",Collections.class);\n\tSystem.out.println(collectionsP.toString());\n\t\n}\n```\n\n- 输出\n\n```\nCollections [flag=true, mapParams=null, listParmas=null, setParams=null]\n```\n- 结论\n\n`p:flag=\"1\"`等价于`<property name=\"flag\" value=\"true\"></property>`，可以混合使用哦。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程/spring/第三篇之Spring DI.md","raw":"---\ntitle: 第三篇之Spring DI\ndate: 2017-05-27 11:49\ncategories: Spring的那点事\ntags: Spring\n---\n\n### Spring IoC容器注入依赖资源主要有以下两种基本实现方式\n- 构造器注入\n- setter注入\n\n我们在介绍注入之前，先建立一个User实体类，且生成无参、有参构造及setter，重写`toString()`方法以便输出信息。\n\n```\npackage com.szl.springioc.model;\n\npublic class User {\n\t\n\tprivate String name;\n\tprivate int age;\n\tprivate String email;\n\n\t/**\n\t * 无参构造(当我们生成有参构造时，默认的无参构造要自行添加)\n\t */\n\tpublic User() {\n\t\tsuper();\n\t}\n\t\n\t/**\n\t * 有参构造\n\t * @param name\n\t * @param age\n\t * @param email\n\t */\n\tpublic User(String name, int age, String email) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.email = email;\n\t}\n\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\n\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User [name=\" + name + \", age=\" + age + \", email=\" + email + \"]\";\n\t}\n}\n\n```\n\n#### 构造器注入\n##### 无参构造\n- xml配置\n\n```\n<bean id=\"user\" class=\"com.szl.springioc.model.User\" />\n\n```\n- test\n\n```\n@Test\npublic void testDI() {\n\tUser user = ac.getBean(\"user\",User.class);\n\tSystem.out.println(user.toString());\n}\n\n```\n- 输出\n\n```\nUser [name=null, age=0, email=null]\n\n```\n- 结论\nxml文件中的配置相当于我们代码中写`User user = new User();`。\n\n- 注意\n当我们在类中自己生成有参构造时，默认的无参构造要自行添加。\n\n##### 有参构造\n- xml配置\n\n```\n<!-- 有参构造 -->\n<bean id=\"user1\" class=\"com.szl.springioc.model.User\">\n\t<constructor-arg value=\"张三\"></constructor-arg>\n\t<constructor-arg value=\"18\"></constructor-arg>\n\t<constructor-arg value=\"zhangsan@qq.com\"></constructor-arg>\n</bean>\n\n```\n- test\n\n```\n\n@Test\npublic void testDI() {\n\t//测试有参构造注入\n\tUser user1 = ac.getBean(\"user1\",User.class);\n\tSystem.out.println(user1.toString());\n\n}\n\n```\n\n- 输出\n\n```\nUser [name=张三, age=18, email=zhangsan@qq.com]\n```\n- 结论\nxml文件中的配置相当于我们代码中写`User user = new User(\"张三\",\"18\",\"zhangsan@qq.com\");`。\n\n- 注意\n参数的类型和数量必须一致，`constructor-arg`标签属性中可以使用index指定参数的位置、使用type指定参数的类型及使用name指定参数的名称。\n\n#### setter注入\n- xml配置\n\n```\n<!-- setter注入 -->\n<bean id=\"user2\" class=\"com.szl.springioc.model.User\">\n\t<property name=\"name\" value=\"李四\"></property>\n</bean>\n```\n- test\n\n```\n@Test\npublic void testDI() {\n\t//测试setter注入\n\tUser user2 = ac.getBean(\"user2\",User.class);\n\tSystem.out.println(user2.toString());\n\n}\n\n```\n- 输出\n\n```\nUser [name=李四, age=0, email=null]\n\n```\n- 结论\n\nxml文件中的配置相当于我们代码中写`User user = new User(); user.setName(\"李四\")`。\n- 注意\n\nsetter注入的方法名要遵循“JavaBean getter/setter 方法命名约定”，`<property>`标签中name表示类中setter的名字，value表示要注入的参数值。\n\n### 其他注入测试\n\n我们建下面的一个实体类，我们来测试setter注入boolean，List,Map和Set类型。\n```\npackage com.szl.springioc.model;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Collections {\n\t\n\tprivate boolean flag;\n\t\n\tprivate Map<String, Object> mapParams;\n\t\n\tprivate List<String> listParmas;\n\t\n\tprivate Set<String> setParams;\n\n\tpublic boolean isFlag() {\n\t\treturn flag;\n\t}\n\n\tpublic void setFlag(boolean flag) {\n\t\tthis.flag = flag;\n\t}\n\n\tpublic Map<String, Object> getMapParams() {\n\t\treturn mapParams;\n\t}\n\n\tpublic void setMapParams(Map<String, Object> mapParams) {\n\t\tthis.mapParams = mapParams;\n\t}\n\n\tpublic List<String> getListParmas() {\n\t\treturn listParmas;\n\t}\n\n\tpublic void setListParmas(List<String> listParmas) {\n\t\tthis.listParmas = listParmas;\n\t}\n\n\tpublic Set<String> getSetParams() {\n\t\treturn setParams;\n\t}\n\n\tpublic void setSetParams(Set<String> setParams) {\n\t\tthis.setParams = setParams;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Collections [flag=\" + flag + \", mapParams=\" + mapParams + \", listParmas=\" + listParmas + \", setParams=\"\n\t\t\t\t+ setParams + \"]\";\n\t}\n\n}\n\n\n```\n#### 注入Boolean类型\n- xml配置\n\n```\n<!-- setter注入 boolean类型 -->\n<bean id=\"collectionsBoolean\" class=\"com.szl.springioc.model.Collections\">\n\t<property name=\"flag\" value=\"true\"></property>\n</bean>\n\n```\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n\t//测试setter注入\n\tCollections collectionsBoolean = ac.getBean(\"collectionsBoolean\",Collections.class);\n\tSystem.out.println(collectionsBoolean.toString());\n\t\n}\n\n```\n- 输出\n\n```\nCollections [flag=true, mapParams=null, listParmas=null, setParams=null]\n\n```\n\n- 结论\n\nsetter注入Boolean类型，`<property>`标签中的value值可以是以下几种来代表“真假”\n\nNO.|支持的参数值\n---|---\n1|true/false\n2|1/0\n3|on/off\n4|yes/no\n\n#### 注List类型\n- xml文件配置\n\n```\n<!-- setter注入 List类型 -->\n<bean id=\"collectionsList\" class=\"com.szl.springioc.model.Collections\">\n<property name=\"listParmas\">\n\t<list>\n\t\t<value>test</value>\n\t\t<value>test1</value>\n\t</list>\n</property>\n</bean>\n\n```\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n    //测试List注入\n    Collections collectionsList = ac.getBean(\"collectionsList\",Collections.class);\n    System.out.println(collectionsList.toString());\n\n}\n\n```\n- 输出\n\n```\nCollections [flag=false, mapParams=null, listParmas=[test, test1], setParams=null]\n```\n- 结论\n注入List需要使用`<list>`标签，该标签中有可选的value-type属性，用来指定数据类型，比如`value-type=java.lang.String`。\n\n\n#### 注Map类型\n- xml文件配置\n\n```\n<!-- setter注入 Map类型 -->\n<bean id=\"collectionsMap\" class=\"com.szl.springioc.model.Collections\">\n\t<property name=\"mapParams\">\n\t\t<map>\n\t\t\t<entry key=\"key1\" value=\"你好\"></entry>\n\t\t\t<entry key=\"key2\" value=\"世界\"></entry>\n\t\t</map>\n\t</property>\n</bean>\n\n```\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n\t//测试Map注入\n\tCollections collectionsMap = ac.getBean(\"collectionsMap\",Collections.class);\n\tSystem.out.println(collectionsMap.toString());\n\t\n}\n\n```\n- 输出\n\n```\nCollections [flag=false, mapParams={key1=你好, key2=世界}, listParmas=null, setParams=null]\n```\n- 结论\n\n注入List需要使用`<map>`标签，该标签中有可选的key-type、value-type属性，用来指定数据类型。\n\n#### 注入Set类型\n\n注入Set需要使用`<set>`标签，同注入List一样，该标签中有可选的value-type属性，用来指定数据类型。\n\n### p命名空间简化setter注入\n\n- xml文件配置\n\n```\n<!-- p命名空间 -->\n<bean id=\"collectionsP\" class=\"com.szl.springioc.model.Collections\" \n\tp:flag=\"1\"\n/>\n\n```\n\n- test\n\n```\n@Test\npublic void testDIForCollections() {\n\tCollections collectionsP = ac.getBean(\"collectionsP\",Collections.class);\n\tSystem.out.println(collectionsP.toString());\n\t\n}\n```\n\n- 输出\n\n```\nCollections [flag=true, mapParams=null, listParmas=null, setParams=null]\n```\n- 结论\n\n`p:flag=\"1\"`等价于`<property name=\"flag\" value=\"true\"></property>`，可以混合使用哦。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"编程/spring/第三篇之Spring DI","published":1,"updated":"2017-05-27T08:43:50.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95ll000cpkqyg9nrh195","content":"<h3 id=\"Spring-IoC容器注入依赖资源主要有以下两种基本实现方式\"><a href=\"#Spring-IoC容器注入依赖资源主要有以下两种基本实现方式\" class=\"headerlink\" title=\"Spring IoC容器注入依赖资源主要有以下两种基本实现方式\"></a>Spring IoC容器注入依赖资源主要有以下两种基本实现方式</h3><ul>\n<li>构造器注入</li>\n<li>setter注入</li>\n</ul>\n<p>我们在介绍注入之前，先建立一个User实体类，且生成无参、有参构造及setter，重写<code>toString()</code>方法以便输出信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.model;</div><div class=\"line\"></div><div class=\"line\">public class User &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate String name;</div><div class=\"line\">\tprivate int age;</div><div class=\"line\">\tprivate String email;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 无参构造(当我们生成有参构造时，默认的无参构造要自行添加)</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic User() &#123;</div><div class=\"line\">\t\tsuper();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 有参构造</div><div class=\"line\">\t * @param name</div><div class=\"line\">\t * @param age</div><div class=\"line\">\t * @param email</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic User(String name, int age, String email) &#123;</div><div class=\"line\">\t\tsuper();</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t\tthis.age = age;</div><div class=\"line\">\t\tthis.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tpublic String getName() &#123;</div><div class=\"line\">\t\treturn name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void setName(String name) &#123;</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic int getAge() &#123;</div><div class=\"line\">\t\treturn age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void setAge(int age) &#123;</div><div class=\"line\">\t\tthis.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic String getEmail() &#123;</div><div class=\"line\">\t\treturn email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void setEmail(String email) &#123;</div><div class=\"line\">\t\tthis.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic String toString() &#123;</div><div class=\"line\">\t\treturn &quot;User [name=&quot; + name + &quot;, age=&quot; + age + &quot;, email=&quot; + email + &quot;]&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"构造器注入\"><a href=\"#构造器注入\" class=\"headerlink\" title=\"构造器注入\"></a>构造器注入</h4><h5 id=\"无参构造\"><a href=\"#无参构造\" class=\"headerlink\" title=\"无参构造\"></a>无参构造</h5><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;user&quot; class=&quot;com.szl.springioc.model.User&quot; /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDI() &#123;</div><div class=\"line\">\tUser user = ac.getBean(&quot;user&quot;,User.class);</div><div class=\"line\">\tSystem.out.println(user.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=null, age=0, email=null]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>结论<br>xml文件中的配置相当于我们代码中写<code>User user = new User();</code>。</p>\n</li>\n<li><p>注意<br>当我们在类中自己生成有参构造时，默认的无参构造要自行添加。</p>\n</li>\n</ul>\n<h5 id=\"有参构造\"><a href=\"#有参构造\" class=\"headerlink\" title=\"有参构造\"></a>有参构造</h5><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 有参构造 --&gt;</div><div class=\"line\">&lt;bean id=&quot;user1&quot; class=&quot;com.szl.springioc.model.User&quot;&gt;</div><div class=\"line\">\t&lt;constructor-arg value=&quot;张三&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">\t&lt;constructor-arg value=&quot;18&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">\t&lt;constructor-arg value=&quot;zhangsan@qq.com&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Test</div><div class=\"line\">public void testDI() &#123;</div><div class=\"line\">\t//测试有参构造注入</div><div class=\"line\">\tUser user1 = ac.getBean(&quot;user1&quot;,User.class);</div><div class=\"line\">\tSystem.out.println(user1.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=张三, age=18, email=zhangsan@qq.com]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>结论<br>xml文件中的配置相当于我们代码中写<code>User user = new User(&quot;张三&quot;,&quot;18&quot;,&quot;zhangsan@qq.com&quot;);</code>。</p>\n</li>\n<li><p>注意<br>参数的类型和数量必须一致，<code>constructor-arg</code>标签属性中可以使用index指定参数的位置、使用type指定参数的类型及使用name指定参数的名称。</p>\n</li>\n</ul>\n<h4 id=\"setter注入\"><a href=\"#setter注入\" class=\"headerlink\" title=\"setter注入\"></a>setter注入</h4><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 --&gt;</div><div class=\"line\">&lt;bean id=&quot;user2&quot; class=&quot;com.szl.springioc.model.User&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;name&quot; value=&quot;李四&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDI() &#123;</div><div class=\"line\">\t//测试setter注入</div><div class=\"line\">\tUser user2 = ac.getBean(&quot;user2&quot;,User.class);</div><div class=\"line\">\tSystem.out.println(user2.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=李四, age=0, email=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p>xml文件中的配置相当于我们代码中写<code>User user = new User(); user.setName(&quot;李四&quot;)</code>。</p>\n<ul>\n<li>注意</li>\n</ul>\n<p>setter注入的方法名要遵循“JavaBean getter/setter 方法命名约定”，<code>&lt;property&gt;</code>标签中name表示类中setter的名字，value表示要注入的参数值。</p>\n<h3 id=\"其他注入测试\"><a href=\"#其他注入测试\" class=\"headerlink\" title=\"其他注入测试\"></a>其他注入测试</h3><p>我们建下面的一个实体类，我们来测试setter注入boolean，List,Map和Set类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.model;</div><div class=\"line\"></div><div class=\"line\">import java.util.List;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">public class Collections &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate boolean flag;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Map&lt;String, Object&gt; mapParams;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate List&lt;String&gt; listParmas;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Set&lt;String&gt; setParams;</div><div class=\"line\"></div><div class=\"line\">\tpublic boolean isFlag() &#123;</div><div class=\"line\">\t\treturn flag;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setFlag(boolean flag) &#123;</div><div class=\"line\">\t\tthis.flag = flag;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic Map&lt;String, Object&gt; getMapParams() &#123;</div><div class=\"line\">\t\treturn mapParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setMapParams(Map&lt;String, Object&gt; mapParams) &#123;</div><div class=\"line\">\t\tthis.mapParams = mapParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic List&lt;String&gt; getListParmas() &#123;</div><div class=\"line\">\t\treturn listParmas;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setListParmas(List&lt;String&gt; listParmas) &#123;</div><div class=\"line\">\t\tthis.listParmas = listParmas;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic Set&lt;String&gt; getSetParams() &#123;</div><div class=\"line\">\t\treturn setParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setSetParams(Set&lt;String&gt; setParams) &#123;</div><div class=\"line\">\t\tthis.setParams = setParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic String toString() &#123;</div><div class=\"line\">\t\treturn &quot;Collections [flag=&quot; + flag + &quot;, mapParams=&quot; + mapParams + &quot;, listParmas=&quot; + listParmas + &quot;, setParams=&quot;</div><div class=\"line\">\t\t\t\t+ setParams + &quot;]&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"注入Boolean类型\"><a href=\"#注入Boolean类型\" class=\"headerlink\" title=\"注入Boolean类型\"></a>注入Boolean类型</h4><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 boolean类型 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsBoolean&quot; class=&quot;com.szl.springioc.model.Collections&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;flag&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">\t//测试setter注入</div><div class=\"line\">\tCollections collectionsBoolean = ac.getBean(&quot;collectionsBoolean&quot;,Collections.class);</div><div class=\"line\">\tSystem.out.println(collectionsBoolean.toString());</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=true, mapParams=null, listParmas=null, setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p>setter注入Boolean类型，<code>&lt;property&gt;</code>标签中的value值可以是以下几种来代表“真假”</p>\n<table>\n<thead>\n<tr>\n<th>NO.</th>\n<th>支持的参数值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>true/false</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1/0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>on/off</td>\n</tr>\n<tr>\n<td>4</td>\n<td>yes/no</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"注List类型\"><a href=\"#注List类型\" class=\"headerlink\" title=\"注List类型\"></a>注List类型</h4><ul>\n<li>xml文件配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 List类型 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsList&quot; class=&quot;com.szl.springioc.model.Collections&quot;&gt;</div><div class=\"line\">&lt;property name=&quot;listParmas&quot;&gt;</div><div class=\"line\">\t&lt;list&gt;</div><div class=\"line\">\t\t&lt;value&gt;test&lt;/value&gt;</div><div class=\"line\">\t\t&lt;value&gt;test1&lt;/value&gt;</div><div class=\"line\">\t&lt;/list&gt;</div><div class=\"line\">&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">    //测试List注入</div><div class=\"line\">    Collections collectionsList = ac.getBean(&quot;collectionsList&quot;,Collections.class);</div><div class=\"line\">    System.out.println(collectionsList.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=false, mapParams=null, listParmas=[test, test1], setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论<br>注入List需要使用<code>&lt;list&gt;</code>标签，该标签中有可选的value-type属性，用来指定数据类型，比如<code>value-type=java.lang.String</code>。</li>\n</ul>\n<h4 id=\"注Map类型\"><a href=\"#注Map类型\" class=\"headerlink\" title=\"注Map类型\"></a>注Map类型</h4><ul>\n<li>xml文件配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 Map类型 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsMap&quot; class=&quot;com.szl.springioc.model.Collections&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;mapParams&quot;&gt;</div><div class=\"line\">\t\t&lt;map&gt;</div><div class=\"line\">\t\t\t&lt;entry key=&quot;key1&quot; value=&quot;你好&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">\t\t\t&lt;entry key=&quot;key2&quot; value=&quot;世界&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">\t\t&lt;/map&gt;</div><div class=\"line\">\t&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">\t//测试Map注入</div><div class=\"line\">\tCollections collectionsMap = ac.getBean(&quot;collectionsMap&quot;,Collections.class);</div><div class=\"line\">\tSystem.out.println(collectionsMap.toString());</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=false, mapParams=&#123;key1=你好, key2=世界&#125;, listParmas=null, setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p>注入List需要使用<code>&lt;map&gt;</code>标签，该标签中有可选的key-type、value-type属性，用来指定数据类型。</p>\n<h4 id=\"注入Set类型\"><a href=\"#注入Set类型\" class=\"headerlink\" title=\"注入Set类型\"></a>注入Set类型</h4><p>注入Set需要使用<code>&lt;set&gt;</code>标签，同注入List一样，该标签中有可选的value-type属性，用来指定数据类型。</p>\n<h3 id=\"p命名空间简化setter注入\"><a href=\"#p命名空间简化setter注入\" class=\"headerlink\" title=\"p命名空间简化setter注入\"></a>p命名空间简化setter注入</h3><ul>\n<li>xml文件配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- p命名空间 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsP&quot; class=&quot;com.szl.springioc.model.Collections&quot; </div><div class=\"line\">\tp:flag=&quot;1&quot;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">\tCollections collectionsP = ac.getBean(&quot;collectionsP&quot;,Collections.class);</div><div class=\"line\">\tSystem.out.println(collectionsP.toString());</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=true, mapParams=null, listParmas=null, setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p><code>p:flag=&quot;1&quot;</code>等价于<code>&lt;property name=&quot;flag&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</code>，可以混合使用哦。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Spring-IoC容器注入依赖资源主要有以下两种基本实现方式\"><a href=\"#Spring-IoC容器注入依赖资源主要有以下两种基本实现方式\" class=\"headerlink\" title=\"Spring IoC容器注入依赖资源主要有以下两种基本实现方式\"></a>Spring IoC容器注入依赖资源主要有以下两种基本实现方式</h3><ul>\n<li>构造器注入</li>\n<li>setter注入</li>\n</ul>\n<p>我们在介绍注入之前，先建立一个User实体类，且生成无参、有参构造及setter，重写<code>toString()</code>方法以便输出信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.model;</div><div class=\"line\"></div><div class=\"line\">public class User &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate String name;</div><div class=\"line\">\tprivate int age;</div><div class=\"line\">\tprivate String email;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 无参构造(当我们生成有参构造时，默认的无参构造要自行添加)</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic User() &#123;</div><div class=\"line\">\t\tsuper();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 有参构造</div><div class=\"line\">\t * @param name</div><div class=\"line\">\t * @param age</div><div class=\"line\">\t * @param email</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic User(String name, int age, String email) &#123;</div><div class=\"line\">\t\tsuper();</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t\tthis.age = age;</div><div class=\"line\">\t\tthis.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tpublic String getName() &#123;</div><div class=\"line\">\t\treturn name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void setName(String name) &#123;</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic int getAge() &#123;</div><div class=\"line\">\t\treturn age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void setAge(int age) &#123;</div><div class=\"line\">\t\tthis.age = age;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic String getEmail() &#123;</div><div class=\"line\">\t\treturn email;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void setEmail(String email) &#123;</div><div class=\"line\">\t\tthis.email = email;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic String toString() &#123;</div><div class=\"line\">\t\treturn &quot;User [name=&quot; + name + &quot;, age=&quot; + age + &quot;, email=&quot; + email + &quot;]&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"构造器注入\"><a href=\"#构造器注入\" class=\"headerlink\" title=\"构造器注入\"></a>构造器注入</h4><h5 id=\"无参构造\"><a href=\"#无参构造\" class=\"headerlink\" title=\"无参构造\"></a>无参构造</h5><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;user&quot; class=&quot;com.szl.springioc.model.User&quot; /&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDI() &#123;</div><div class=\"line\">\tUser user = ac.getBean(&quot;user&quot;,User.class);</div><div class=\"line\">\tSystem.out.println(user.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=null, age=0, email=null]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>结论<br>xml文件中的配置相当于我们代码中写<code>User user = new User();</code>。</p>\n</li>\n<li><p>注意<br>当我们在类中自己生成有参构造时，默认的无参构造要自行添加。</p>\n</li>\n</ul>\n<h5 id=\"有参构造\"><a href=\"#有参构造\" class=\"headerlink\" title=\"有参构造\"></a>有参构造</h5><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 有参构造 --&gt;</div><div class=\"line\">&lt;bean id=&quot;user1&quot; class=&quot;com.szl.springioc.model.User&quot;&gt;</div><div class=\"line\">\t&lt;constructor-arg value=&quot;张三&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">\t&lt;constructor-arg value=&quot;18&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">\t&lt;constructor-arg value=&quot;zhangsan@qq.com&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Test</div><div class=\"line\">public void testDI() &#123;</div><div class=\"line\">\t//测试有参构造注入</div><div class=\"line\">\tUser user1 = ac.getBean(&quot;user1&quot;,User.class);</div><div class=\"line\">\tSystem.out.println(user1.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=张三, age=18, email=zhangsan@qq.com]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>结论<br>xml文件中的配置相当于我们代码中写<code>User user = new User(&quot;张三&quot;,&quot;18&quot;,&quot;zhangsan@qq.com&quot;);</code>。</p>\n</li>\n<li><p>注意<br>参数的类型和数量必须一致，<code>constructor-arg</code>标签属性中可以使用index指定参数的位置、使用type指定参数的类型及使用name指定参数的名称。</p>\n</li>\n</ul>\n<h4 id=\"setter注入\"><a href=\"#setter注入\" class=\"headerlink\" title=\"setter注入\"></a>setter注入</h4><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 --&gt;</div><div class=\"line\">&lt;bean id=&quot;user2&quot; class=&quot;com.szl.springioc.model.User&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;name&quot; value=&quot;李四&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDI() &#123;</div><div class=\"line\">\t//测试setter注入</div><div class=\"line\">\tUser user2 = ac.getBean(&quot;user2&quot;,User.class);</div><div class=\"line\">\tSystem.out.println(user2.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User [name=李四, age=0, email=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p>xml文件中的配置相当于我们代码中写<code>User user = new User(); user.setName(&quot;李四&quot;)</code>。</p>\n<ul>\n<li>注意</li>\n</ul>\n<p>setter注入的方法名要遵循“JavaBean getter/setter 方法命名约定”，<code>&lt;property&gt;</code>标签中name表示类中setter的名字，value表示要注入的参数值。</p>\n<h3 id=\"其他注入测试\"><a href=\"#其他注入测试\" class=\"headerlink\" title=\"其他注入测试\"></a>其他注入测试</h3><p>我们建下面的一个实体类，我们来测试setter注入boolean，List,Map和Set类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.model;</div><div class=\"line\"></div><div class=\"line\">import java.util.List;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">public class Collections &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate boolean flag;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Map&lt;String, Object&gt; mapParams;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate List&lt;String&gt; listParmas;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Set&lt;String&gt; setParams;</div><div class=\"line\"></div><div class=\"line\">\tpublic boolean isFlag() &#123;</div><div class=\"line\">\t\treturn flag;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setFlag(boolean flag) &#123;</div><div class=\"line\">\t\tthis.flag = flag;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic Map&lt;String, Object&gt; getMapParams() &#123;</div><div class=\"line\">\t\treturn mapParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setMapParams(Map&lt;String, Object&gt; mapParams) &#123;</div><div class=\"line\">\t\tthis.mapParams = mapParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic List&lt;String&gt; getListParmas() &#123;</div><div class=\"line\">\t\treturn listParmas;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setListParmas(List&lt;String&gt; listParmas) &#123;</div><div class=\"line\">\t\tthis.listParmas = listParmas;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic Set&lt;String&gt; getSetParams() &#123;</div><div class=\"line\">\t\treturn setParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setSetParams(Set&lt;String&gt; setParams) &#123;</div><div class=\"line\">\t\tthis.setParams = setParams;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic String toString() &#123;</div><div class=\"line\">\t\treturn &quot;Collections [flag=&quot; + flag + &quot;, mapParams=&quot; + mapParams + &quot;, listParmas=&quot; + listParmas + &quot;, setParams=&quot;</div><div class=\"line\">\t\t\t\t+ setParams + &quot;]&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"注入Boolean类型\"><a href=\"#注入Boolean类型\" class=\"headerlink\" title=\"注入Boolean类型\"></a>注入Boolean类型</h4><ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 boolean类型 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsBoolean&quot; class=&quot;com.szl.springioc.model.Collections&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;flag&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">\t//测试setter注入</div><div class=\"line\">\tCollections collectionsBoolean = ac.getBean(&quot;collectionsBoolean&quot;,Collections.class);</div><div class=\"line\">\tSystem.out.println(collectionsBoolean.toString());</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=true, mapParams=null, listParmas=null, setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p>setter注入Boolean类型，<code>&lt;property&gt;</code>标签中的value值可以是以下几种来代表“真假”</p>\n<table>\n<thead>\n<tr>\n<th>NO.</th>\n<th>支持的参数值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>true/false</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1/0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>on/off</td>\n</tr>\n<tr>\n<td>4</td>\n<td>yes/no</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"注List类型\"><a href=\"#注List类型\" class=\"headerlink\" title=\"注List类型\"></a>注List类型</h4><ul>\n<li>xml文件配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 List类型 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsList&quot; class=&quot;com.szl.springioc.model.Collections&quot;&gt;</div><div class=\"line\">&lt;property name=&quot;listParmas&quot;&gt;</div><div class=\"line\">\t&lt;list&gt;</div><div class=\"line\">\t\t&lt;value&gt;test&lt;/value&gt;</div><div class=\"line\">\t\t&lt;value&gt;test1&lt;/value&gt;</div><div class=\"line\">\t&lt;/list&gt;</div><div class=\"line\">&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">    //测试List注入</div><div class=\"line\">    Collections collectionsList = ac.getBean(&quot;collectionsList&quot;,Collections.class);</div><div class=\"line\">    System.out.println(collectionsList.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=false, mapParams=null, listParmas=[test, test1], setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论<br>注入List需要使用<code>&lt;list&gt;</code>标签，该标签中有可选的value-type属性，用来指定数据类型，比如<code>value-type=java.lang.String</code>。</li>\n</ul>\n<h4 id=\"注Map类型\"><a href=\"#注Map类型\" class=\"headerlink\" title=\"注Map类型\"></a>注Map类型</h4><ul>\n<li>xml文件配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- setter注入 Map类型 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsMap&quot; class=&quot;com.szl.springioc.model.Collections&quot;&gt;</div><div class=\"line\">\t&lt;property name=&quot;mapParams&quot;&gt;</div><div class=\"line\">\t\t&lt;map&gt;</div><div class=\"line\">\t\t\t&lt;entry key=&quot;key1&quot; value=&quot;你好&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">\t\t\t&lt;entry key=&quot;key2&quot; value=&quot;世界&quot;&gt;&lt;/entry&gt;</div><div class=\"line\">\t\t&lt;/map&gt;</div><div class=\"line\">\t&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">\t//测试Map注入</div><div class=\"line\">\tCollections collectionsMap = ac.getBean(&quot;collectionsMap&quot;,Collections.class);</div><div class=\"line\">\tSystem.out.println(collectionsMap.toString());</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=false, mapParams=&#123;key1=你好, key2=世界&#125;, listParmas=null, setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p>注入List需要使用<code>&lt;map&gt;</code>标签，该标签中有可选的key-type、value-type属性，用来指定数据类型。</p>\n<h4 id=\"注入Set类型\"><a href=\"#注入Set类型\" class=\"headerlink\" title=\"注入Set类型\"></a>注入Set类型</h4><p>注入Set需要使用<code>&lt;set&gt;</code>标签，同注入List一样，该标签中有可选的value-type属性，用来指定数据类型。</p>\n<h3 id=\"p命名空间简化setter注入\"><a href=\"#p命名空间简化setter注入\" class=\"headerlink\" title=\"p命名空间简化setter注入\"></a>p命名空间简化setter注入</h3><ul>\n<li>xml文件配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- p命名空间 --&gt;</div><div class=\"line\">&lt;bean id=&quot;collectionsP&quot; class=&quot;com.szl.springioc.model.Collections&quot; </div><div class=\"line\">\tp:flag=&quot;1&quot;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testDIForCollections() &#123;</div><div class=\"line\">\tCollections collectionsP = ac.getBean(&quot;collectionsP&quot;,Collections.class);</div><div class=\"line\">\tSystem.out.println(collectionsP.toString());</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collections [flag=true, mapParams=null, listParmas=null, setParams=null]</div></pre></td></tr></table></figure>\n<ul>\n<li>结论</li>\n</ul>\n<p><code>p:flag=&quot;1&quot;</code>等价于<code>&lt;property name=&quot;flag&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</code>，可以混合使用哦。</p>\n"},{"title":"第二篇之Spirng IOC","date":"2017-05-26T05:49:00.000Z","_content":"\n### 了解IOC\n#### IOC是什么\n控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。\n#### IOC的好处\n对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。\n#### IOC和DI\n- DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。\n- IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。\n\n#### 打印Hello Ioc\n\n1.定义HelloIoc的接口\n```\npackage com.szl.springioc.dao;\n\npublic interface HelloIoc{\n\t\n\tpublic void sayHello();\n\t\n} \n\n```\n2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能\n```\npackage com.szl.springioc.dao.impl;\n\nimport com.szl.springioc.dao.HelloIoc;\n\npublic class HelloIocImpl implements HelloIoc{\n\n\t@Override\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"hello Ioc\");\n\t}\n} \n\n```\n3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n\t\n\t<bean id=\"helloIoc\" class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\n</beans>\n\n```\n4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能\n```\npackage com.szl.SpringIoc.test;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.szl.springioc.dao.HelloIoc;\nimport com.szl.springioc.dao.impl.HelloIocImpl;\n\npublic class SpringTest {\n\tApplicationContext ac;\n\t@Before\n\tpublic void init(){\n\t\t//读取配置文件从而实例化IOC容器\n\t\tac = new ClassPathXmlApplicationContext(\"HelloIoc.xml\");\n\t}\n\n\t@Test\n\tpublic void testHello() {\n\t\t//从容器中获取bean\n\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(\"helloIoc\");\n\t\t//执行业务逻辑\n\t\thi.sayHello();\n\t}\n}\n\n```\n执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。\n\n---\n\n### IOC容器的XML文件配置\n#### Bean标签\n\n```\n<beans>\n\t<!-- 使用ID作为标识符 -->\n\t<bean id=\"helloIoc\"  class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\t<!-- 使用NAME作为标识符 -->\n\t<bean name=\"helloIocName\" class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\t<!-- 不使用任何标识符 ,仅使用类的全限定名-->\n\t<bean class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\t<!-- 同时使用ID和NAME，如果名称相同,容器会自动处理 -->\n\t<bean id=\"helloIocSame\" name=\"helloIocSame\"  class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n</beans>\n\n```\nSpring IoC容器目的就是管理Bean，`<bean>`标签主要用来进行Bean定义，主要有以下属性：\n- id:  Bean的命名，使用id作为“标识符”，必须唯一。\n- name:  Bean的命名，使用name作为“标识符”，必须唯一。\n- scope：Bean的作用域。\n- class:类的全限定名。\n\n测试实例如下：\n```\npublic class SpringTest {\n\tApplicationContext ac;\n\t@Before\n\tpublic void init(){\n\t\t//读取配置文件从而实例化IOC容器\n\t\tac = new ClassPathXmlApplicationContext(\"HelloIoc.xml\");\n\t}\n\n\t@Test\n\tpublic void testBean(){\n\t\t//测试bean使用id\n\t\tHelloIoc hiId = (HelloIocImpl) ac.getBean(\"helloIoc\");\n\t\thiId.sayHello();\n\t\t\n\t\t//测试bean使用name\n\t\tHelloIoc hiName = (HelloIocImpl) ac.getBean(\"helloIocName\");\n\t\thiName.sayHello();\n\t\t\n\t\t//测试bean仅使用类的全限定名\n\t\tHelloIoc hi = ac.getBean(HelloIocImpl.class);\n\t\thi.sayHello();\n\t\t\n\t\t//测试Bean同时使用id和name\n\t\tHelloIoc hiIdAndName = (HelloIocImpl) ac.getBean(\"helloIocSame\");\n\t\thiIdAndName.sayHello();\n\t}\n}\n\n```\n#### Bean的作用域\n作用域|说明\n---|---\nsingleton|默认值，Spring已单例模式创建Bean的实例，即容器中该Bean的实例只有一个\nprototype|每次从容器中获取Bean时，都会创建一个新的实例\nrequest|用于WEB应用环境，针对每次HTTP请求都会创建一个实例\nsession|用于WEB应用环境，同一个回话共享一个实例\nglobal session|仅在Protlet的WEB应用中使用，同一个全局会话共享一个实例，对于非Protlet环境，等同于session\n\n\n### 解读IOC容器\n1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。  \n2.BeanFactory接口有3个类：\n- AutowireCapableBeanFactory  \n该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能\n- HierarchicalBeanFactory  \n定义了BeanFactory的父子链结构 \n- ListableBeanFactory  \n该接口的功能是用来列出所有Bean的名称、类型、注解等信息   \n\n3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。\n\n4.shilihuaApplicationContext的常用实现类\n- ClassPathXmlApplicationContext  \n从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- FileSystemXmlApplicationContext  \n从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- XmlWebApplicationContext  \n从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n\n这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。\n\n**注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程/spring/第二篇之Spirng IOC.md","raw":"---\ntitle: 第二篇之Spirng IOC\ndate: 2017-05-26 13:49\ncategories: Spring的那点事\ntags: Spring\n---\n\n### 了解IOC\n#### IOC是什么\n控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。\n#### IOC的好处\n对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。\n#### IOC和DI\n- DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。\n- IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。\n\n#### 打印Hello Ioc\n\n1.定义HelloIoc的接口\n```\npackage com.szl.springioc.dao;\n\npublic interface HelloIoc{\n\t\n\tpublic void sayHello();\n\t\n} \n\n```\n2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能\n```\npackage com.szl.springioc.dao.impl;\n\nimport com.szl.springioc.dao.HelloIoc;\n\npublic class HelloIocImpl implements HelloIoc{\n\n\t@Override\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"hello Ioc\");\n\t}\n} \n\n```\n3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n\t\n\t<bean id=\"helloIoc\" class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\n</beans>\n\n```\n4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能\n```\npackage com.szl.SpringIoc.test;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.szl.springioc.dao.HelloIoc;\nimport com.szl.springioc.dao.impl.HelloIocImpl;\n\npublic class SpringTest {\n\tApplicationContext ac;\n\t@Before\n\tpublic void init(){\n\t\t//读取配置文件从而实例化IOC容器\n\t\tac = new ClassPathXmlApplicationContext(\"HelloIoc.xml\");\n\t}\n\n\t@Test\n\tpublic void testHello() {\n\t\t//从容器中获取bean\n\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(\"helloIoc\");\n\t\t//执行业务逻辑\n\t\thi.sayHello();\n\t}\n}\n\n```\n执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。\n\n---\n\n### IOC容器的XML文件配置\n#### Bean标签\n\n```\n<beans>\n\t<!-- 使用ID作为标识符 -->\n\t<bean id=\"helloIoc\"  class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\t<!-- 使用NAME作为标识符 -->\n\t<bean name=\"helloIocName\" class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\t<!-- 不使用任何标识符 ,仅使用类的全限定名-->\n\t<bean class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n\t<!-- 同时使用ID和NAME，如果名称相同,容器会自动处理 -->\n\t<bean id=\"helloIocSame\" name=\"helloIocSame\"  class=\"com.szl.springioc.dao.impl.HelloIocImpl\" />\n</beans>\n\n```\nSpring IoC容器目的就是管理Bean，`<bean>`标签主要用来进行Bean定义，主要有以下属性：\n- id:  Bean的命名，使用id作为“标识符”，必须唯一。\n- name:  Bean的命名，使用name作为“标识符”，必须唯一。\n- scope：Bean的作用域。\n- class:类的全限定名。\n\n测试实例如下：\n```\npublic class SpringTest {\n\tApplicationContext ac;\n\t@Before\n\tpublic void init(){\n\t\t//读取配置文件从而实例化IOC容器\n\t\tac = new ClassPathXmlApplicationContext(\"HelloIoc.xml\");\n\t}\n\n\t@Test\n\tpublic void testBean(){\n\t\t//测试bean使用id\n\t\tHelloIoc hiId = (HelloIocImpl) ac.getBean(\"helloIoc\");\n\t\thiId.sayHello();\n\t\t\n\t\t//测试bean使用name\n\t\tHelloIoc hiName = (HelloIocImpl) ac.getBean(\"helloIocName\");\n\t\thiName.sayHello();\n\t\t\n\t\t//测试bean仅使用类的全限定名\n\t\tHelloIoc hi = ac.getBean(HelloIocImpl.class);\n\t\thi.sayHello();\n\t\t\n\t\t//测试Bean同时使用id和name\n\t\tHelloIoc hiIdAndName = (HelloIocImpl) ac.getBean(\"helloIocSame\");\n\t\thiIdAndName.sayHello();\n\t}\n}\n\n```\n#### Bean的作用域\n作用域|说明\n---|---\nsingleton|默认值，Spring已单例模式创建Bean的实例，即容器中该Bean的实例只有一个\nprototype|每次从容器中获取Bean时，都会创建一个新的实例\nrequest|用于WEB应用环境，针对每次HTTP请求都会创建一个实例\nsession|用于WEB应用环境，同一个回话共享一个实例\nglobal session|仅在Protlet的WEB应用中使用，同一个全局会话共享一个实例，对于非Protlet环境，等同于session\n\n\n### 解读IOC容器\n1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。  \n2.BeanFactory接口有3个类：\n- AutowireCapableBeanFactory  \n该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能\n- HierarchicalBeanFactory  \n定义了BeanFactory的父子链结构 \n- ListableBeanFactory  \n该接口的功能是用来列出所有Bean的名称、类型、注解等信息   \n\n3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。\n\n4.shilihuaApplicationContext的常用实现类\n- ClassPathXmlApplicationContext  \n从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- FileSystemXmlApplicationContext  \n从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n- XmlWebApplicationContext  \n从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。\n\n这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。\n\n**注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"编程/spring/第二篇之Spirng IOC","published":1,"updated":"2017-05-27T06:40:34.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95ln000epkqyngn61sa8","content":"<h3 id=\"了解IOC\"><a href=\"#了解IOC\" class=\"headerlink\" title=\"了解IOC\"></a>了解IOC</h3><h4 id=\"IOC是什么\"><a href=\"#IOC是什么\" class=\"headerlink\" title=\"IOC是什么\"></a>IOC是什么</h4><p>控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。</p>\n<h4 id=\"IOC的好处\"><a href=\"#IOC的好处\" class=\"headerlink\" title=\"IOC的好处\"></a>IOC的好处</h4><p>对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。</p>\n<h4 id=\"IOC和DI\"><a href=\"#IOC和DI\" class=\"headerlink\" title=\"IOC和DI\"></a>IOC和DI</h4><ul>\n<li>DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。</li>\n<li>IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。</li>\n</ul>\n<h4 id=\"打印Hello-Ioc\"><a href=\"#打印Hello-Ioc\" class=\"headerlink\" title=\"打印Hello Ioc\"></a>打印Hello Ioc</h4><p>1.定义HelloIoc的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.dao;</div><div class=\"line\"></div><div class=\"line\">public interface HelloIoc&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void sayHello();</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.dao.impl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springioc.dao.HelloIoc;</div><div class=\"line\"></div><div class=\"line\">public class HelloIocImpl implements HelloIoc&#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void sayHello() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;hello Ioc&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;bean id=&quot;helloIoc&quot; class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.test;</div><div class=\"line\"></div><div class=\"line\">import org.junit.Before;</div><div class=\"line\">import org.junit.Test;</div><div class=\"line\">import org.springframework.context.ApplicationContext;</div><div class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springioc.dao.HelloIoc;</div><div class=\"line\">import com.szl.springioc.dao.impl.HelloIocImpl;</div><div class=\"line\"></div><div class=\"line\">public class SpringTest &#123;</div><div class=\"line\">\tApplicationContext ac;</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init()&#123;</div><div class=\"line\">\t\t//读取配置文件从而实例化IOC容器</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;HelloIoc.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testHello() &#123;</div><div class=\"line\">\t\t//从容器中获取bean</div><div class=\"line\">\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(&quot;helloIoc&quot;);</div><div class=\"line\">\t\t//执行业务逻辑</div><div class=\"line\">\t\thi.sayHello();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。</p>\n<hr>\n<h3 id=\"IOC容器的XML文件配置\"><a href=\"#IOC容器的XML文件配置\" class=\"headerlink\" title=\"IOC容器的XML文件配置\"></a>IOC容器的XML文件配置</h3><h4 id=\"Bean标签\"><a href=\"#Bean标签\" class=\"headerlink\" title=\"Bean标签\"></a>Bean标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans&gt;</div><div class=\"line\">\t&lt;!-- 使用ID作为标识符 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;helloIoc&quot;  class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">\t&lt;!-- 使用NAME作为标识符 --&gt;</div><div class=\"line\">\t&lt;bean name=&quot;helloIocName&quot; class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">\t&lt;!-- 不使用任何标识符 ,仅使用类的全限定名--&gt;</div><div class=\"line\">\t&lt;bean class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">\t&lt;!-- 同时使用ID和NAME，如果名称相同,容器会自动处理 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;helloIocSame&quot; name=&quot;helloIocSame&quot;  class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>Spring IoC容器目的就是管理Bean，<code>&lt;bean&gt;</code>标签主要用来进行Bean定义，主要有以下属性：</p>\n<ul>\n<li>id:  Bean的命名，使用id作为“标识符”，必须唯一。</li>\n<li>name:  Bean的命名，使用name作为“标识符”，必须唯一。</li>\n<li>scope：Bean的作用域。</li>\n<li>class:类的全限定名。</li>\n</ul>\n<p>测试实例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SpringTest &#123;</div><div class=\"line\">\tApplicationContext ac;</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init()&#123;</div><div class=\"line\">\t\t//读取配置文件从而实例化IOC容器</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;HelloIoc.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testBean()&#123;</div><div class=\"line\">\t\t//测试bean使用id</div><div class=\"line\">\t\tHelloIoc hiId = (HelloIocImpl) ac.getBean(&quot;helloIoc&quot;);</div><div class=\"line\">\t\thiId.sayHello();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t//测试bean使用name</div><div class=\"line\">\t\tHelloIoc hiName = (HelloIocImpl) ac.getBean(&quot;helloIocName&quot;);</div><div class=\"line\">\t\thiName.sayHello();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t//测试bean仅使用类的全限定名</div><div class=\"line\">\t\tHelloIoc hi = ac.getBean(HelloIocImpl.class);</div><div class=\"line\">\t\thi.sayHello();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t//测试Bean同时使用id和name</div><div class=\"line\">\t\tHelloIoc hiIdAndName = (HelloIocImpl) ac.getBean(&quot;helloIocSame&quot;);</div><div class=\"line\">\t\thiIdAndName.sayHello();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h4><table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>默认值，Spring已单例模式创建Bean的实例，即容器中该Bean的实例只有一个</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>每次从容器中获取Bean时，都会创建一个新的实例</td>\n</tr>\n<tr>\n<td>request</td>\n<td>用于WEB应用环境，针对每次HTTP请求都会创建一个实例</td>\n</tr>\n<tr>\n<td>session</td>\n<td>用于WEB应用环境，同一个回话共享一个实例</td>\n</tr>\n<tr>\n<td>global session</td>\n<td>仅在Protlet的WEB应用中使用，同一个全局会话共享一个实例，对于非Protlet环境，等同于session</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"解读IOC容器\"><a href=\"#解读IOC容器\" class=\"headerlink\" title=\"解读IOC容器\"></a>解读IOC容器</h3><p>1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。<br>2.BeanFactory接口有3个类：</p>\n<ul>\n<li>AutowireCapableBeanFactory<br>该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能</li>\n<li>HierarchicalBeanFactory<br>定义了BeanFactory的父子链结构 </li>\n<li>ListableBeanFactory<br>该接口的功能是用来列出所有Bean的名称、类型、注解等信息   </li>\n</ul>\n<p>3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。</p>\n<p>4.shilihuaApplicationContext的常用实现类</p>\n<ul>\n<li>ClassPathXmlApplicationContext<br>从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>FileSystemXmlApplicationContext<br>从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>XmlWebApplicationContext<br>从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n</ul>\n<p>这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。</p>\n<p><strong>注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"了解IOC\"><a href=\"#了解IOC\" class=\"headerlink\" title=\"了解IOC\"></a>了解IOC</h3><h4 id=\"IOC是什么\"><a href=\"#IOC是什么\" class=\"headerlink\" title=\"IOC是什么\"></a>IOC是什么</h4><p>控制反转（Inversion of Control），不是一种技术，而是一种思想，是面向对象编程中的一种设计原则，用来降低代码之间的耦合度。</p>\n<h4 id=\"IOC的好处\"><a href=\"#IOC的好处\" class=\"headerlink\" title=\"IOC的好处\"></a>IOC的好处</h4><p>对象的创建和依赖由容器负责，对象与对象之间是松耦合的，利于功能复用。</p>\n<h4 id=\"IOC和DI\"><a href=\"#IOC和DI\" class=\"headerlink\" title=\"IOC和DI\"></a>IOC和DI</h4><ul>\n<li>DI即依赖注入（Dependency Injection），由容器动态的将某个依赖关系注入到组件之中，它们是spring核心思想的不同方面的描述。</li>\n<li>IOC是目的，DI是手段，IOC让程序员不需要去new对象，由IOC容器负责，当需要使用某些组件的时候由框架注入（DI）进来。</li>\n</ul>\n<h4 id=\"打印Hello-Ioc\"><a href=\"#打印Hello-Ioc\" class=\"headerlink\" title=\"打印Hello Ioc\"></a>打印Hello Ioc</h4><p>1.定义HelloIoc的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.dao;</div><div class=\"line\"></div><div class=\"line\">public interface HelloIoc&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void sayHello();</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.接口定义完成，实现接口来完成打印“Hello Ioc”的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springioc.dao.impl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springioc.dao.HelloIoc;</div><div class=\"line\"></div><div class=\"line\">public class HelloIocImpl implements HelloIoc&#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void sayHello() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;hello Ioc&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.接下来我们通过配置文件让Spring Ioc来管理它们，我们在工程的resources目录建立一个HelloIoc.xml文件，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;bean id=&quot;helloIoc&quot; class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<p>4.现在我们可以实例化容器，从容器中获取对象，来实现我们的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.SpringIoc.test;</div><div class=\"line\"></div><div class=\"line\">import org.junit.Before;</div><div class=\"line\">import org.junit.Test;</div><div class=\"line\">import org.springframework.context.ApplicationContext;</div><div class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springioc.dao.HelloIoc;</div><div class=\"line\">import com.szl.springioc.dao.impl.HelloIocImpl;</div><div class=\"line\"></div><div class=\"line\">public class SpringTest &#123;</div><div class=\"line\">\tApplicationContext ac;</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init()&#123;</div><div class=\"line\">\t\t//读取配置文件从而实例化IOC容器</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;HelloIoc.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testHello() &#123;</div><div class=\"line\">\t\t//从容器中获取bean</div><div class=\"line\">\t\tHelloIoc hi = (HelloIocImpl) ac.getBean(&quot;helloIoc&quot;);</div><div class=\"line\">\t\t//执行业务逻辑</div><div class=\"line\">\t\thi.sayHello();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行Junit Test后，我们可以在控制台看到程序已经打印出“Hello Ioc”。</p>\n<hr>\n<h3 id=\"IOC容器的XML文件配置\"><a href=\"#IOC容器的XML文件配置\" class=\"headerlink\" title=\"IOC容器的XML文件配置\"></a>IOC容器的XML文件配置</h3><h4 id=\"Bean标签\"><a href=\"#Bean标签\" class=\"headerlink\" title=\"Bean标签\"></a>Bean标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans&gt;</div><div class=\"line\">\t&lt;!-- 使用ID作为标识符 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;helloIoc&quot;  class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">\t&lt;!-- 使用NAME作为标识符 --&gt;</div><div class=\"line\">\t&lt;bean name=&quot;helloIocName&quot; class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">\t&lt;!-- 不使用任何标识符 ,仅使用类的全限定名--&gt;</div><div class=\"line\">\t&lt;bean class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">\t&lt;!-- 同时使用ID和NAME，如果名称相同,容器会自动处理 --&gt;</div><div class=\"line\">\t&lt;bean id=&quot;helloIocSame&quot; name=&quot;helloIocSame&quot;  class=&quot;com.szl.springioc.dao.impl.HelloIocImpl&quot; /&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>Spring IoC容器目的就是管理Bean，<code>&lt;bean&gt;</code>标签主要用来进行Bean定义，主要有以下属性：</p>\n<ul>\n<li>id:  Bean的命名，使用id作为“标识符”，必须唯一。</li>\n<li>name:  Bean的命名，使用name作为“标识符”，必须唯一。</li>\n<li>scope：Bean的作用域。</li>\n<li>class:类的全限定名。</li>\n</ul>\n<p>测试实例如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SpringTest &#123;</div><div class=\"line\">\tApplicationContext ac;</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init()&#123;</div><div class=\"line\">\t\t//读取配置文件从而实例化IOC容器</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;HelloIoc.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testBean()&#123;</div><div class=\"line\">\t\t//测试bean使用id</div><div class=\"line\">\t\tHelloIoc hiId = (HelloIocImpl) ac.getBean(&quot;helloIoc&quot;);</div><div class=\"line\">\t\thiId.sayHello();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t//测试bean使用name</div><div class=\"line\">\t\tHelloIoc hiName = (HelloIocImpl) ac.getBean(&quot;helloIocName&quot;);</div><div class=\"line\">\t\thiName.sayHello();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t//测试bean仅使用类的全限定名</div><div class=\"line\">\t\tHelloIoc hi = ac.getBean(HelloIocImpl.class);</div><div class=\"line\">\t\thi.sayHello();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t//测试Bean同时使用id和name</div><div class=\"line\">\t\tHelloIoc hiIdAndName = (HelloIocImpl) ac.getBean(&quot;helloIocSame&quot;);</div><div class=\"line\">\t\thiIdAndName.sayHello();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h4><table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>默认值，Spring已单例模式创建Bean的实例，即容器中该Bean的实例只有一个</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>每次从容器中获取Bean时，都会创建一个新的实例</td>\n</tr>\n<tr>\n<td>request</td>\n<td>用于WEB应用环境，针对每次HTTP请求都会创建一个实例</td>\n</tr>\n<tr>\n<td>session</td>\n<td>用于WEB应用环境，同一个回话共享一个实例</td>\n</tr>\n<tr>\n<td>global session</td>\n<td>仅在Protlet的WEB应用中使用，同一个全局会话共享一个实例，对于非Protlet环境，等同于session</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"解读IOC容器\"><a href=\"#解读IOC容器\" class=\"headerlink\" title=\"解读IOC容器\"></a>解读IOC容器</h3><p>1.org.springframework.beans和org.springframework.context是Spring Ioc的基本组成，BeanFactory是整个IOC容器的最基本接口。<br>2.BeanFactory接口有3个类：</p>\n<ul>\n<li>AutowireCapableBeanFactory<br>该接口的功能是主要实现了Bean的自动装配功能，为实例Bean暴露了装配的功能</li>\n<li>HierarchicalBeanFactory<br>定义了BeanFactory的父子链结构 </li>\n<li>ListableBeanFactory<br>该接口的功能是用来列出所有Bean的名称、类型、注解等信息   </li>\n</ul>\n<p>3.ApplicationContext接口继承了HierarchicalBeanFactory和ListableBeanFactory，所以ApplicationContext包含BeanFactory的所有功能，而已在国际化支持、资源访问（如URL和文件）、事件传播等方面进行了良好的支持。</p>\n<p>4.shilihuaApplicationContext的常用实现类</p>\n<ul>\n<li>ClassPathXmlApplicationContext<br>从类路径ClassPath中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>FileSystemXmlApplicationContext<br>从指定的文件系统路径中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n<li>XmlWebApplicationContext<br>从Web应用中寻找指定的XML配置文件，找到并装载完成ApplicationContext的实例化工作。</li>\n</ul>\n<p>这些实现类的主要区别就是装载Spring配置文件实例化ApplicationContext容器的方式不同，在ApplicationContext实例化后，同样通过getBean方法从ApplicationContext容器中获取装配好的Bean实例以供使用。</p>\n<p><strong>注：在Java项目中通过ClassPathXmlApplicationContext类手动实例化ApplicationContext容器通常是不二之选。但对于Web项目就不行了，Web项目的启动是由相应的Web服务器负责的，因此，在Web项目中ApplicationContext容器的实例化工作最好交给Web服务器来完成。</strong></p>\n"},{"title":"第五篇之Spring JDBC","date":"2017-05-31T06:28:00.000Z","_content":"\n## JDBC是什么?\n\n### 概念\n> JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。-摘自百度百科\n\n### 传统JDBC编程\n\n- 代码示列\n\n```\npackage com.szl.springjdbc.util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n\npublic class JdbcUtil {\n\t\n\tprivate static String driver = \"com.mysql.jdbc.Driver\";\n\tprivate static String url = \"jdbc:mysql://localhost:3306/test\";\n\tprivate static String user = \"root\";\n\tprivate static String password = \"123456\";\n\t\n\tprivate Connection connection;\n\tprivate PreparedStatement prepareStatement;\n\tprivate ResultSet executeQuery;\n\t\n\tpublic void JdbcTest(){\n\t\ttry {\n\t\t\t//加载驱动\n\t\t\tClass.forName(driver);\n\t\t\t//获取连接且开启事务\n\t\t\tconnection = DriverManager.getConnection(url, user, password);\n\t\t\tconnection.setAutoCommit(false);\n\t\t\t//预编译sql\n\t\t\tprepareStatement = connection.prepareStatement(\"select * from t_users\");\n\t\t\t//执行sql\n\t\t\tResultSet executeQuery = prepareStatement.executeQuery();\n\t\t\tint colNum = executeQuery.getMetaData().getColumnCount();\n\t\t\t//处理结果集\n\t\t\twhile(executeQuery.next()){\n\t\t\t\tfor(int i=0; i<colNum; i++){\n\t\t\t\t\tSystem.out.println(executeQuery.getString(i+1));\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"-----------------------------\");\n\t\t\t}\n\t\t\t//提交事务\n\t\t\tconnection.commit();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\ttry {\n\t\t\t\t//异常事务回滚\n\t\t\t\tconnection.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\ttry {\n\t\t\t\tconnection.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinally {\n\t\t\t//关闭连接\n\t\t\ttry {\n\t\t\t\tif(null != executeQuery)\n\t\t\t\t\texecuteQuery.close();\n\t\t\t\tif(null != prepareStatement)\n\t\t\t\t\tprepareStatement.close();\n\t\t\t\tif(null != connection)\n\t\t\t\t\tconnection.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\n}\n\n```\n\n- 总结\n通过以上代码，我们可以看到，传统JDBC编程需要冗余、复杂的操作，为此Spring JDBC提供了一套JDBC抽象框架，用于简化JDBC开发。\n\n## Spring JDBC\n### 概念\nSpring通过抽象JDBC访问并提供一致的API来简化JDBC编程的工作量。我们只需要声明SQL、调用合适的Spring JDBC框架API、处理结果集即可。事务由Spring管理，并将JDBC受查异常转换为Spring一致的非受查异常，从而简化开发。\n\n### 框架\nSpring主要提供JDBC模板方式、关系数据库对象化方式、SimpleJdbc方式简化JDBC编程。\n本文以JDBC模板方式进行介绍\n\n### JDBC模板\n- JdbcTemplate\nSpring里最基本的JDBC模板，利用JDBC和简单的索引参数查询提供对数据库的简单访问。\n\n- NamedParameterJdbcTemplate\n能够在执行查询时把值绑定到SQL里的命名参数，而不是使用索引参数。\n\n- SimpleJdbcTemplate\n利用Java 5的特性，比如自动装箱、通用（generic）和可变参数列表来简化JDBC模板的使用。\n\n#### JdbcTemplate介绍\n\n##### JdbcTemplate主要4类方法\n- execute\n用于执行任何SQL语句，一般用于执行DDL语句。\n\n- update/batchUpdate\nupdate方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句。\n\n- query/queryForXXX\n用于执行查询相关语句。\n\n- call\n用于执行存储过程、函数相关语句。\n\n##### JdbcTemplate类支持的回调类\n###### 预编译语句及存储过程创建回调\n用于根据JdbcTemplate提供的连接创建相应的语句\n\n- PreparedStatementCreator\n通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的PreparedStatement\n\n- CallableStatementCreator\n通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的CallableStatement\n\n###### 预编译语句设值回调\n用于给预编译语句相应参数设值\n\n- PreparedStatementSetter\n通过回调获取JdbcTemplate提供的PreparedStatement，由用户来对相应的预编译语句相应参数设值\n\n- BatchPreparedStatementSetter\n类似于PreparedStatementSetter，但用于批处理，需要指定批处理大小\n\n###### 自定义功能回调\n提供给用户一个扩展点，用户可以在指定类型的扩展点执行任何数量需要的操作\n\n- ConnectionCallback\n通过回调获取JdbcTemplate提供的Connection，用户可在该Connection执行任何数量的操作\n\n- StatementCallback\n通过回调获取JdbcTemplate提供的Statement，用户可以在该Statement执行任何数量的操作\n\n- PreparedStatementCallback\n通过回调获取JdbcTemplate提供的PreparedStatement，用户可以在该PreparedStatement执行任何数量的操作\n\n- CallableStatementCallback\n通过回调获取JdbcTemplate提供的CallableStatement，用户可以在该CallableStatement执行任何数量的操作\n\n###### 结果集处理回调\n通过回调处理ResultSet或将ResultSet转换为需要的形式\n\n- RowMapper\n用于将结果集每行数据转换为需要的类型，用户需实现方法mapRow(ResultSet rs, int rowNum)来完成将每行数据转换为相应的类型\n\n- RowCallbackHandler\n用于处理ResultSet的每一行结果，用户需实现方法processRow(ResultSet rs)来完成处理，在该回调方法中无需执行rs.next()，该操作由JdbcTemplate来执行，用户只需按行获取数据然后处理即可\n\n- ResultSetExtractor\n用于结果集数据提取，用户需实现方法extractData(ResultSet rs)来处理结果集，用户必须处理整个结果集\n\n\n#### JdbcTemplate测试\n\n使用JdbcTemplate模板类时必须通过DataSource获取数据库连接，然后在使用JdbcTemplate模板对数据库进行操作。\n\n##### 未使用回调\n\nJdbcTemplate提供更简单的queryForXXX方法，来简化开发，参考一下代码。\n\n```\n/**\n * 测试spring JdbcTemplate\n */\n@Test\npublic void testSpringJdbc() throws IOException {\n\t//读取配置文件的数据源配置\n\tProperties properties = new Properties();\n\tInputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"database.properties\");\n\tproperties.load(in);\n\tString url = properties.getProperty(\"jdbc.url\");\n\tString username = properties.getProperty(\"jdbc.username\");\n\tString password = properties.getProperty(\"jdbc.password\");\n\tString driver = properties.getProperty(\"jdbc.driver\");\n\t//使用alibaba的DruidDataSource\n\tDruidDataSource dataSource = new DruidDataSource();\n\tdataSource.setPassword(password);\n\tdataSource.setUrl(url);\n\tdataSource.setUsername(username);\n\tdataSource.setDriverClassName(driver);\n\tdataSource.setInitialSize(2);\n\tdataSource.setMinIdle(2);\n\tdataSource.setMaxActive(10);\n\tdataSource.setMaxWait(60000);\n\tdataSource.setTimeBetweenEvictionRunsMillis(5000);\n\tdataSource.setMinEvictableIdleTimeMillis(120000);\n\t//new一个jdbctemplate\n\tJdbcTemplate jt = new JdbcTemplate(dataSource);\n\t//测试查询，直接返回List<Map<String,Object>>结果\n\tList<Map<String, Object>> queryForList = jt.queryForList(\"select * from t_users\");\n\tSystem.out.println(\"查询结果：\"+queryForList.toString());\n\t//测试增加\n//\tint update = jt.update(\"INSERT INTO t_users(name,email)VALUES('王五','wangwu@163.com')\");\n//\tSystem.out.println(\"增加结果：\"+update);\n}\n\n```\n##### 结果集回调\n\n```\n/**\n* 测试spring JdbcTemplate 结果集回调\n*/\n@Test\npublic void testSpringJdbcResult() throws IOException {\n    //读取配置文件的数据源配置\n    Properties properties = new Properties();\n    InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"database.properties\");\n    properties.load(in);\n    String url = properties.getProperty(\"jdbc.url\");\n    String username = properties.getProperty(\"jdbc.username\");\n    String password = properties.getProperty(\"jdbc.password\");\n    String driver = properties.getProperty(\"jdbc.driver\");\n    //使用alibaba的DruidDataSource\n    DruidDataSource dataSource = new DruidDataSource();\n    dataSource.setPassword(password);\n    dataSource.setUrl(url);\n    dataSource.setUsername(username);\n    dataSource.setDriverClassName(driver);\n    dataSource.setInitialSize(2);\n    dataSource.setMinIdle(2);\n    dataSource.setMaxActive(10);\n    dataSource.setMaxWait(60000);\n    dataSource.setTimeBetweenEvictionRunsMillis(5000);\n    dataSource.setMinEvictableIdleTimeMillis(120000);\n    //new一个jdbctemplate\n    JdbcTemplate jt = new JdbcTemplate(dataSource);\n    //测试RowMapper结果集回调\n//\t\tList<Map<String, Object>> query = jt.query(\"select * from t_users\", new RowMapper<Map<String, Object>>() {\n//\t\t\t@Override\n//\t\t\tpublic Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {\n//\t\t\t\tMap<String, Object> result = new HashMap<>();\n//\t\t\t\tresult.put(\"id\", rs.getInt(\"id\"));\n//\t\t\t\tresult.put(\"name\", rs.getString(\"name\"));\n//\t\t\t\tresult.put(\"email\", rs.getString(\"email\"));\n//\t\t\t\treturn result;\n//\t\t\t}\n//\t\t});\n//\t\tSystem.out.println(\"RowMapper结果：\"+query.toString());\n\n    //测试RowCallbackHandler结果集回调\n//\t\tList<Map<String, Object>> query = new ArrayList<>();\n//\t\tjt.query(\"select * from t_users\",new RowCallbackHandler() {\n//\t\t\t@Override\n//\t\t\tpublic void processRow(ResultSet rs) throws SQLException {\n//\t\t\t\tMap<String, Object> result = new HashMap<>();\n//\t\t\t\tresult.put(\"id\", rs.getInt(\"id\"));\n//\t\t\t\tresult.put(\"name\", rs.getString(\"name\"));\n//\t\t\t\tresult.put(\"email\", rs.getString(\"email\"));\n//\t\t\t\tquery.add(result);\n//\t\t\t}\n//\t\t});\n//\t\tSystem.out.println(\"RowCallbackHandler结果：\"+query.toString());\n\n//测试ResultSetExtractor结果集回调,必须手动处理整个结果集\n    List<Map<String, Object>> query = jt.query(\"select * from t_users\", new ResultSetExtractor<List<Map<String, Object>>>() {\n    \t@Override\n    \tpublic List<Map<String, Object>> extractData(ResultSet rs) throws SQLException, DataAccessException {\n    \t\tList<Map<String, Object>> resultList = new ArrayList<>();\n    \t\twhile(rs.next()){\n    \t\t\tMap<String, Object> result = new HashMap<>();\n    \t\t\tresult.put(\"id\", rs.getInt(\"id\"));\n    \t\t\tresult.put(\"name\", rs.getString(\"name\"));\n    \t\t\tresult.put(\"email\", rs.getString(\"email\"));\n    \t\t\tresultList.add(result);\n    \t\t}\n    \t\treturn resultList;\n    \t}\n    });\n    System.out.println(\"ResultSetExtractor结果：\"+query.toString());\n\n}\n\n```\n\n##### 其他回调\n\n请参考其他文档，使用方法大同小异。\n\n#### JdbcTemplate实践  \nSpring JDBC都是与IOC容器一起使用，通过配置方式使用Spring JDBC，一般都是使用JdbcTemplate类，Spring JDBC通过实现DaoSupport来支持一致的数据库访问。\n\n##### Spring JDBC的DaoSupport实现\n\n- JdbcDaoSupport：用于支持一致的JdbcTemplate访问\n- NamedParameterJdbcDaoSupport:继承JdbcDaoSupport，同时提供NamedParameterJdbcTemplate访问\n- SimpleJdbcDaoSupport：继承JdbcDaoSupport，同时提供SimpleJdbcTemplate访问\n\n##### 定义表结构\n\n```\nDROP TABLE IF EXISTS `t_users`;\nCREATE TABLE `t_users` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) DEFAULT NULL,\n  `email` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of t_users\n-- ----------------------------\nINSERT INTO `t_users` VALUES ('1', 'Andy', 'song@foxmail.com');\n\n```\n\n##### 定义DAO\n\n```\npublic interface UserDao {\n\t/**\n\t * 增加用户\n\t * @return\n\t */\n\tint addUser(User user);\n\t\n\t/**\n\t * 查询用户\n\t * @return\n\t */\n\tList<Map<String, Object>> queryUser();\n\t\n\t/**\n\t * 删除用户\n\t * @return\n\t */\n\tint delUserById(Long id);\n\n}\n\n```\n\n##### 定义DAO的实现类\n\n**ps:实现类继承JdbcDaoSupport**\n\n```\npublic class UserDaoImpl extends JdbcDaoSupport implements UserDao{\n\t\n\t@Override\n\tpublic int addUser(User user) {\n\t\t\n\t\treturn getJdbcTemplate().update(\"INSERT INTO t_users(name,email)VALUES(?,?)\", user.getName(),user.getEmail());\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn getJdbcTemplate().queryForList(\"SELECT * FROM t_users\");\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn getJdbcTemplate().update(\"delete from t_users where id=?\",id);\n\t}\n\n}\n\n```\n\n##### 定义service的实现类\n\n```\npublic class UserServiceImpl implements UserService {\n\n\tprivate UserDao userDao;\t\n\t\n\t@Override\n\tpublic int addUser(User user) {\n\t\treturn userDao.addUser(user);\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn userDao.queryUser();\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn userDao. delUserById(id);\n\t}\n\t\n\tpublic UserDao getUserDao() {\n\t\treturn userDao;\n\t}\n\n\tpublic void setUserDao(UserDao userDao) {\n\t\tthis.userDao = userDao;\n\t}\n}\n\n\n```\n##### xml文件配置\n\n- 数据源\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://127.0.0.1/test?allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&noAccessToProcedureBodies=true&characterEncoding=UTF-8\njdbc.username=root\njdbc.password=123456\n\n```\n\n- bean的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n        <!-- 加载配置文件 -->\n        <context:property-placeholder location=\"database.properties\"/>\n        \n        <!-- 注入jdbcutil类，为了测试原生JDBC -->\n        <bean id=\"jdbcTest\" class=\"com.szl.springjdbc.util.JdbcUtil\"></bean>\n        \n        <!-- 配置数据源 -->\n        <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"  \n\t    destroy-method=\"close\">  \n\t\t    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />  \n\t\t    <property name=\"url\" value=\"${jdbc.url}\" />  \n\t\t    <property name=\"username\" value=\"${jdbc.username}\" />  \n\t\t    <property name=\"password\" value=\"${jdbc.password}\" />  \n\t\t</bean>\n \t \t\t \n        \n        <!-- 定义抽象的abstractDao，其有一个dataSource属性，从而可以让继承的子类自动继承dataSource属性注入-->\n        <bean id=\"abstractDao\" abstract=\"true\">\n        \t<property name=\"dataSource\" ref=\"dataSource\"></property>\n        </bean>\n        \n        <!-- 注入UserDaoImpl类，为了测试使用jdbcTemplate, 继承abstractDao，从而继承dataSource注入-->\n        <bean id=\"userDaoImpl\" class=\"com.szl.springjdbc.dao.impl.UserDaoImpl\" parent=\"abstractDao\"></bean>\n        \n        <!-- 注入UserServiceImpl类，为了测试使用jdbcTemplate  -->\n        <bean id=\"userServiceImpl\" class=\"com.szl.springjdbc.service.impl.UserServiceImpl\">\n        \t<property name=\"userDao\" ref=\"userDaoImpl\"></property>\n        </bean>\n</beans>\n\n```\n\n##### 测试类\n\n```\npublic class JdbcTemplateTest {\n\t\n\tprivate ApplicationContext ac;\n\t\n\t@Before\n\tpublic void inti() {\n\t\tac = new ClassPathXmlApplicationContext(\"jdbc_test.xml\");\n\t}\n\t\n\t/**\n\t * 测试jdbcTemplate编程_查询\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testJdbcTemplateQuery() {\n\t\tUserServiceImpl userServiceImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\t\tList<Map<String, Object>> queryUser = userServiceImpl.queryUser();\n\t\tSystem.out.println(\"查询数据：\"+queryUser.toString());\n\t}\n\t/**\n\t * 测试jdbcTemplate编程_添加\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testJdbcTemplateAdd() {\n\t\tUserServiceImpl userServiceImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\t\tUser user = new User();\n\t\tuser.setName(\"李四\");\n\t\tuser.setEmail(\"lisi@foxmail.com\");\n\t\tSystem.out.println(\"result:\"+userServiceImpl.addUser(user));\n\t}\n\t\n\t/**\n\t * 测试jdbcTemplate编程_删除\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testJdbcTemplateDel() {\n\t\tUserServiceImpl userServiceImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\t\tSystem.out.println(\"result:\"+userServiceImpl.delUserById(1L));\n\t}\n\n}\n\n```\n\n[更多信息，请前往官网介绍](http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html)\n","source":"_posts/编程/spring/第五篇之Spring JDBC.md","raw":"---\ntitle: 第五篇之Spring JDBC\ndate: 2017-05-31 14:28\ncategories: Spring的那点事\ntags: Spring\n---\n\n## JDBC是什么?\n\n### 概念\n> JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。-摘自百度百科\n\n### 传统JDBC编程\n\n- 代码示列\n\n```\npackage com.szl.springjdbc.util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n\npublic class JdbcUtil {\n\t\n\tprivate static String driver = \"com.mysql.jdbc.Driver\";\n\tprivate static String url = \"jdbc:mysql://localhost:3306/test\";\n\tprivate static String user = \"root\";\n\tprivate static String password = \"123456\";\n\t\n\tprivate Connection connection;\n\tprivate PreparedStatement prepareStatement;\n\tprivate ResultSet executeQuery;\n\t\n\tpublic void JdbcTest(){\n\t\ttry {\n\t\t\t//加载驱动\n\t\t\tClass.forName(driver);\n\t\t\t//获取连接且开启事务\n\t\t\tconnection = DriverManager.getConnection(url, user, password);\n\t\t\tconnection.setAutoCommit(false);\n\t\t\t//预编译sql\n\t\t\tprepareStatement = connection.prepareStatement(\"select * from t_users\");\n\t\t\t//执行sql\n\t\t\tResultSet executeQuery = prepareStatement.executeQuery();\n\t\t\tint colNum = executeQuery.getMetaData().getColumnCount();\n\t\t\t//处理结果集\n\t\t\twhile(executeQuery.next()){\n\t\t\t\tfor(int i=0; i<colNum; i++){\n\t\t\t\t\tSystem.out.println(executeQuery.getString(i+1));\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"-----------------------------\");\n\t\t\t}\n\t\t\t//提交事务\n\t\t\tconnection.commit();\n\t\t} catch (ClassNotFoundException e) {\n\t\t\ttry {\n\t\t\t\t//异常事务回滚\n\t\t\t\tconnection.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\ttry {\n\t\t\t\tconnection.rollback();\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinally {\n\t\t\t//关闭连接\n\t\t\ttry {\n\t\t\t\tif(null != executeQuery)\n\t\t\t\t\texecuteQuery.close();\n\t\t\t\tif(null != prepareStatement)\n\t\t\t\t\tprepareStatement.close();\n\t\t\t\tif(null != connection)\n\t\t\t\t\tconnection.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\n}\n\n```\n\n- 总结\n通过以上代码，我们可以看到，传统JDBC编程需要冗余、复杂的操作，为此Spring JDBC提供了一套JDBC抽象框架，用于简化JDBC开发。\n\n## Spring JDBC\n### 概念\nSpring通过抽象JDBC访问并提供一致的API来简化JDBC编程的工作量。我们只需要声明SQL、调用合适的Spring JDBC框架API、处理结果集即可。事务由Spring管理，并将JDBC受查异常转换为Spring一致的非受查异常，从而简化开发。\n\n### 框架\nSpring主要提供JDBC模板方式、关系数据库对象化方式、SimpleJdbc方式简化JDBC编程。\n本文以JDBC模板方式进行介绍\n\n### JDBC模板\n- JdbcTemplate\nSpring里最基本的JDBC模板，利用JDBC和简单的索引参数查询提供对数据库的简单访问。\n\n- NamedParameterJdbcTemplate\n能够在执行查询时把值绑定到SQL里的命名参数，而不是使用索引参数。\n\n- SimpleJdbcTemplate\n利用Java 5的特性，比如自动装箱、通用（generic）和可变参数列表来简化JDBC模板的使用。\n\n#### JdbcTemplate介绍\n\n##### JdbcTemplate主要4类方法\n- execute\n用于执行任何SQL语句，一般用于执行DDL语句。\n\n- update/batchUpdate\nupdate方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句。\n\n- query/queryForXXX\n用于执行查询相关语句。\n\n- call\n用于执行存储过程、函数相关语句。\n\n##### JdbcTemplate类支持的回调类\n###### 预编译语句及存储过程创建回调\n用于根据JdbcTemplate提供的连接创建相应的语句\n\n- PreparedStatementCreator\n通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的PreparedStatement\n\n- CallableStatementCreator\n通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的CallableStatement\n\n###### 预编译语句设值回调\n用于给预编译语句相应参数设值\n\n- PreparedStatementSetter\n通过回调获取JdbcTemplate提供的PreparedStatement，由用户来对相应的预编译语句相应参数设值\n\n- BatchPreparedStatementSetter\n类似于PreparedStatementSetter，但用于批处理，需要指定批处理大小\n\n###### 自定义功能回调\n提供给用户一个扩展点，用户可以在指定类型的扩展点执行任何数量需要的操作\n\n- ConnectionCallback\n通过回调获取JdbcTemplate提供的Connection，用户可在该Connection执行任何数量的操作\n\n- StatementCallback\n通过回调获取JdbcTemplate提供的Statement，用户可以在该Statement执行任何数量的操作\n\n- PreparedStatementCallback\n通过回调获取JdbcTemplate提供的PreparedStatement，用户可以在该PreparedStatement执行任何数量的操作\n\n- CallableStatementCallback\n通过回调获取JdbcTemplate提供的CallableStatement，用户可以在该CallableStatement执行任何数量的操作\n\n###### 结果集处理回调\n通过回调处理ResultSet或将ResultSet转换为需要的形式\n\n- RowMapper\n用于将结果集每行数据转换为需要的类型，用户需实现方法mapRow(ResultSet rs, int rowNum)来完成将每行数据转换为相应的类型\n\n- RowCallbackHandler\n用于处理ResultSet的每一行结果，用户需实现方法processRow(ResultSet rs)来完成处理，在该回调方法中无需执行rs.next()，该操作由JdbcTemplate来执行，用户只需按行获取数据然后处理即可\n\n- ResultSetExtractor\n用于结果集数据提取，用户需实现方法extractData(ResultSet rs)来处理结果集，用户必须处理整个结果集\n\n\n#### JdbcTemplate测试\n\n使用JdbcTemplate模板类时必须通过DataSource获取数据库连接，然后在使用JdbcTemplate模板对数据库进行操作。\n\n##### 未使用回调\n\nJdbcTemplate提供更简单的queryForXXX方法，来简化开发，参考一下代码。\n\n```\n/**\n * 测试spring JdbcTemplate\n */\n@Test\npublic void testSpringJdbc() throws IOException {\n\t//读取配置文件的数据源配置\n\tProperties properties = new Properties();\n\tInputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"database.properties\");\n\tproperties.load(in);\n\tString url = properties.getProperty(\"jdbc.url\");\n\tString username = properties.getProperty(\"jdbc.username\");\n\tString password = properties.getProperty(\"jdbc.password\");\n\tString driver = properties.getProperty(\"jdbc.driver\");\n\t//使用alibaba的DruidDataSource\n\tDruidDataSource dataSource = new DruidDataSource();\n\tdataSource.setPassword(password);\n\tdataSource.setUrl(url);\n\tdataSource.setUsername(username);\n\tdataSource.setDriverClassName(driver);\n\tdataSource.setInitialSize(2);\n\tdataSource.setMinIdle(2);\n\tdataSource.setMaxActive(10);\n\tdataSource.setMaxWait(60000);\n\tdataSource.setTimeBetweenEvictionRunsMillis(5000);\n\tdataSource.setMinEvictableIdleTimeMillis(120000);\n\t//new一个jdbctemplate\n\tJdbcTemplate jt = new JdbcTemplate(dataSource);\n\t//测试查询，直接返回List<Map<String,Object>>结果\n\tList<Map<String, Object>> queryForList = jt.queryForList(\"select * from t_users\");\n\tSystem.out.println(\"查询结果：\"+queryForList.toString());\n\t//测试增加\n//\tint update = jt.update(\"INSERT INTO t_users(name,email)VALUES('王五','wangwu@163.com')\");\n//\tSystem.out.println(\"增加结果：\"+update);\n}\n\n```\n##### 结果集回调\n\n```\n/**\n* 测试spring JdbcTemplate 结果集回调\n*/\n@Test\npublic void testSpringJdbcResult() throws IOException {\n    //读取配置文件的数据源配置\n    Properties properties = new Properties();\n    InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"database.properties\");\n    properties.load(in);\n    String url = properties.getProperty(\"jdbc.url\");\n    String username = properties.getProperty(\"jdbc.username\");\n    String password = properties.getProperty(\"jdbc.password\");\n    String driver = properties.getProperty(\"jdbc.driver\");\n    //使用alibaba的DruidDataSource\n    DruidDataSource dataSource = new DruidDataSource();\n    dataSource.setPassword(password);\n    dataSource.setUrl(url);\n    dataSource.setUsername(username);\n    dataSource.setDriverClassName(driver);\n    dataSource.setInitialSize(2);\n    dataSource.setMinIdle(2);\n    dataSource.setMaxActive(10);\n    dataSource.setMaxWait(60000);\n    dataSource.setTimeBetweenEvictionRunsMillis(5000);\n    dataSource.setMinEvictableIdleTimeMillis(120000);\n    //new一个jdbctemplate\n    JdbcTemplate jt = new JdbcTemplate(dataSource);\n    //测试RowMapper结果集回调\n//\t\tList<Map<String, Object>> query = jt.query(\"select * from t_users\", new RowMapper<Map<String, Object>>() {\n//\t\t\t@Override\n//\t\t\tpublic Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {\n//\t\t\t\tMap<String, Object> result = new HashMap<>();\n//\t\t\t\tresult.put(\"id\", rs.getInt(\"id\"));\n//\t\t\t\tresult.put(\"name\", rs.getString(\"name\"));\n//\t\t\t\tresult.put(\"email\", rs.getString(\"email\"));\n//\t\t\t\treturn result;\n//\t\t\t}\n//\t\t});\n//\t\tSystem.out.println(\"RowMapper结果：\"+query.toString());\n\n    //测试RowCallbackHandler结果集回调\n//\t\tList<Map<String, Object>> query = new ArrayList<>();\n//\t\tjt.query(\"select * from t_users\",new RowCallbackHandler() {\n//\t\t\t@Override\n//\t\t\tpublic void processRow(ResultSet rs) throws SQLException {\n//\t\t\t\tMap<String, Object> result = new HashMap<>();\n//\t\t\t\tresult.put(\"id\", rs.getInt(\"id\"));\n//\t\t\t\tresult.put(\"name\", rs.getString(\"name\"));\n//\t\t\t\tresult.put(\"email\", rs.getString(\"email\"));\n//\t\t\t\tquery.add(result);\n//\t\t\t}\n//\t\t});\n//\t\tSystem.out.println(\"RowCallbackHandler结果：\"+query.toString());\n\n//测试ResultSetExtractor结果集回调,必须手动处理整个结果集\n    List<Map<String, Object>> query = jt.query(\"select * from t_users\", new ResultSetExtractor<List<Map<String, Object>>>() {\n    \t@Override\n    \tpublic List<Map<String, Object>> extractData(ResultSet rs) throws SQLException, DataAccessException {\n    \t\tList<Map<String, Object>> resultList = new ArrayList<>();\n    \t\twhile(rs.next()){\n    \t\t\tMap<String, Object> result = new HashMap<>();\n    \t\t\tresult.put(\"id\", rs.getInt(\"id\"));\n    \t\t\tresult.put(\"name\", rs.getString(\"name\"));\n    \t\t\tresult.put(\"email\", rs.getString(\"email\"));\n    \t\t\tresultList.add(result);\n    \t\t}\n    \t\treturn resultList;\n    \t}\n    });\n    System.out.println(\"ResultSetExtractor结果：\"+query.toString());\n\n}\n\n```\n\n##### 其他回调\n\n请参考其他文档，使用方法大同小异。\n\n#### JdbcTemplate实践  \nSpring JDBC都是与IOC容器一起使用，通过配置方式使用Spring JDBC，一般都是使用JdbcTemplate类，Spring JDBC通过实现DaoSupport来支持一致的数据库访问。\n\n##### Spring JDBC的DaoSupport实现\n\n- JdbcDaoSupport：用于支持一致的JdbcTemplate访问\n- NamedParameterJdbcDaoSupport:继承JdbcDaoSupport，同时提供NamedParameterJdbcTemplate访问\n- SimpleJdbcDaoSupport：继承JdbcDaoSupport，同时提供SimpleJdbcTemplate访问\n\n##### 定义表结构\n\n```\nDROP TABLE IF EXISTS `t_users`;\nCREATE TABLE `t_users` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) DEFAULT NULL,\n  `email` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of t_users\n-- ----------------------------\nINSERT INTO `t_users` VALUES ('1', 'Andy', 'song@foxmail.com');\n\n```\n\n##### 定义DAO\n\n```\npublic interface UserDao {\n\t/**\n\t * 增加用户\n\t * @return\n\t */\n\tint addUser(User user);\n\t\n\t/**\n\t * 查询用户\n\t * @return\n\t */\n\tList<Map<String, Object>> queryUser();\n\t\n\t/**\n\t * 删除用户\n\t * @return\n\t */\n\tint delUserById(Long id);\n\n}\n\n```\n\n##### 定义DAO的实现类\n\n**ps:实现类继承JdbcDaoSupport**\n\n```\npublic class UserDaoImpl extends JdbcDaoSupport implements UserDao{\n\t\n\t@Override\n\tpublic int addUser(User user) {\n\t\t\n\t\treturn getJdbcTemplate().update(\"INSERT INTO t_users(name,email)VALUES(?,?)\", user.getName(),user.getEmail());\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn getJdbcTemplate().queryForList(\"SELECT * FROM t_users\");\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn getJdbcTemplate().update(\"delete from t_users where id=?\",id);\n\t}\n\n}\n\n```\n\n##### 定义service的实现类\n\n```\npublic class UserServiceImpl implements UserService {\n\n\tprivate UserDao userDao;\t\n\t\n\t@Override\n\tpublic int addUser(User user) {\n\t\treturn userDao.addUser(user);\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn userDao.queryUser();\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn userDao. delUserById(id);\n\t}\n\t\n\tpublic UserDao getUserDao() {\n\t\treturn userDao;\n\t}\n\n\tpublic void setUserDao(UserDao userDao) {\n\t\tthis.userDao = userDao;\n\t}\n}\n\n\n```\n##### xml文件配置\n\n- 数据源\n```\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://127.0.0.1/test?allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&noAccessToProcedureBodies=true&characterEncoding=UTF-8\njdbc.username=root\njdbc.password=123456\n\n```\n\n- bean的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n        <!-- 加载配置文件 -->\n        <context:property-placeholder location=\"database.properties\"/>\n        \n        <!-- 注入jdbcutil类，为了测试原生JDBC -->\n        <bean id=\"jdbcTest\" class=\"com.szl.springjdbc.util.JdbcUtil\"></bean>\n        \n        <!-- 配置数据源 -->\n        <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"  \n\t    destroy-method=\"close\">  \n\t\t    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />  \n\t\t    <property name=\"url\" value=\"${jdbc.url}\" />  \n\t\t    <property name=\"username\" value=\"${jdbc.username}\" />  \n\t\t    <property name=\"password\" value=\"${jdbc.password}\" />  \n\t\t</bean>\n \t \t\t \n        \n        <!-- 定义抽象的abstractDao，其有一个dataSource属性，从而可以让继承的子类自动继承dataSource属性注入-->\n        <bean id=\"abstractDao\" abstract=\"true\">\n        \t<property name=\"dataSource\" ref=\"dataSource\"></property>\n        </bean>\n        \n        <!-- 注入UserDaoImpl类，为了测试使用jdbcTemplate, 继承abstractDao，从而继承dataSource注入-->\n        <bean id=\"userDaoImpl\" class=\"com.szl.springjdbc.dao.impl.UserDaoImpl\" parent=\"abstractDao\"></bean>\n        \n        <!-- 注入UserServiceImpl类，为了测试使用jdbcTemplate  -->\n        <bean id=\"userServiceImpl\" class=\"com.szl.springjdbc.service.impl.UserServiceImpl\">\n        \t<property name=\"userDao\" ref=\"userDaoImpl\"></property>\n        </bean>\n</beans>\n\n```\n\n##### 测试类\n\n```\npublic class JdbcTemplateTest {\n\t\n\tprivate ApplicationContext ac;\n\t\n\t@Before\n\tpublic void inti() {\n\t\tac = new ClassPathXmlApplicationContext(\"jdbc_test.xml\");\n\t}\n\t\n\t/**\n\t * 测试jdbcTemplate编程_查询\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testJdbcTemplateQuery() {\n\t\tUserServiceImpl userServiceImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\t\tList<Map<String, Object>> queryUser = userServiceImpl.queryUser();\n\t\tSystem.out.println(\"查询数据：\"+queryUser.toString());\n\t}\n\t/**\n\t * 测试jdbcTemplate编程_添加\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testJdbcTemplateAdd() {\n\t\tUserServiceImpl userServiceImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\t\tUser user = new User();\n\t\tuser.setName(\"李四\");\n\t\tuser.setEmail(\"lisi@foxmail.com\");\n\t\tSystem.out.println(\"result:\"+userServiceImpl.addUser(user));\n\t}\n\t\n\t/**\n\t * 测试jdbcTemplate编程_删除\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testJdbcTemplateDel() {\n\t\tUserServiceImpl userServiceImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\t\tSystem.out.println(\"result:\"+userServiceImpl.delUserById(1L));\n\t}\n\n}\n\n```\n\n[更多信息，请前往官网介绍](http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html)\n","slug":"编程/spring/第五篇之Spring JDBC","published":1,"updated":"2017-06-01T03:44:55.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lp000ipkqyj8f9ipxl","content":"<h2 id=\"JDBC是什么\"><a href=\"#JDBC是什么\" class=\"headerlink\" title=\"JDBC是什么?\"></a>JDBC是什么?</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。-摘自百度百科</p>\n</blockquote>\n<h3 id=\"传统JDBC编程\"><a href=\"#传统JDBC编程\" class=\"headerlink\" title=\"传统JDBC编程\"></a>传统JDBC编程</h3><ul>\n<li>代码示列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springjdbc.util;</div><div class=\"line\"></div><div class=\"line\">import java.sql.Connection;</div><div class=\"line\">import java.sql.DriverManager;</div><div class=\"line\">import java.sql.PreparedStatement;</div><div class=\"line\">import java.sql.ResultSet;</div><div class=\"line\">import java.sql.SQLException;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class JdbcUtil &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static String driver = &quot;com.mysql.jdbc.Driver&quot;;</div><div class=\"line\">\tprivate static String url = &quot;jdbc:mysql://localhost:3306/test&quot;;</div><div class=\"line\">\tprivate static String user = &quot;root&quot;;</div><div class=\"line\">\tprivate static String password = &quot;123456&quot;;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Connection connection;</div><div class=\"line\">\tprivate PreparedStatement prepareStatement;</div><div class=\"line\">\tprivate ResultSet executeQuery;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void JdbcTest()&#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\t//加载驱动</div><div class=\"line\">\t\t\tClass.forName(driver);</div><div class=\"line\">\t\t\t//获取连接且开启事务</div><div class=\"line\">\t\t\tconnection = DriverManager.getConnection(url, user, password);</div><div class=\"line\">\t\t\tconnection.setAutoCommit(false);</div><div class=\"line\">\t\t\t//预编译sql</div><div class=\"line\">\t\t\tprepareStatement = connection.prepareStatement(&quot;select * from t_users&quot;);</div><div class=\"line\">\t\t\t//执行sql</div><div class=\"line\">\t\t\tResultSet executeQuery = prepareStatement.executeQuery();</div><div class=\"line\">\t\t\tint colNum = executeQuery.getMetaData().getColumnCount();</div><div class=\"line\">\t\t\t//处理结果集</div><div class=\"line\">\t\t\twhile(executeQuery.next())&#123;</div><div class=\"line\">\t\t\t\tfor(int i=0; i&lt;colNum; i++)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(executeQuery.getString(i+1));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.println(&quot;-----------------------------&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t//提交事务</div><div class=\"line\">\t\t\tconnection.commit();</div><div class=\"line\">\t\t&#125; catch (ClassNotFoundException e) &#123;</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t//异常事务回滚</div><div class=\"line\">\t\t\t\tconnection.rollback();</div><div class=\"line\">\t\t\t&#125; catch (SQLException e1) &#123;</div><div class=\"line\">\t\t\t\te1.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; catch (SQLException e) &#123;</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\tconnection.rollback();</div><div class=\"line\">\t\t\t&#125; catch (SQLException e1) &#123;</div><div class=\"line\">\t\t\t\te1.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfinally &#123;</div><div class=\"line\">\t\t\t//关闭连接</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\tif(null != executeQuery)</div><div class=\"line\">\t\t\t\t\texecuteQuery.close();</div><div class=\"line\">\t\t\t\tif(null != prepareStatement)</div><div class=\"line\">\t\t\t\t\tprepareStatement.close();</div><div class=\"line\">\t\t\t\tif(null != connection)</div><div class=\"line\">\t\t\t\t\tconnection.close();</div><div class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>总结<br>通过以上代码，我们可以看到，传统JDBC编程需要冗余、复杂的操作，为此Spring JDBC提供了一套JDBC抽象框架，用于简化JDBC开发。</li>\n</ul>\n<h2 id=\"Spring-JDBC\"><a href=\"#Spring-JDBC\" class=\"headerlink\" title=\"Spring JDBC\"></a>Spring JDBC</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Spring通过抽象JDBC访问并提供一致的API来简化JDBC编程的工作量。我们只需要声明SQL、调用合适的Spring JDBC框架API、处理结果集即可。事务由Spring管理，并将JDBC受查异常转换为Spring一致的非受查异常，从而简化开发。</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p>Spring主要提供JDBC模板方式、关系数据库对象化方式、SimpleJdbc方式简化JDBC编程。<br>本文以JDBC模板方式进行介绍</p>\n<h3 id=\"JDBC模板\"><a href=\"#JDBC模板\" class=\"headerlink\" title=\"JDBC模板\"></a>JDBC模板</h3><ul>\n<li><p>JdbcTemplate<br>Spring里最基本的JDBC模板，利用JDBC和简单的索引参数查询提供对数据库的简单访问。</p>\n</li>\n<li><p>NamedParameterJdbcTemplate<br>能够在执行查询时把值绑定到SQL里的命名参数，而不是使用索引参数。</p>\n</li>\n<li><p>SimpleJdbcTemplate<br>利用Java 5的特性，比如自动装箱、通用（generic）和可变参数列表来简化JDBC模板的使用。</p>\n</li>\n</ul>\n<h4 id=\"JdbcTemplate介绍\"><a href=\"#JdbcTemplate介绍\" class=\"headerlink\" title=\"JdbcTemplate介绍\"></a>JdbcTemplate介绍</h4><h5 id=\"JdbcTemplate主要4类方法\"><a href=\"#JdbcTemplate主要4类方法\" class=\"headerlink\" title=\"JdbcTemplate主要4类方法\"></a>JdbcTemplate主要4类方法</h5><ul>\n<li><p>execute<br>用于执行任何SQL语句，一般用于执行DDL语句。</p>\n</li>\n<li><p>update/batchUpdate<br>update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句。</p>\n</li>\n<li><p>query/queryForXXX<br>用于执行查询相关语句。</p>\n</li>\n<li><p>call<br>用于执行存储过程、函数相关语句。</p>\n</li>\n</ul>\n<h5 id=\"JdbcTemplate类支持的回调类\"><a href=\"#JdbcTemplate类支持的回调类\" class=\"headerlink\" title=\"JdbcTemplate类支持的回调类\"></a>JdbcTemplate类支持的回调类</h5><h6 id=\"预编译语句及存储过程创建回调\"><a href=\"#预编译语句及存储过程创建回调\" class=\"headerlink\" title=\"预编译语句及存储过程创建回调\"></a>预编译语句及存储过程创建回调</h6><p>用于根据JdbcTemplate提供的连接创建相应的语句</p>\n<ul>\n<li><p>PreparedStatementCreator<br>通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的PreparedStatement</p>\n</li>\n<li><p>CallableStatementCreator<br>通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的CallableStatement</p>\n</li>\n</ul>\n<h6 id=\"预编译语句设值回调\"><a href=\"#预编译语句设值回调\" class=\"headerlink\" title=\"预编译语句设值回调\"></a>预编译语句设值回调</h6><p>用于给预编译语句相应参数设值</p>\n<ul>\n<li><p>PreparedStatementSetter<br>通过回调获取JdbcTemplate提供的PreparedStatement，由用户来对相应的预编译语句相应参数设值</p>\n</li>\n<li><p>BatchPreparedStatementSetter<br>类似于PreparedStatementSetter，但用于批处理，需要指定批处理大小</p>\n</li>\n</ul>\n<h6 id=\"自定义功能回调\"><a href=\"#自定义功能回调\" class=\"headerlink\" title=\"自定义功能回调\"></a>自定义功能回调</h6><p>提供给用户一个扩展点，用户可以在指定类型的扩展点执行任何数量需要的操作</p>\n<ul>\n<li><p>ConnectionCallback<br>通过回调获取JdbcTemplate提供的Connection，用户可在该Connection执行任何数量的操作</p>\n</li>\n<li><p>StatementCallback<br>通过回调获取JdbcTemplate提供的Statement，用户可以在该Statement执行任何数量的操作</p>\n</li>\n<li><p>PreparedStatementCallback<br>通过回调获取JdbcTemplate提供的PreparedStatement，用户可以在该PreparedStatement执行任何数量的操作</p>\n</li>\n<li><p>CallableStatementCallback<br>通过回调获取JdbcTemplate提供的CallableStatement，用户可以在该CallableStatement执行任何数量的操作</p>\n</li>\n</ul>\n<h6 id=\"结果集处理回调\"><a href=\"#结果集处理回调\" class=\"headerlink\" title=\"结果集处理回调\"></a>结果集处理回调</h6><p>通过回调处理ResultSet或将ResultSet转换为需要的形式</p>\n<ul>\n<li><p>RowMapper<br>用于将结果集每行数据转换为需要的类型，用户需实现方法mapRow(ResultSet rs, int rowNum)来完成将每行数据转换为相应的类型</p>\n</li>\n<li><p>RowCallbackHandler<br>用于处理ResultSet的每一行结果，用户需实现方法processRow(ResultSet rs)来完成处理，在该回调方法中无需执行rs.next()，该操作由JdbcTemplate来执行，用户只需按行获取数据然后处理即可</p>\n</li>\n<li><p>ResultSetExtractor<br>用于结果集数据提取，用户需实现方法extractData(ResultSet rs)来处理结果集，用户必须处理整个结果集</p>\n</li>\n</ul>\n<h4 id=\"JdbcTemplate测试\"><a href=\"#JdbcTemplate测试\" class=\"headerlink\" title=\"JdbcTemplate测试\"></a>JdbcTemplate测试</h4><p>使用JdbcTemplate模板类时必须通过DataSource获取数据库连接，然后在使用JdbcTemplate模板对数据库进行操作。</p>\n<h5 id=\"未使用回调\"><a href=\"#未使用回调\" class=\"headerlink\" title=\"未使用回调\"></a>未使用回调</h5><p>JdbcTemplate提供更简单的queryForXXX方法，来简化开发，参考一下代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 测试spring JdbcTemplate</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSpringJdbc() throws IOException &#123;</div><div class=\"line\">\t//读取配置文件的数据源配置</div><div class=\"line\">\tProperties properties = new Properties();</div><div class=\"line\">\tInputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;database.properties&quot;);</div><div class=\"line\">\tproperties.load(in);</div><div class=\"line\">\tString url = properties.getProperty(&quot;jdbc.url&quot;);</div><div class=\"line\">\tString username = properties.getProperty(&quot;jdbc.username&quot;);</div><div class=\"line\">\tString password = properties.getProperty(&quot;jdbc.password&quot;);</div><div class=\"line\">\tString driver = properties.getProperty(&quot;jdbc.driver&quot;);</div><div class=\"line\">\t//使用alibaba的DruidDataSource</div><div class=\"line\">\tDruidDataSource dataSource = new DruidDataSource();</div><div class=\"line\">\tdataSource.setPassword(password);</div><div class=\"line\">\tdataSource.setUrl(url);</div><div class=\"line\">\tdataSource.setUsername(username);</div><div class=\"line\">\tdataSource.setDriverClassName(driver);</div><div class=\"line\">\tdataSource.setInitialSize(2);</div><div class=\"line\">\tdataSource.setMinIdle(2);</div><div class=\"line\">\tdataSource.setMaxActive(10);</div><div class=\"line\">\tdataSource.setMaxWait(60000);</div><div class=\"line\">\tdataSource.setTimeBetweenEvictionRunsMillis(5000);</div><div class=\"line\">\tdataSource.setMinEvictableIdleTimeMillis(120000);</div><div class=\"line\">\t//new一个jdbctemplate</div><div class=\"line\">\tJdbcTemplate jt = new JdbcTemplate(dataSource);</div><div class=\"line\">\t//测试查询，直接返回List&lt;Map&lt;String,Object&gt;&gt;结果</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryForList = jt.queryForList(&quot;select * from t_users&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;查询结果：&quot;+queryForList.toString());</div><div class=\"line\">\t//测试增加</div><div class=\"line\">//\tint update = jt.update(&quot;INSERT INTO t_users(name,email)VALUES(&apos;王五&apos;,&apos;wangwu@163.com&apos;)&quot;);</div><div class=\"line\">//\tSystem.out.println(&quot;增加结果：&quot;+update);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"结果集回调\"><a href=\"#结果集回调\" class=\"headerlink\" title=\"结果集回调\"></a>结果集回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 测试spring JdbcTemplate 结果集回调</div><div class=\"line\">*/</div><div class=\"line\">@Test</div><div class=\"line\">public void testSpringJdbcResult() throws IOException &#123;</div><div class=\"line\">    //读取配置文件的数据源配置</div><div class=\"line\">    Properties properties = new Properties();</div><div class=\"line\">    InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;database.properties&quot;);</div><div class=\"line\">    properties.load(in);</div><div class=\"line\">    String url = properties.getProperty(&quot;jdbc.url&quot;);</div><div class=\"line\">    String username = properties.getProperty(&quot;jdbc.username&quot;);</div><div class=\"line\">    String password = properties.getProperty(&quot;jdbc.password&quot;);</div><div class=\"line\">    String driver = properties.getProperty(&quot;jdbc.driver&quot;);</div><div class=\"line\">    //使用alibaba的DruidDataSource</div><div class=\"line\">    DruidDataSource dataSource = new DruidDataSource();</div><div class=\"line\">    dataSource.setPassword(password);</div><div class=\"line\">    dataSource.setUrl(url);</div><div class=\"line\">    dataSource.setUsername(username);</div><div class=\"line\">    dataSource.setDriverClassName(driver);</div><div class=\"line\">    dataSource.setInitialSize(2);</div><div class=\"line\">    dataSource.setMinIdle(2);</div><div class=\"line\">    dataSource.setMaxActive(10);</div><div class=\"line\">    dataSource.setMaxWait(60000);</div><div class=\"line\">    dataSource.setTimeBetweenEvictionRunsMillis(5000);</div><div class=\"line\">    dataSource.setMinEvictableIdleTimeMillis(120000);</div><div class=\"line\">    //new一个jdbctemplate</div><div class=\"line\">    JdbcTemplate jt = new JdbcTemplate(dataSource);</div><div class=\"line\">    //测试RowMapper结果集回调</div><div class=\"line\">//\t\tList&lt;Map&lt;String, Object&gt;&gt; query = jt.query(&quot;select * from t_users&quot;, new RowMapper&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">//\t\t\t@Override</div><div class=\"line\">//\t\t\tpublic Map&lt;String, Object&gt; mapRow(ResultSet rs, int rowNum) throws SQLException &#123;</div><div class=\"line\">//\t\t\t\tMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();</div><div class=\"line\">//\t\t\t\tresult.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;name&quot;, rs.getString(&quot;name&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;email&quot;, rs.getString(&quot;email&quot;));</div><div class=\"line\">//\t\t\t\treturn result;</div><div class=\"line\">//\t\t\t&#125;</div><div class=\"line\">//\t\t&#125;);</div><div class=\"line\">//\t\tSystem.out.println(&quot;RowMapper结果：&quot;+query.toString());</div><div class=\"line\"></div><div class=\"line\">    //测试RowCallbackHandler结果集回调</div><div class=\"line\">//\t\tList&lt;Map&lt;String, Object&gt;&gt; query = new ArrayList&lt;&gt;();</div><div class=\"line\">//\t\tjt.query(&quot;select * from t_users&quot;,new RowCallbackHandler() &#123;</div><div class=\"line\">//\t\t\t@Override</div><div class=\"line\">//\t\t\tpublic void processRow(ResultSet rs) throws SQLException &#123;</div><div class=\"line\">//\t\t\t\tMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();</div><div class=\"line\">//\t\t\t\tresult.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;name&quot;, rs.getString(&quot;name&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;email&quot;, rs.getString(&quot;email&quot;));</div><div class=\"line\">//\t\t\t\tquery.add(result);</div><div class=\"line\">//\t\t\t&#125;</div><div class=\"line\">//\t\t&#125;);</div><div class=\"line\">//\t\tSystem.out.println(&quot;RowCallbackHandler结果：&quot;+query.toString());</div><div class=\"line\"></div><div class=\"line\">//测试ResultSetExtractor结果集回调,必须手动处理整个结果集</div><div class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; query = jt.query(&quot;select * from t_users&quot;, new ResultSetExtractor&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;</div><div class=\"line\">    \t@Override</div><div class=\"line\">    \tpublic List&lt;Map&lt;String, Object&gt;&gt; extractData(ResultSet rs) throws SQLException, DataAccessException &#123;</div><div class=\"line\">    \t\tList&lt;Map&lt;String, Object&gt;&gt; resultList = new ArrayList&lt;&gt;();</div><div class=\"line\">    \t\twhile(rs.next())&#123;</div><div class=\"line\">    \t\t\tMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();</div><div class=\"line\">    \t\t\tresult.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));</div><div class=\"line\">    \t\t\tresult.put(&quot;name&quot;, rs.getString(&quot;name&quot;));</div><div class=\"line\">    \t\t\tresult.put(&quot;email&quot;, rs.getString(&quot;email&quot;));</div><div class=\"line\">    \t\t\tresultList.add(result);</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t\treturn resultList;</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    System.out.println(&quot;ResultSetExtractor结果：&quot;+query.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"其他回调\"><a href=\"#其他回调\" class=\"headerlink\" title=\"其他回调\"></a>其他回调</h5><p>请参考其他文档，使用方法大同小异。</p>\n<h4 id=\"JdbcTemplate实践\"><a href=\"#JdbcTemplate实践\" class=\"headerlink\" title=\"JdbcTemplate实践\"></a>JdbcTemplate实践</h4><p>Spring JDBC都是与IOC容器一起使用，通过配置方式使用Spring JDBC，一般都是使用JdbcTemplate类，Spring JDBC通过实现DaoSupport来支持一致的数据库访问。</p>\n<h5 id=\"Spring-JDBC的DaoSupport实现\"><a href=\"#Spring-JDBC的DaoSupport实现\" class=\"headerlink\" title=\"Spring JDBC的DaoSupport实现\"></a>Spring JDBC的DaoSupport实现</h5><ul>\n<li>JdbcDaoSupport：用于支持一致的JdbcTemplate访问</li>\n<li>NamedParameterJdbcDaoSupport:继承JdbcDaoSupport，同时提供NamedParameterJdbcTemplate访问</li>\n<li>SimpleJdbcDaoSupport：继承JdbcDaoSupport，同时提供SimpleJdbcTemplate访问</li>\n</ul>\n<h5 id=\"定义表结构\"><a href=\"#定义表结构\" class=\"headerlink\" title=\"定义表结构\"></a>定义表结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">DROP TABLE IF EXISTS `t_users`;</div><div class=\"line\">CREATE TABLE `t_users` (</div><div class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">  `name` varchar(50) DEFAULT NULL,</div><div class=\"line\">  `email` varchar(100) DEFAULT NULL,</div><div class=\"line\">  PRIMARY KEY (`id`)</div><div class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</div><div class=\"line\"></div><div class=\"line\">-- ----------------------------</div><div class=\"line\">-- Records of t_users</div><div class=\"line\">-- ----------------------------</div><div class=\"line\">INSERT INTO `t_users` VALUES (&apos;1&apos;, &apos;Andy&apos;, &apos;song@foxmail.com&apos;);</div></pre></td></tr></table></figure>\n<h5 id=\"定义DAO\"><a href=\"#定义DAO\" class=\"headerlink\" title=\"定义DAO\"></a>定义DAO</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface UserDao &#123;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 增加用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint addUser(User user);</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 查询用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser();</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 删除用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint delUserById(Long id);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"定义DAO的实现类\"><a href=\"#定义DAO的实现类\" class=\"headerlink\" title=\"定义DAO的实现类\"></a>定义DAO的实现类</h5><p><strong>ps:实现类继承JdbcDaoSupport</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserDaoImpl extends JdbcDaoSupport implements UserDao&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\treturn getJdbcTemplate().update(&quot;INSERT INTO t_users(name,email)VALUES(?,?)&quot;, user.getName(),user.getEmail());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn getJdbcTemplate().queryForList(&quot;SELECT * FROM t_users&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn getJdbcTemplate().update(&quot;delete from t_users where id=?&quot;,id);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"定义service的实现类\"><a href=\"#定义service的实现类\" class=\"headerlink\" title=\"定义service的实现类\"></a>定义service的实现类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserServiceImpl implements UserService &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate UserDao userDao;\t</div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\treturn userDao.addUser(user);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn userDao.queryUser();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn userDao. delUserById(id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic UserDao getUserDao() &#123;</div><div class=\"line\">\t\treturn userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setUserDao(UserDao userDao) &#123;</div><div class=\"line\">\t\tthis.userDao = userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"xml文件配置\"><a href=\"#xml文件配置\" class=\"headerlink\" title=\"xml文件配置\"></a>xml文件配置</h5><ul>\n<li><p>数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</div><div class=\"line\">jdbc.url=jdbc:mysql://127.0.0.1/test?allowMultiQueries=true&amp;zeroDateTimeBehavior=convertToNull&amp;noAccessToProcedureBodies=true&amp;characterEncoding=UTF-8</div><div class=\"line\">jdbc.username=root</div><div class=\"line\">jdbc.password=123456</div></pre></td></tr></table></figure>\n</li>\n<li><p>bean的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">        &lt;!-- 加载配置文件 --&gt;</div><div class=\"line\">        &lt;context:property-placeholder location=&quot;database.properties&quot;/&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 注入jdbcutil类，为了测试原生JDBC --&gt;</div><div class=\"line\">        &lt;bean id=&quot;jdbcTest&quot; class=&quot;com.szl.springjdbc.util.JdbcUtil&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 配置数据源 --&gt;</div><div class=\"line\">        &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;  </div><div class=\"line\">\t    destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;  </div><div class=\"line\">\t\t&lt;/bean&gt;</div><div class=\"line\"> \t \t\t </div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 定义抽象的abstractDao，其有一个dataSource属性，从而可以让继承的子类自动继承dataSource属性注入--&gt;</div><div class=\"line\">        &lt;bean id=&quot;abstractDao&quot; abstract=&quot;true&quot;&gt;</div><div class=\"line\">        \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">        &lt;/bean&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 注入UserDaoImpl类，为了测试使用jdbcTemplate, 继承abstractDao，从而继承dataSource注入--&gt;</div><div class=\"line\">        &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.szl.springjdbc.dao.impl.UserDaoImpl&quot; parent=&quot;abstractDao&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 注入UserServiceImpl类，为了测试使用jdbcTemplate  --&gt;</div><div class=\"line\">        &lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.szl.springjdbc.service.impl.UserServiceImpl&quot;&gt;</div><div class=\"line\">        \t&lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt;</div><div class=\"line\">        &lt;/bean&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class JdbcTemplateTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate ApplicationContext ac;</div><div class=\"line\">\t</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void inti() &#123;</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;jdbc_test.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 测试jdbcTemplate编程_查询</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testJdbcTemplateQuery() &#123;</div><div class=\"line\">\t\tUserServiceImpl userServiceImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\t\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userServiceImpl.queryUser();</div><div class=\"line\">\t\tSystem.out.println(&quot;查询数据：&quot;+queryUser.toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 测试jdbcTemplate编程_添加</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testJdbcTemplateAdd() &#123;</div><div class=\"line\">\t\tUserServiceImpl userServiceImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\t\tUser user = new User();</div><div class=\"line\">\t\tuser.setName(&quot;李四&quot;);</div><div class=\"line\">\t\tuser.setEmail(&quot;lisi@foxmail.com&quot;);</div><div class=\"line\">\t\tSystem.out.println(&quot;result:&quot;+userServiceImpl.addUser(user));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 测试jdbcTemplate编程_删除</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testJdbcTemplateDel() &#123;</div><div class=\"line\">\t\tUserServiceImpl userServiceImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\t\tSystem.out.println(&quot;result:&quot;+userServiceImpl.delUserById(1L));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\" target=\"_blank\" rel=\"external\">更多信息，请前往官网介绍</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JDBC是什么\"><a href=\"#JDBC是什么\" class=\"headerlink\" title=\"JDBC是什么?\"></a>JDBC是什么?</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。-摘自百度百科</p>\n</blockquote>\n<h3 id=\"传统JDBC编程\"><a href=\"#传统JDBC编程\" class=\"headerlink\" title=\"传统JDBC编程\"></a>传统JDBC编程</h3><ul>\n<li>代码示列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springjdbc.util;</div><div class=\"line\"></div><div class=\"line\">import java.sql.Connection;</div><div class=\"line\">import java.sql.DriverManager;</div><div class=\"line\">import java.sql.PreparedStatement;</div><div class=\"line\">import java.sql.ResultSet;</div><div class=\"line\">import java.sql.SQLException;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class JdbcUtil &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate static String driver = &quot;com.mysql.jdbc.Driver&quot;;</div><div class=\"line\">\tprivate static String url = &quot;jdbc:mysql://localhost:3306/test&quot;;</div><div class=\"line\">\tprivate static String user = &quot;root&quot;;</div><div class=\"line\">\tprivate static String password = &quot;123456&quot;;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Connection connection;</div><div class=\"line\">\tprivate PreparedStatement prepareStatement;</div><div class=\"line\">\tprivate ResultSet executeQuery;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void JdbcTest()&#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\t//加载驱动</div><div class=\"line\">\t\t\tClass.forName(driver);</div><div class=\"line\">\t\t\t//获取连接且开启事务</div><div class=\"line\">\t\t\tconnection = DriverManager.getConnection(url, user, password);</div><div class=\"line\">\t\t\tconnection.setAutoCommit(false);</div><div class=\"line\">\t\t\t//预编译sql</div><div class=\"line\">\t\t\tprepareStatement = connection.prepareStatement(&quot;select * from t_users&quot;);</div><div class=\"line\">\t\t\t//执行sql</div><div class=\"line\">\t\t\tResultSet executeQuery = prepareStatement.executeQuery();</div><div class=\"line\">\t\t\tint colNum = executeQuery.getMetaData().getColumnCount();</div><div class=\"line\">\t\t\t//处理结果集</div><div class=\"line\">\t\t\twhile(executeQuery.next())&#123;</div><div class=\"line\">\t\t\t\tfor(int i=0; i&lt;colNum; i++)&#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(executeQuery.getString(i+1));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSystem.out.println(&quot;-----------------------------&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t//提交事务</div><div class=\"line\">\t\t\tconnection.commit();</div><div class=\"line\">\t\t&#125; catch (ClassNotFoundException e) &#123;</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t//异常事务回滚</div><div class=\"line\">\t\t\t\tconnection.rollback();</div><div class=\"line\">\t\t\t&#125; catch (SQLException e1) &#123;</div><div class=\"line\">\t\t\t\te1.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; catch (SQLException e) &#123;</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\tconnection.rollback();</div><div class=\"line\">\t\t\t&#125; catch (SQLException e1) &#123;</div><div class=\"line\">\t\t\t\te1.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfinally &#123;</div><div class=\"line\">\t\t\t//关闭连接</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\tif(null != executeQuery)</div><div class=\"line\">\t\t\t\t\texecuteQuery.close();</div><div class=\"line\">\t\t\t\tif(null != prepareStatement)</div><div class=\"line\">\t\t\t\t\tprepareStatement.close();</div><div class=\"line\">\t\t\t\tif(null != connection)</div><div class=\"line\">\t\t\t\t\tconnection.close();</div><div class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>总结<br>通过以上代码，我们可以看到，传统JDBC编程需要冗余、复杂的操作，为此Spring JDBC提供了一套JDBC抽象框架，用于简化JDBC开发。</li>\n</ul>\n<h2 id=\"Spring-JDBC\"><a href=\"#Spring-JDBC\" class=\"headerlink\" title=\"Spring JDBC\"></a>Spring JDBC</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Spring通过抽象JDBC访问并提供一致的API来简化JDBC编程的工作量。我们只需要声明SQL、调用合适的Spring JDBC框架API、处理结果集即可。事务由Spring管理，并将JDBC受查异常转换为Spring一致的非受查异常，从而简化开发。</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p>Spring主要提供JDBC模板方式、关系数据库对象化方式、SimpleJdbc方式简化JDBC编程。<br>本文以JDBC模板方式进行介绍</p>\n<h3 id=\"JDBC模板\"><a href=\"#JDBC模板\" class=\"headerlink\" title=\"JDBC模板\"></a>JDBC模板</h3><ul>\n<li><p>JdbcTemplate<br>Spring里最基本的JDBC模板，利用JDBC和简单的索引参数查询提供对数据库的简单访问。</p>\n</li>\n<li><p>NamedParameterJdbcTemplate<br>能够在执行查询时把值绑定到SQL里的命名参数，而不是使用索引参数。</p>\n</li>\n<li><p>SimpleJdbcTemplate<br>利用Java 5的特性，比如自动装箱、通用（generic）和可变参数列表来简化JDBC模板的使用。</p>\n</li>\n</ul>\n<h4 id=\"JdbcTemplate介绍\"><a href=\"#JdbcTemplate介绍\" class=\"headerlink\" title=\"JdbcTemplate介绍\"></a>JdbcTemplate介绍</h4><h5 id=\"JdbcTemplate主要4类方法\"><a href=\"#JdbcTemplate主要4类方法\" class=\"headerlink\" title=\"JdbcTemplate主要4类方法\"></a>JdbcTemplate主要4类方法</h5><ul>\n<li><p>execute<br>用于执行任何SQL语句，一般用于执行DDL语句。</p>\n</li>\n<li><p>update/batchUpdate<br>update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句。</p>\n</li>\n<li><p>query/queryForXXX<br>用于执行查询相关语句。</p>\n</li>\n<li><p>call<br>用于执行存储过程、函数相关语句。</p>\n</li>\n</ul>\n<h5 id=\"JdbcTemplate类支持的回调类\"><a href=\"#JdbcTemplate类支持的回调类\" class=\"headerlink\" title=\"JdbcTemplate类支持的回调类\"></a>JdbcTemplate类支持的回调类</h5><h6 id=\"预编译语句及存储过程创建回调\"><a href=\"#预编译语句及存储过程创建回调\" class=\"headerlink\" title=\"预编译语句及存储过程创建回调\"></a>预编译语句及存储过程创建回调</h6><p>用于根据JdbcTemplate提供的连接创建相应的语句</p>\n<ul>\n<li><p>PreparedStatementCreator<br>通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的PreparedStatement</p>\n</li>\n<li><p>CallableStatementCreator<br>通过回调获取JdbcTemplate提供的Connection，由用户使用该Conncetion创建相关的CallableStatement</p>\n</li>\n</ul>\n<h6 id=\"预编译语句设值回调\"><a href=\"#预编译语句设值回调\" class=\"headerlink\" title=\"预编译语句设值回调\"></a>预编译语句设值回调</h6><p>用于给预编译语句相应参数设值</p>\n<ul>\n<li><p>PreparedStatementSetter<br>通过回调获取JdbcTemplate提供的PreparedStatement，由用户来对相应的预编译语句相应参数设值</p>\n</li>\n<li><p>BatchPreparedStatementSetter<br>类似于PreparedStatementSetter，但用于批处理，需要指定批处理大小</p>\n</li>\n</ul>\n<h6 id=\"自定义功能回调\"><a href=\"#自定义功能回调\" class=\"headerlink\" title=\"自定义功能回调\"></a>自定义功能回调</h6><p>提供给用户一个扩展点，用户可以在指定类型的扩展点执行任何数量需要的操作</p>\n<ul>\n<li><p>ConnectionCallback<br>通过回调获取JdbcTemplate提供的Connection，用户可在该Connection执行任何数量的操作</p>\n</li>\n<li><p>StatementCallback<br>通过回调获取JdbcTemplate提供的Statement，用户可以在该Statement执行任何数量的操作</p>\n</li>\n<li><p>PreparedStatementCallback<br>通过回调获取JdbcTemplate提供的PreparedStatement，用户可以在该PreparedStatement执行任何数量的操作</p>\n</li>\n<li><p>CallableStatementCallback<br>通过回调获取JdbcTemplate提供的CallableStatement，用户可以在该CallableStatement执行任何数量的操作</p>\n</li>\n</ul>\n<h6 id=\"结果集处理回调\"><a href=\"#结果集处理回调\" class=\"headerlink\" title=\"结果集处理回调\"></a>结果集处理回调</h6><p>通过回调处理ResultSet或将ResultSet转换为需要的形式</p>\n<ul>\n<li><p>RowMapper<br>用于将结果集每行数据转换为需要的类型，用户需实现方法mapRow(ResultSet rs, int rowNum)来完成将每行数据转换为相应的类型</p>\n</li>\n<li><p>RowCallbackHandler<br>用于处理ResultSet的每一行结果，用户需实现方法processRow(ResultSet rs)来完成处理，在该回调方法中无需执行rs.next()，该操作由JdbcTemplate来执行，用户只需按行获取数据然后处理即可</p>\n</li>\n<li><p>ResultSetExtractor<br>用于结果集数据提取，用户需实现方法extractData(ResultSet rs)来处理结果集，用户必须处理整个结果集</p>\n</li>\n</ul>\n<h4 id=\"JdbcTemplate测试\"><a href=\"#JdbcTemplate测试\" class=\"headerlink\" title=\"JdbcTemplate测试\"></a>JdbcTemplate测试</h4><p>使用JdbcTemplate模板类时必须通过DataSource获取数据库连接，然后在使用JdbcTemplate模板对数据库进行操作。</p>\n<h5 id=\"未使用回调\"><a href=\"#未使用回调\" class=\"headerlink\" title=\"未使用回调\"></a>未使用回调</h5><p>JdbcTemplate提供更简单的queryForXXX方法，来简化开发，参考一下代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 测试spring JdbcTemplate</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSpringJdbc() throws IOException &#123;</div><div class=\"line\">\t//读取配置文件的数据源配置</div><div class=\"line\">\tProperties properties = new Properties();</div><div class=\"line\">\tInputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;database.properties&quot;);</div><div class=\"line\">\tproperties.load(in);</div><div class=\"line\">\tString url = properties.getProperty(&quot;jdbc.url&quot;);</div><div class=\"line\">\tString username = properties.getProperty(&quot;jdbc.username&quot;);</div><div class=\"line\">\tString password = properties.getProperty(&quot;jdbc.password&quot;);</div><div class=\"line\">\tString driver = properties.getProperty(&quot;jdbc.driver&quot;);</div><div class=\"line\">\t//使用alibaba的DruidDataSource</div><div class=\"line\">\tDruidDataSource dataSource = new DruidDataSource();</div><div class=\"line\">\tdataSource.setPassword(password);</div><div class=\"line\">\tdataSource.setUrl(url);</div><div class=\"line\">\tdataSource.setUsername(username);</div><div class=\"line\">\tdataSource.setDriverClassName(driver);</div><div class=\"line\">\tdataSource.setInitialSize(2);</div><div class=\"line\">\tdataSource.setMinIdle(2);</div><div class=\"line\">\tdataSource.setMaxActive(10);</div><div class=\"line\">\tdataSource.setMaxWait(60000);</div><div class=\"line\">\tdataSource.setTimeBetweenEvictionRunsMillis(5000);</div><div class=\"line\">\tdataSource.setMinEvictableIdleTimeMillis(120000);</div><div class=\"line\">\t//new一个jdbctemplate</div><div class=\"line\">\tJdbcTemplate jt = new JdbcTemplate(dataSource);</div><div class=\"line\">\t//测试查询，直接返回List&lt;Map&lt;String,Object&gt;&gt;结果</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryForList = jt.queryForList(&quot;select * from t_users&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;查询结果：&quot;+queryForList.toString());</div><div class=\"line\">\t//测试增加</div><div class=\"line\">//\tint update = jt.update(&quot;INSERT INTO t_users(name,email)VALUES(&apos;王五&apos;,&apos;wangwu@163.com&apos;)&quot;);</div><div class=\"line\">//\tSystem.out.println(&quot;增加结果：&quot;+update);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"结果集回调\"><a href=\"#结果集回调\" class=\"headerlink\" title=\"结果集回调\"></a>结果集回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 测试spring JdbcTemplate 结果集回调</div><div class=\"line\">*/</div><div class=\"line\">@Test</div><div class=\"line\">public void testSpringJdbcResult() throws IOException &#123;</div><div class=\"line\">    //读取配置文件的数据源配置</div><div class=\"line\">    Properties properties = new Properties();</div><div class=\"line\">    InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;database.properties&quot;);</div><div class=\"line\">    properties.load(in);</div><div class=\"line\">    String url = properties.getProperty(&quot;jdbc.url&quot;);</div><div class=\"line\">    String username = properties.getProperty(&quot;jdbc.username&quot;);</div><div class=\"line\">    String password = properties.getProperty(&quot;jdbc.password&quot;);</div><div class=\"line\">    String driver = properties.getProperty(&quot;jdbc.driver&quot;);</div><div class=\"line\">    //使用alibaba的DruidDataSource</div><div class=\"line\">    DruidDataSource dataSource = new DruidDataSource();</div><div class=\"line\">    dataSource.setPassword(password);</div><div class=\"line\">    dataSource.setUrl(url);</div><div class=\"line\">    dataSource.setUsername(username);</div><div class=\"line\">    dataSource.setDriverClassName(driver);</div><div class=\"line\">    dataSource.setInitialSize(2);</div><div class=\"line\">    dataSource.setMinIdle(2);</div><div class=\"line\">    dataSource.setMaxActive(10);</div><div class=\"line\">    dataSource.setMaxWait(60000);</div><div class=\"line\">    dataSource.setTimeBetweenEvictionRunsMillis(5000);</div><div class=\"line\">    dataSource.setMinEvictableIdleTimeMillis(120000);</div><div class=\"line\">    //new一个jdbctemplate</div><div class=\"line\">    JdbcTemplate jt = new JdbcTemplate(dataSource);</div><div class=\"line\">    //测试RowMapper结果集回调</div><div class=\"line\">//\t\tList&lt;Map&lt;String, Object&gt;&gt; query = jt.query(&quot;select * from t_users&quot;, new RowMapper&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">//\t\t\t@Override</div><div class=\"line\">//\t\t\tpublic Map&lt;String, Object&gt; mapRow(ResultSet rs, int rowNum) throws SQLException &#123;</div><div class=\"line\">//\t\t\t\tMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();</div><div class=\"line\">//\t\t\t\tresult.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;name&quot;, rs.getString(&quot;name&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;email&quot;, rs.getString(&quot;email&quot;));</div><div class=\"line\">//\t\t\t\treturn result;</div><div class=\"line\">//\t\t\t&#125;</div><div class=\"line\">//\t\t&#125;);</div><div class=\"line\">//\t\tSystem.out.println(&quot;RowMapper结果：&quot;+query.toString());</div><div class=\"line\"></div><div class=\"line\">    //测试RowCallbackHandler结果集回调</div><div class=\"line\">//\t\tList&lt;Map&lt;String, Object&gt;&gt; query = new ArrayList&lt;&gt;();</div><div class=\"line\">//\t\tjt.query(&quot;select * from t_users&quot;,new RowCallbackHandler() &#123;</div><div class=\"line\">//\t\t\t@Override</div><div class=\"line\">//\t\t\tpublic void processRow(ResultSet rs) throws SQLException &#123;</div><div class=\"line\">//\t\t\t\tMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();</div><div class=\"line\">//\t\t\t\tresult.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;name&quot;, rs.getString(&quot;name&quot;));</div><div class=\"line\">//\t\t\t\tresult.put(&quot;email&quot;, rs.getString(&quot;email&quot;));</div><div class=\"line\">//\t\t\t\tquery.add(result);</div><div class=\"line\">//\t\t\t&#125;</div><div class=\"line\">//\t\t&#125;);</div><div class=\"line\">//\t\tSystem.out.println(&quot;RowCallbackHandler结果：&quot;+query.toString());</div><div class=\"line\"></div><div class=\"line\">//测试ResultSetExtractor结果集回调,必须手动处理整个结果集</div><div class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; query = jt.query(&quot;select * from t_users&quot;, new ResultSetExtractor&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;</div><div class=\"line\">    \t@Override</div><div class=\"line\">    \tpublic List&lt;Map&lt;String, Object&gt;&gt; extractData(ResultSet rs) throws SQLException, DataAccessException &#123;</div><div class=\"line\">    \t\tList&lt;Map&lt;String, Object&gt;&gt; resultList = new ArrayList&lt;&gt;();</div><div class=\"line\">    \t\twhile(rs.next())&#123;</div><div class=\"line\">    \t\t\tMap&lt;String, Object&gt; result = new HashMap&lt;&gt;();</div><div class=\"line\">    \t\t\tresult.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));</div><div class=\"line\">    \t\t\tresult.put(&quot;name&quot;, rs.getString(&quot;name&quot;));</div><div class=\"line\">    \t\t\tresult.put(&quot;email&quot;, rs.getString(&quot;email&quot;));</div><div class=\"line\">    \t\t\tresultList.add(result);</div><div class=\"line\">    \t\t&#125;</div><div class=\"line\">    \t\treturn resultList;</div><div class=\"line\">    \t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    System.out.println(&quot;ResultSetExtractor结果：&quot;+query.toString());</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"其他回调\"><a href=\"#其他回调\" class=\"headerlink\" title=\"其他回调\"></a>其他回调</h5><p>请参考其他文档，使用方法大同小异。</p>\n<h4 id=\"JdbcTemplate实践\"><a href=\"#JdbcTemplate实践\" class=\"headerlink\" title=\"JdbcTemplate实践\"></a>JdbcTemplate实践</h4><p>Spring JDBC都是与IOC容器一起使用，通过配置方式使用Spring JDBC，一般都是使用JdbcTemplate类，Spring JDBC通过实现DaoSupport来支持一致的数据库访问。</p>\n<h5 id=\"Spring-JDBC的DaoSupport实现\"><a href=\"#Spring-JDBC的DaoSupport实现\" class=\"headerlink\" title=\"Spring JDBC的DaoSupport实现\"></a>Spring JDBC的DaoSupport实现</h5><ul>\n<li>JdbcDaoSupport：用于支持一致的JdbcTemplate访问</li>\n<li>NamedParameterJdbcDaoSupport:继承JdbcDaoSupport，同时提供NamedParameterJdbcTemplate访问</li>\n<li>SimpleJdbcDaoSupport：继承JdbcDaoSupport，同时提供SimpleJdbcTemplate访问</li>\n</ul>\n<h5 id=\"定义表结构\"><a href=\"#定义表结构\" class=\"headerlink\" title=\"定义表结构\"></a>定义表结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">DROP TABLE IF EXISTS `t_users`;</div><div class=\"line\">CREATE TABLE `t_users` (</div><div class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">  `name` varchar(50) DEFAULT NULL,</div><div class=\"line\">  `email` varchar(100) DEFAULT NULL,</div><div class=\"line\">  PRIMARY KEY (`id`)</div><div class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</div><div class=\"line\"></div><div class=\"line\">-- ----------------------------</div><div class=\"line\">-- Records of t_users</div><div class=\"line\">-- ----------------------------</div><div class=\"line\">INSERT INTO `t_users` VALUES (&apos;1&apos;, &apos;Andy&apos;, &apos;song@foxmail.com&apos;);</div></pre></td></tr></table></figure>\n<h5 id=\"定义DAO\"><a href=\"#定义DAO\" class=\"headerlink\" title=\"定义DAO\"></a>定义DAO</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface UserDao &#123;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 增加用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint addUser(User user);</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 查询用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser();</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 删除用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint delUserById(Long id);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"定义DAO的实现类\"><a href=\"#定义DAO的实现类\" class=\"headerlink\" title=\"定义DAO的实现类\"></a>定义DAO的实现类</h5><p><strong>ps:实现类继承JdbcDaoSupport</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserDaoImpl extends JdbcDaoSupport implements UserDao&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\treturn getJdbcTemplate().update(&quot;INSERT INTO t_users(name,email)VALUES(?,?)&quot;, user.getName(),user.getEmail());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn getJdbcTemplate().queryForList(&quot;SELECT * FROM t_users&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn getJdbcTemplate().update(&quot;delete from t_users where id=?&quot;,id);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"定义service的实现类\"><a href=\"#定义service的实现类\" class=\"headerlink\" title=\"定义service的实现类\"></a>定义service的实现类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserServiceImpl implements UserService &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate UserDao userDao;\t</div><div class=\"line\">\t</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\treturn userDao.addUser(user);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn userDao.queryUser();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn userDao. delUserById(id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic UserDao getUserDao() &#123;</div><div class=\"line\">\t\treturn userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setUserDao(UserDao userDao) &#123;</div><div class=\"line\">\t\tthis.userDao = userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"xml文件配置\"><a href=\"#xml文件配置\" class=\"headerlink\" title=\"xml文件配置\"></a>xml文件配置</h5><ul>\n<li><p>数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</div><div class=\"line\">jdbc.url=jdbc:mysql://127.0.0.1/test?allowMultiQueries=true&amp;zeroDateTimeBehavior=convertToNull&amp;noAccessToProcedureBodies=true&amp;characterEncoding=UTF-8</div><div class=\"line\">jdbc.username=root</div><div class=\"line\">jdbc.password=123456</div></pre></td></tr></table></figure>\n</li>\n<li><p>bean的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">        &lt;!-- 加载配置文件 --&gt;</div><div class=\"line\">        &lt;context:property-placeholder location=&quot;database.properties&quot;/&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 注入jdbcutil类，为了测试原生JDBC --&gt;</div><div class=\"line\">        &lt;bean id=&quot;jdbcTest&quot; class=&quot;com.szl.springjdbc.util.JdbcUtil&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 配置数据源 --&gt;</div><div class=\"line\">        &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;  </div><div class=\"line\">\t    destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;  </div><div class=\"line\">\t\t&lt;/bean&gt;</div><div class=\"line\"> \t \t\t </div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 定义抽象的abstractDao，其有一个dataSource属性，从而可以让继承的子类自动继承dataSource属性注入--&gt;</div><div class=\"line\">        &lt;bean id=&quot;abstractDao&quot; abstract=&quot;true&quot;&gt;</div><div class=\"line\">        \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">        &lt;/bean&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 注入UserDaoImpl类，为了测试使用jdbcTemplate, 继承abstractDao，从而继承dataSource注入--&gt;</div><div class=\"line\">        &lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.szl.springjdbc.dao.impl.UserDaoImpl&quot; parent=&quot;abstractDao&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 注入UserServiceImpl类，为了测试使用jdbcTemplate  --&gt;</div><div class=\"line\">        &lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.szl.springjdbc.service.impl.UserServiceImpl&quot;&gt;</div><div class=\"line\">        \t&lt;property name=&quot;userDao&quot; ref=&quot;userDaoImpl&quot;&gt;&lt;/property&gt;</div><div class=\"line\">        &lt;/bean&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class JdbcTemplateTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate ApplicationContext ac;</div><div class=\"line\">\t</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void inti() &#123;</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;jdbc_test.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 测试jdbcTemplate编程_查询</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testJdbcTemplateQuery() &#123;</div><div class=\"line\">\t\tUserServiceImpl userServiceImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\t\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userServiceImpl.queryUser();</div><div class=\"line\">\t\tSystem.out.println(&quot;查询数据：&quot;+queryUser.toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 测试jdbcTemplate编程_添加</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testJdbcTemplateAdd() &#123;</div><div class=\"line\">\t\tUserServiceImpl userServiceImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\t\tUser user = new User();</div><div class=\"line\">\t\tuser.setName(&quot;李四&quot;);</div><div class=\"line\">\t\tuser.setEmail(&quot;lisi@foxmail.com&quot;);</div><div class=\"line\">\t\tSystem.out.println(&quot;result:&quot;+userServiceImpl.addUser(user));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 测试jdbcTemplate编程_删除</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testJdbcTemplateDel() &#123;</div><div class=\"line\">\t\tUserServiceImpl userServiceImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\t\tSystem.out.println(&quot;result:&quot;+userServiceImpl.delUserById(1L));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\">更多信息，请前往官网介绍</a></p>\n"},{"title":"第六篇之Spring ORM","date":"2017-06-05T06:56:00.000Z","_content":"\n## ORM是什么?\n\n> 对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换\n\n常见的ORM框架有JPA、MYBATIS、HIBERNATE等。\n\n## Spring对ORM的支持\n\nSpring对ORM的支持主要表现在以下方面\n\n### 一致的异常体系结构\nSpring提供了一种方便的方法，把特定于某种技术的异常，如SQLException， 转化为自己的异常，这种异常属于以 DataAccessException为根的异常层次。这些异常封装了原始异常对象，这样就不会有丢失任何错误信息的风险。\n\n###  一致的DAO抽象支持\n为了便于以一种一致的方式使用各种数据访问技术，如JDBC、JDO和Hibernate， Spring提供了一套抽象DAO类扩展。这些抽象类提供了一些方法，通过它们可以 获得与当前使用的数据访问技术相关的数据源和其他配置信息。\n\n- JdbcDaoSupport：JDBC数据访问对象的基类。 需要一个DataSource，同时为子类提供 JdbcTemplate。\n\n- HibernateDaoSupport： Hibernate数据访问对象的基类。 需要一个SessionFactory，同时为子类提供 HibernateTemplate。也可以选择直接通过 提供一个HibernateTemplate来初始化。\n\n- JdoDaoSupport：JDO数据访问对象的基类。 需要设置一个PersistenceManagerFactory， 同时为子类提供JdoTemplate。\n- JpaDaoSupport：JPA数据访问对象的基类。 需要一个EntityManagerFactory，同时 为子类提供JpaTemplate。\n\n### Spring事务管理\nSpring对所有数据访问提供一致的事务管理，通过配置方式，简化事务管理。\n\n---\n\n**本文主要记录Spring和Mybatis的集成**\n\n## Spring集成Mybatis?\n\n### Mybatis介绍\n[了解Mybatis,请点击前往](http://www.mybatis.org/mybatis-3/zh/index.html)\n\n### 如何集成\n#### 简单介绍\n> MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。 使用这个类库中的类, Spring 将会加载必要的 MyBatis 工厂类和 session 类。 这个类库也提供一个简单的方式来注入 MyBatis 数据映射器和 SqlSession 到业务层的 bean 中。 而且它也会处理事务, 翻译 MyBatis 的异常到 Spring 的 DataAccessException 异常(数据访问异常,译者注)中。最终,它并 不会依赖于 MyBatis,Spring 或 MyBatis-Spring 来构建应用程序代码。\n要使用 MyBatis-Spring 模块,你只需要包含 mybatis-spring-x.x.x.jar 文 件就可以了,并在类路径中加入相关的依赖。\n\n> 如果你使用 Maven,那么在 pom.xml 中加入下面的代码即可:\n```\n<dependency>\n  <groupId>org.mybatis</groupId>\n  <artifactId>mybatis-spring</artifactId>\n  <version>x.x.x</version>\n</dependency>\n```\n#### 配置\n##### Spring XML配置\n\n1.dataSource\n\n配置数据源，此处我们使用dbcp2数据源\n\n2.SqlSessionFactoryBean\n\n- 用来集成Mybatis,它会创建SqlSessionFactory，SqlSessionFactory需要一个DataSource \n- `configLocation`用来指定Mybatis的配置文件路径及名称\n- `mapperLocations`用来指定Mybatis的XML映射文件\n\n新建orm_test.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n       \t<!-- 读取配置文件 -->\n        <context:property-placeholder location=\"database.properties\"/>\n        \n        <!-- 配置数据源 -->\n        <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"  \n\t    destroy-method=\"close\">  \n\t\t    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />  \n\t\t    <property name=\"url\" value=\"${jdbc.url}\" />  \n\t\t    <property name=\"username\" value=\"${jdbc.username}\" />  \n\t\t    <property name=\"password\" value=\"${jdbc.password}\" />  \n\t\t</bean>\n \t \t\n \t \t<!-- 在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。而在 MyBatis-Spring 中,则使用 SqlSessionFactoryBean 来替代 -->\n \t \t<!-- sqlSessionFactory配置 -->\t \n \t \t<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n \t \t\t<!-- 指定数据源 -->\n\t \t \t<property name=\"dataSource\" ref=\"dataSource\"></property>\n\t \t \t<!-- 指定mybatis配置文件 -->\n\t\t\t<property name=\"configLocation\" value=\"classpath:configuration.xml\"/> \n\t\t\t<property name=\"mapperLocations\" value=\"classpath*:com/szl/springorm/dao/impl/*.xml\"></property>\n \t \t</bean>\n<beans> \t\n\n```\n\n##### Mybatis XML配置\n\n新建configuration.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n\t<settings>  \n        <setting name=\"cacheEnabled\" value=\"false\"/>  \n    </settings>  \n</configuration>  \n\n```\n\n[更多详细配置介绍,点击进入官网](http://www.mybatis.org/mybatis-3/zh/configuration.html)\n\n##### Mybatis 映射文件配置\n- DAO接口\n```\npublic interface UserDao {\n\t/**\n\t * 增加用户\n\t * @return\n\t */\n\tint addUser(User user);\n\t\n\t/**\n\t * 查询用户\n\t * @return\n\t */\n\tList<Map<String, Object>> queryUser();\n\t\n\t/**\n\t * 删除用户\n\t * @return\n\t */\n\tint delUserById(Long id);\n\n}\n\n```\n\n- 映射XML文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<!-- 命名空间,指向DAO接口 -->\n<mapper namespace=\"com.szl.springorm.dao.UserDao\" >\n \n <!-- 查询用户 -->\n <select id=\"queryUser\" resultType=\"java.util.Map\">\n \tselect * from t_users\n </select>\n \n <!-- 新增用户 -->\n <insert id=\"addUser\" parameterType=\"com.szl.springorm.model.User\">\n \tINSERT INTO t_users(name,email)VALUES(#{user.name},#{user.email})\n </insert>\n \n <!-- 删除用户 -->\n <delete id=\"delUserById\" parameterType=\"java.lang.Long\">\n \tdelete from t_users where id=#{id}\n </delete>\n \n</mapper>\n\n```\n[更多映射文件配置介绍,点击进入官网](http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html)\n\n##### 测试一下\n\n```\npublic class SpringOrmTest {\n\t\n\tprivate ApplicationContext ac;\n\t\n\t@Before\n\tpublic void init() {\n\t\tac = new ClassPathXmlApplicationContext(\"orm_test.xml\");\n\t}\n\t\n\t/**\n\t * 使用SqlSession进行数据库操作\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testSqlSession() {\n\t\t/**\n\t\t * 直接使用SqlSession进行数据库操作（使用指定的完全限定名“com.szl.springorm.dao.UserDao.queryUser”来调用映射语句）\n\t\t */\n\t\tSqlSession ss = null;\n\t\ttry {\n\t\t\tSqlSessionFactory ssf = ac.getBean(\"sqlSessionFactory\",SqlSessionFactory.class);\n\t\t\tss = ssf.openSession();\n\t\t\tList<Map<String, Object>> selectList = ss.selectList(\"com.szl.springorm.dao.UserDao.queryUser\");\n\t\t\tSystem.out.println(\"testSqlSession:\"+selectList.toString());\n\t\t\tss.commit();\n\t\t} catch (Exception e) {\n\t\t\t//异常回滚\n\t\t\tSystem.out.println(\"异常：\"+e);\n\t\t\tss.rollback();\n\t\t}\n\t\tfinally {\n\t\t\tif(null != ss)\n\t\t\t\tss.close();\n\t\t}\n\t\t/**\n\t\t * 直接使用SqlSession进行数据库操作（使用Mapper 接口）\n\t\t */\n//\t\tUserDao mapper = ss.getMapper(UserDao.class);\n//\t\tSystem.out.println(\"mapper:\"+mapper.queryUser().toString());\n\t}\n\n}\n```\n\n##### 总结\n\n> 使用SqlSessionFactory来创建 SqlSession。一旦你获得一个session之后,你可以使用它来执行映射语句,提交或回滚连接,最后,当不再需要它的时候, 你可以关闭session\n\n这样操作依旧繁琐，MyBatis-Spring提供了SqlSessionTemplate，qlSessionTemplate是 MyBatis-Spring 的核心。 这个类负责管理 MyBatis的SqlSession,调用MyBatis的SQL方法, 翻译异常。\nSqlSessionTemplate 是线程安全的, 可以被多个 DAO 所共享使用。\n\n### 使用SqlSessionTemplate\n\n#### Spring XMl配置\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  \t<!-- 指定数据源 -->\n  \t<property name=\"dataSource\" ref=\"dataSource\"></property>\n  \t<!-- 指定mybatis配置文件 -->\n\t<property name=\"configLocation\" value=\"classpath:configuration.xml\"/> \n\t<property name=\"mapperLocations\" value=\"classpath*:com/szl/springorm/dao/impl/*.xml\"></property>\n</bean>\n  \t\n<!-- 1.使用sqlSessionTemplate,注入sqlSessionFactory -->\n<bean id=\"sqlSessionTemplate\" class=\"org.mybatis.spring.SqlSessionTemplate\">\n  <constructor-arg name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"></constructor-arg>\n</bean>\n\n```\n\n#### 测试一下\n\n```\n\n/**\n * 使用SqlSessionTemplate进行数据库操作\n * SqlSessionTemplate 是 MyBatis-Spring 的核心。\n * 这个类负责管理 MyBatis 的 SqlSession, 调用 MyBatis 的 SQL 方法, 翻译异常。 SqlSessionTemplate       是线程安全的, 可以被多个 DAO 所共享使用\n */\n@Test\npublic void testSqlSessionTemplate(){\n\tSqlSession ss = ac.getBean(\"sqlSessionTemplate\",SqlSession.class);\n\tList<Map<String, Object>> selectList = ss.selectList(\"com.szl.springorm.dao.UserDao.queryUser\");\n\tSystem.out.println(\"testSqlSessionTemplate:\"+selectList.toString());\n}\n\n```\n\n### 使用sqlSessionDaoSupport\n\nSqlSessionDaoSupport是一个抽象的支持类, 用来提供 SqlSession 。调用getSqlSession()方法会得到一个 SqlSessionTemplate,之后可以用于执行SQL方法\n\n#### DAO的实现\n**使用SqlSessionDaoSupport的方法，需要编写DAO的实现类**\n\n```\n/**\n * \n * SqlSessionDaoSupport 是 一 个 抽象 的支 持 类, 提供 SqlSession.\n * 调 用 getSqlSession()方法你会得到一个 SqlSessionTemplate,之后可以用于执行 SQL 方法\n * \n * 使用SqlSessionDaoSupport的方法，需要编写DAO的实现类\n * @author SongZhangLiang\n */\npublic class UserDaoImpl extends SqlSessionDaoSupport implements UserDao{\n\n\t@Override\n\tpublic int addUser(User user) {\n\t\treturn this.getSqlSession().insert(\"com.szl.springorm.dao.UserDao.addUser\", user);\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn this.getSqlSession().selectList(\"com.szl.springorm.dao.UserDao.queryUser\");\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn this.getSqlSession().delete(\"com.szl.springorm.dao.UserDao.delUserById\",id);\n\t}\n\n}\n\n```\n\n#### Spring XML配置\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  <!-- 指定数据源 -->\n  <property name=\"dataSource\" ref=\"dataSource\"></property>\n  <!-- 指定mybatis配置文件 -->\n<property name=\"configLocation\" value=\"classpath:configuration.xml\"/> \n<property name=\"mapperLocations\" value=\"classpath*:com/szl/springorm/dao/impl/*.xml\"></property>\n</bean>\n\n<!-- 2.使用sqlSessionDaoSupport,注入sqlSessionFactory-->\n<bean id=\"userDaoImpl\" class=\"com.szl.springorm.dao.impl.UserDaoImpl\">\n  <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n</bean>\n\n```\n\n#### 测试一下\n\n```\n/**\n * 使用SqlSessionDaoSupport进行数据库操作\n * DAO的实现类必须要继承SqlSessionDaoSupport\n * @author SongZhangLiang\n */\n@Test\npublic void testSqlSessionDaoSupport(){\n\tUserDaoImpl userDaoImpl = ac.getBean(\"userDaoImpl\",UserDaoImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testSqlSessionDaoSupport:\"+queryUser.toString());\n}\n\n```\n\n### 使用MapperFactoryBean动态代理\n\n为了代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate 编写数据访问对象 (DAO)的代码，MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean\n\n#### 编写DAO\n\n```\npublic interface UserDao1 {\n/**\n * 增加用户\n * @return\n */\nint addUser(User user);\n\n/**\n * 查询用户\n * @return\n */\nList<Map<String, Object>> queryUser();\n\n/**\n * 删除用户\n * @return\n */\nint delUserById(Long id);\n\n}\n\n```\n\n#### 编写Service实现类\n\n```\npublic class UserServiceImpl implements UserService {\n\t\n\n\tprivate UserDao1 userDao1;\n\t\n    //增加set方法,方便注入\n\tpublic void setUserDao1(UserDao1 userDao1) {\n\t\tthis.userDao1 = userDao1;\n\t}\n\n\t@Override\n\tpublic int addUser(User user) {\n\t\treturn userDao1.addUser(user);\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn userDao1.queryUser();\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn userDao1.delUserById(id);\n\t}\n\t\n\n```\n\n#### Spring XML配置\n\n```\n<!-- 1.注册MapperFactoryBean -->\t\n<bean id=\"userDao1\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\">\n  <!-- 注册映射器,也就是DAO接口 -->\n  <property name=\"mapperInterface\" value=\"com.szl.springorm.dao.UserDao1\"></property>\n  <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n</bean>\n<!-- 2.service中直接注入userDao --> \t \t\n<bean id=\"userServiceImpl\" class=\"com.szl.springorm.service.impl.UserServiceImpl\">\n  <property name=\"userDao1\" ref=\"userDao1\"></property>\n</bean>\n\n```\n\n#### 测试一下\n\n```\n/**\n * 使用MapperFactoryBean代理\n * 注意在这段代码中没有 SqlSession 或 MyBatis 的引用。也没有任何需要创建,打开或 关闭 session 的代码,MyBatis-Spring 会来关心它的。\n * @author SongZhangLiang\n */\n@Test\npublic void testMapperFactoryBean(){\n\tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testMapperFactoryBean:\"+queryUser.toString());\n}\n\n```\n\n#### 总结\n\n如果有大量的映射文件，那么就需要在XML中配置大量的MapperFactoryBean，这样XML会非常的臃肿，为此MyBatis-Spring提供了MapperScannerConfigurer， 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。\n\n配置如下：\n> basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。\nMapperScannerConfigurer 属性不支持使用了 PropertyPlaceholderConfigurer 的属 性替换,因为会在 Spring 其中之前来它加载。但是,你可以使用 PropertiesFactoryBean 和 SpEL 表达式来作为替代。\n\n```\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n  <!--basePackage属性是为映射器接口文件设置基本的包路径,也就是DAO的包-->\n  <property name=\"basePackage\" value=\"com.szl.springorm.dao\"></property>\n  <!-- 一个数据源，可以不配置sqlSessionFactory -->\n  <!-- <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" /> -->\n</bean>\t\n\n```\n","source":"_posts/编程/spring/第六篇之Spring ORM.md","raw":"---\ntitle: 第六篇之Spring ORM\ndate: 2017-06-5 14:56\ncategories: Spring的那点事\ntags: Spring\n---\n\n## ORM是什么?\n\n> 对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换\n\n常见的ORM框架有JPA、MYBATIS、HIBERNATE等。\n\n## Spring对ORM的支持\n\nSpring对ORM的支持主要表现在以下方面\n\n### 一致的异常体系结构\nSpring提供了一种方便的方法，把特定于某种技术的异常，如SQLException， 转化为自己的异常，这种异常属于以 DataAccessException为根的异常层次。这些异常封装了原始异常对象，这样就不会有丢失任何错误信息的风险。\n\n###  一致的DAO抽象支持\n为了便于以一种一致的方式使用各种数据访问技术，如JDBC、JDO和Hibernate， Spring提供了一套抽象DAO类扩展。这些抽象类提供了一些方法，通过它们可以 获得与当前使用的数据访问技术相关的数据源和其他配置信息。\n\n- JdbcDaoSupport：JDBC数据访问对象的基类。 需要一个DataSource，同时为子类提供 JdbcTemplate。\n\n- HibernateDaoSupport： Hibernate数据访问对象的基类。 需要一个SessionFactory，同时为子类提供 HibernateTemplate。也可以选择直接通过 提供一个HibernateTemplate来初始化。\n\n- JdoDaoSupport：JDO数据访问对象的基类。 需要设置一个PersistenceManagerFactory， 同时为子类提供JdoTemplate。\n- JpaDaoSupport：JPA数据访问对象的基类。 需要一个EntityManagerFactory，同时 为子类提供JpaTemplate。\n\n### Spring事务管理\nSpring对所有数据访问提供一致的事务管理，通过配置方式，简化事务管理。\n\n---\n\n**本文主要记录Spring和Mybatis的集成**\n\n## Spring集成Mybatis?\n\n### Mybatis介绍\n[了解Mybatis,请点击前往](http://www.mybatis.org/mybatis-3/zh/index.html)\n\n### 如何集成\n#### 简单介绍\n> MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。 使用这个类库中的类, Spring 将会加载必要的 MyBatis 工厂类和 session 类。 这个类库也提供一个简单的方式来注入 MyBatis 数据映射器和 SqlSession 到业务层的 bean 中。 而且它也会处理事务, 翻译 MyBatis 的异常到 Spring 的 DataAccessException 异常(数据访问异常,译者注)中。最终,它并 不会依赖于 MyBatis,Spring 或 MyBatis-Spring 来构建应用程序代码。\n要使用 MyBatis-Spring 模块,你只需要包含 mybatis-spring-x.x.x.jar 文 件就可以了,并在类路径中加入相关的依赖。\n\n> 如果你使用 Maven,那么在 pom.xml 中加入下面的代码即可:\n```\n<dependency>\n  <groupId>org.mybatis</groupId>\n  <artifactId>mybatis-spring</artifactId>\n  <version>x.x.x</version>\n</dependency>\n```\n#### 配置\n##### Spring XML配置\n\n1.dataSource\n\n配置数据源，此处我们使用dbcp2数据源\n\n2.SqlSessionFactoryBean\n\n- 用来集成Mybatis,它会创建SqlSessionFactory，SqlSessionFactory需要一个DataSource \n- `configLocation`用来指定Mybatis的配置文件路径及名称\n- `mapperLocations`用来指定Mybatis的XML映射文件\n\n新建orm_test.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n       \t<!-- 读取配置文件 -->\n        <context:property-placeholder location=\"database.properties\"/>\n        \n        <!-- 配置数据源 -->\n        <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"  \n\t    destroy-method=\"close\">  \n\t\t    <property name=\"driverClassName\" value=\"${jdbc.driver}\" />  \n\t\t    <property name=\"url\" value=\"${jdbc.url}\" />  \n\t\t    <property name=\"username\" value=\"${jdbc.username}\" />  \n\t\t    <property name=\"password\" value=\"${jdbc.password}\" />  \n\t\t</bean>\n \t \t\n \t \t<!-- 在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。而在 MyBatis-Spring 中,则使用 SqlSessionFactoryBean 来替代 -->\n \t \t<!-- sqlSessionFactory配置 -->\t \n \t \t<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n \t \t\t<!-- 指定数据源 -->\n\t \t \t<property name=\"dataSource\" ref=\"dataSource\"></property>\n\t \t \t<!-- 指定mybatis配置文件 -->\n\t\t\t<property name=\"configLocation\" value=\"classpath:configuration.xml\"/> \n\t\t\t<property name=\"mapperLocations\" value=\"classpath*:com/szl/springorm/dao/impl/*.xml\"></property>\n \t \t</bean>\n<beans> \t\n\n```\n\n##### Mybatis XML配置\n\n新建configuration.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n\t<settings>  \n        <setting name=\"cacheEnabled\" value=\"false\"/>  \n    </settings>  \n</configuration>  \n\n```\n\n[更多详细配置介绍,点击进入官网](http://www.mybatis.org/mybatis-3/zh/configuration.html)\n\n##### Mybatis 映射文件配置\n- DAO接口\n```\npublic interface UserDao {\n\t/**\n\t * 增加用户\n\t * @return\n\t */\n\tint addUser(User user);\n\t\n\t/**\n\t * 查询用户\n\t * @return\n\t */\n\tList<Map<String, Object>> queryUser();\n\t\n\t/**\n\t * 删除用户\n\t * @return\n\t */\n\tint delUserById(Long id);\n\n}\n\n```\n\n- 映射XML文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<!-- 命名空间,指向DAO接口 -->\n<mapper namespace=\"com.szl.springorm.dao.UserDao\" >\n \n <!-- 查询用户 -->\n <select id=\"queryUser\" resultType=\"java.util.Map\">\n \tselect * from t_users\n </select>\n \n <!-- 新增用户 -->\n <insert id=\"addUser\" parameterType=\"com.szl.springorm.model.User\">\n \tINSERT INTO t_users(name,email)VALUES(#{user.name},#{user.email})\n </insert>\n \n <!-- 删除用户 -->\n <delete id=\"delUserById\" parameterType=\"java.lang.Long\">\n \tdelete from t_users where id=#{id}\n </delete>\n \n</mapper>\n\n```\n[更多映射文件配置介绍,点击进入官网](http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html)\n\n##### 测试一下\n\n```\npublic class SpringOrmTest {\n\t\n\tprivate ApplicationContext ac;\n\t\n\t@Before\n\tpublic void init() {\n\t\tac = new ClassPathXmlApplicationContext(\"orm_test.xml\");\n\t}\n\t\n\t/**\n\t * 使用SqlSession进行数据库操作\n\t * @author SongZhangLiang\n\t */\n\t@Test\n\tpublic void testSqlSession() {\n\t\t/**\n\t\t * 直接使用SqlSession进行数据库操作（使用指定的完全限定名“com.szl.springorm.dao.UserDao.queryUser”来调用映射语句）\n\t\t */\n\t\tSqlSession ss = null;\n\t\ttry {\n\t\t\tSqlSessionFactory ssf = ac.getBean(\"sqlSessionFactory\",SqlSessionFactory.class);\n\t\t\tss = ssf.openSession();\n\t\t\tList<Map<String, Object>> selectList = ss.selectList(\"com.szl.springorm.dao.UserDao.queryUser\");\n\t\t\tSystem.out.println(\"testSqlSession:\"+selectList.toString());\n\t\t\tss.commit();\n\t\t} catch (Exception e) {\n\t\t\t//异常回滚\n\t\t\tSystem.out.println(\"异常：\"+e);\n\t\t\tss.rollback();\n\t\t}\n\t\tfinally {\n\t\t\tif(null != ss)\n\t\t\t\tss.close();\n\t\t}\n\t\t/**\n\t\t * 直接使用SqlSession进行数据库操作（使用Mapper 接口）\n\t\t */\n//\t\tUserDao mapper = ss.getMapper(UserDao.class);\n//\t\tSystem.out.println(\"mapper:\"+mapper.queryUser().toString());\n\t}\n\n}\n```\n\n##### 总结\n\n> 使用SqlSessionFactory来创建 SqlSession。一旦你获得一个session之后,你可以使用它来执行映射语句,提交或回滚连接,最后,当不再需要它的时候, 你可以关闭session\n\n这样操作依旧繁琐，MyBatis-Spring提供了SqlSessionTemplate，qlSessionTemplate是 MyBatis-Spring 的核心。 这个类负责管理 MyBatis的SqlSession,调用MyBatis的SQL方法, 翻译异常。\nSqlSessionTemplate 是线程安全的, 可以被多个 DAO 所共享使用。\n\n### 使用SqlSessionTemplate\n\n#### Spring XMl配置\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  \t<!-- 指定数据源 -->\n  \t<property name=\"dataSource\" ref=\"dataSource\"></property>\n  \t<!-- 指定mybatis配置文件 -->\n\t<property name=\"configLocation\" value=\"classpath:configuration.xml\"/> \n\t<property name=\"mapperLocations\" value=\"classpath*:com/szl/springorm/dao/impl/*.xml\"></property>\n</bean>\n  \t\n<!-- 1.使用sqlSessionTemplate,注入sqlSessionFactory -->\n<bean id=\"sqlSessionTemplate\" class=\"org.mybatis.spring.SqlSessionTemplate\">\n  <constructor-arg name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"></constructor-arg>\n</bean>\n\n```\n\n#### 测试一下\n\n```\n\n/**\n * 使用SqlSessionTemplate进行数据库操作\n * SqlSessionTemplate 是 MyBatis-Spring 的核心。\n * 这个类负责管理 MyBatis 的 SqlSession, 调用 MyBatis 的 SQL 方法, 翻译异常。 SqlSessionTemplate       是线程安全的, 可以被多个 DAO 所共享使用\n */\n@Test\npublic void testSqlSessionTemplate(){\n\tSqlSession ss = ac.getBean(\"sqlSessionTemplate\",SqlSession.class);\n\tList<Map<String, Object>> selectList = ss.selectList(\"com.szl.springorm.dao.UserDao.queryUser\");\n\tSystem.out.println(\"testSqlSessionTemplate:\"+selectList.toString());\n}\n\n```\n\n### 使用sqlSessionDaoSupport\n\nSqlSessionDaoSupport是一个抽象的支持类, 用来提供 SqlSession 。调用getSqlSession()方法会得到一个 SqlSessionTemplate,之后可以用于执行SQL方法\n\n#### DAO的实现\n**使用SqlSessionDaoSupport的方法，需要编写DAO的实现类**\n\n```\n/**\n * \n * SqlSessionDaoSupport 是 一 个 抽象 的支 持 类, 提供 SqlSession.\n * 调 用 getSqlSession()方法你会得到一个 SqlSessionTemplate,之后可以用于执行 SQL 方法\n * \n * 使用SqlSessionDaoSupport的方法，需要编写DAO的实现类\n * @author SongZhangLiang\n */\npublic class UserDaoImpl extends SqlSessionDaoSupport implements UserDao{\n\n\t@Override\n\tpublic int addUser(User user) {\n\t\treturn this.getSqlSession().insert(\"com.szl.springorm.dao.UserDao.addUser\", user);\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn this.getSqlSession().selectList(\"com.szl.springorm.dao.UserDao.queryUser\");\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn this.getSqlSession().delete(\"com.szl.springorm.dao.UserDao.delUserById\",id);\n\t}\n\n}\n\n```\n\n#### Spring XML配置\n\n```\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n  <!-- 指定数据源 -->\n  <property name=\"dataSource\" ref=\"dataSource\"></property>\n  <!-- 指定mybatis配置文件 -->\n<property name=\"configLocation\" value=\"classpath:configuration.xml\"/> \n<property name=\"mapperLocations\" value=\"classpath*:com/szl/springorm/dao/impl/*.xml\"></property>\n</bean>\n\n<!-- 2.使用sqlSessionDaoSupport,注入sqlSessionFactory-->\n<bean id=\"userDaoImpl\" class=\"com.szl.springorm.dao.impl.UserDaoImpl\">\n  <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n</bean>\n\n```\n\n#### 测试一下\n\n```\n/**\n * 使用SqlSessionDaoSupport进行数据库操作\n * DAO的实现类必须要继承SqlSessionDaoSupport\n * @author SongZhangLiang\n */\n@Test\npublic void testSqlSessionDaoSupport(){\n\tUserDaoImpl userDaoImpl = ac.getBean(\"userDaoImpl\",UserDaoImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testSqlSessionDaoSupport:\"+queryUser.toString());\n}\n\n```\n\n### 使用MapperFactoryBean动态代理\n\n为了代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate 编写数据访问对象 (DAO)的代码，MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean\n\n#### 编写DAO\n\n```\npublic interface UserDao1 {\n/**\n * 增加用户\n * @return\n */\nint addUser(User user);\n\n/**\n * 查询用户\n * @return\n */\nList<Map<String, Object>> queryUser();\n\n/**\n * 删除用户\n * @return\n */\nint delUserById(Long id);\n\n}\n\n```\n\n#### 编写Service实现类\n\n```\npublic class UserServiceImpl implements UserService {\n\t\n\n\tprivate UserDao1 userDao1;\n\t\n    //增加set方法,方便注入\n\tpublic void setUserDao1(UserDao1 userDao1) {\n\t\tthis.userDao1 = userDao1;\n\t}\n\n\t@Override\n\tpublic int addUser(User user) {\n\t\treturn userDao1.addUser(user);\n\t}\n\n\t@Override\n\tpublic List<Map<String, Object>> queryUser() {\n\t\treturn userDao1.queryUser();\n\t}\n\n\t@Override\n\tpublic int delUserById(Long id) {\n\t\treturn userDao1.delUserById(id);\n\t}\n\t\n\n```\n\n#### Spring XML配置\n\n```\n<!-- 1.注册MapperFactoryBean -->\t\n<bean id=\"userDao1\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\">\n  <!-- 注册映射器,也就是DAO接口 -->\n  <property name=\"mapperInterface\" value=\"com.szl.springorm.dao.UserDao1\"></property>\n  <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n</bean>\n<!-- 2.service中直接注入userDao --> \t \t\n<bean id=\"userServiceImpl\" class=\"com.szl.springorm.service.impl.UserServiceImpl\">\n  <property name=\"userDao1\" ref=\"userDao1\"></property>\n</bean>\n\n```\n\n#### 测试一下\n\n```\n/**\n * 使用MapperFactoryBean代理\n * 注意在这段代码中没有 SqlSession 或 MyBatis 的引用。也没有任何需要创建,打开或 关闭 session 的代码,MyBatis-Spring 会来关心它的。\n * @author SongZhangLiang\n */\n@Test\npublic void testMapperFactoryBean(){\n\tUserServiceImpl userDaoImpl = ac.getBean(\"userServiceImpl\",UserServiceImpl.class);\n\tList<Map<String, Object>> queryUser = userDaoImpl.queryUser();\n\tSystem.out.println(\"testMapperFactoryBean:\"+queryUser.toString());\n}\n\n```\n\n#### 总结\n\n如果有大量的映射文件，那么就需要在XML中配置大量的MapperFactoryBean，这样XML会非常的臃肿，为此MyBatis-Spring提供了MapperScannerConfigurer， 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。\n\n配置如下：\n> basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。\nMapperScannerConfigurer 属性不支持使用了 PropertyPlaceholderConfigurer 的属 性替换,因为会在 Spring 其中之前来它加载。但是,你可以使用 PropertiesFactoryBean 和 SpEL 表达式来作为替代。\n\n```\n<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n  <!--basePackage属性是为映射器接口文件设置基本的包路径,也就是DAO的包-->\n  <property name=\"basePackage\" value=\"com.szl.springorm.dao\"></property>\n  <!-- 一个数据源，可以不配置sqlSessionFactory -->\n  <!-- <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" /> -->\n</bean>\t\n\n```\n","slug":"编程/spring/第六篇之Spring ORM","published":1,"updated":"2017-06-05T09:26:05.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lr000kpkqy4t8kva69","content":"<h2 id=\"ORM是什么\"><a href=\"#ORM是什么\" class=\"headerlink\" title=\"ORM是什么?\"></a>ORM是什么?</h2><blockquote>\n<p>对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换</p>\n</blockquote>\n<p>常见的ORM框架有JPA、MYBATIS、HIBERNATE等。</p>\n<h2 id=\"Spring对ORM的支持\"><a href=\"#Spring对ORM的支持\" class=\"headerlink\" title=\"Spring对ORM的支持\"></a>Spring对ORM的支持</h2><p>Spring对ORM的支持主要表现在以下方面</p>\n<h3 id=\"一致的异常体系结构\"><a href=\"#一致的异常体系结构\" class=\"headerlink\" title=\"一致的异常体系结构\"></a>一致的异常体系结构</h3><p>Spring提供了一种方便的方法，把特定于某种技术的异常，如SQLException， 转化为自己的异常，这种异常属于以 DataAccessException为根的异常层次。这些异常封装了原始异常对象，这样就不会有丢失任何错误信息的风险。</p>\n<h3 id=\"一致的DAO抽象支持\"><a href=\"#一致的DAO抽象支持\" class=\"headerlink\" title=\"一致的DAO抽象支持\"></a>一致的DAO抽象支持</h3><p>为了便于以一种一致的方式使用各种数据访问技术，如JDBC、JDO和Hibernate， Spring提供了一套抽象DAO类扩展。这些抽象类提供了一些方法，通过它们可以 获得与当前使用的数据访问技术相关的数据源和其他配置信息。</p>\n<ul>\n<li><p>JdbcDaoSupport：JDBC数据访问对象的基类。 需要一个DataSource，同时为子类提供 JdbcTemplate。</p>\n</li>\n<li><p>HibernateDaoSupport： Hibernate数据访问对象的基类。 需要一个SessionFactory，同时为子类提供 HibernateTemplate。也可以选择直接通过 提供一个HibernateTemplate来初始化。</p>\n</li>\n<li><p>JdoDaoSupport：JDO数据访问对象的基类。 需要设置一个PersistenceManagerFactory， 同时为子类提供JdoTemplate。</p>\n</li>\n<li>JpaDaoSupport：JPA数据访问对象的基类。 需要一个EntityManagerFactory，同时 为子类提供JpaTemplate。</li>\n</ul>\n<h3 id=\"Spring事务管理\"><a href=\"#Spring事务管理\" class=\"headerlink\" title=\"Spring事务管理\"></a>Spring事务管理</h3><p>Spring对所有数据访问提供一致的事务管理，通过配置方式，简化事务管理。</p>\n<hr>\n<p><strong>本文主要记录Spring和Mybatis的集成</strong></p>\n<h2 id=\"Spring集成Mybatis\"><a href=\"#Spring集成Mybatis\" class=\"headerlink\" title=\"Spring集成Mybatis?\"></a>Spring集成Mybatis?</h2><h3 id=\"Mybatis介绍\"><a href=\"#Mybatis介绍\" class=\"headerlink\" title=\"Mybatis介绍\"></a>Mybatis介绍</h3><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\" rel=\"external\">了解Mybatis,请点击前往</a></p>\n<h3 id=\"如何集成\"><a href=\"#如何集成\" class=\"headerlink\" title=\"如何集成\"></a>如何集成</h3><h4 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h4><blockquote>\n<p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。 使用这个类库中的类, Spring 将会加载必要的 MyBatis 工厂类和 session 类。 这个类库也提供一个简单的方式来注入 MyBatis 数据映射器和 SqlSession 到业务层的 bean 中。 而且它也会处理事务, 翻译 MyBatis 的异常到 Spring 的 DataAccessException 异常(数据访问异常,译者注)中。最终,它并 不会依赖于 MyBatis,Spring 或 MyBatis-Spring 来构建应用程序代码。<br>要使用 MyBatis-Spring 模块,你只需要包含 mybatis-spring-x.x.x.jar 文 件就可以了,并在类路径中加入相关的依赖。</p>\n<p>如果你使用 Maven,那么在 pom.xml 中加入下面的代码即可:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</div><div class=\"line\">  &lt;version&gt;x.x.x&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h5 id=\"Spring-XML配置\"><a href=\"#Spring-XML配置\" class=\"headerlink\" title=\"Spring XML配置\"></a>Spring XML配置</h5><p>1.dataSource</p>\n<p>配置数据源，此处我们使用dbcp2数据源</p>\n<p>2.SqlSessionFactoryBean</p>\n<ul>\n<li>用来集成Mybatis,它会创建SqlSessionFactory，SqlSessionFactory需要一个DataSource </li>\n<li><code>configLocation</code>用来指定Mybatis的配置文件路径及名称</li>\n<li><code>mapperLocations</code>用来指定Mybatis的XML映射文件</li>\n</ul>\n<p>新建orm_test.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">       \t&lt;!-- 读取配置文件 --&gt;</div><div class=\"line\">        &lt;context:property-placeholder location=&quot;database.properties&quot;/&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 配置数据源 --&gt;</div><div class=\"line\">        &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;  </div><div class=\"line\">\t    destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;  </div><div class=\"line\">\t\t&lt;/bean&gt;</div><div class=\"line\"> \t \t</div><div class=\"line\"> \t \t&lt;!-- 在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。而在 MyBatis-Spring 中,则使用 SqlSessionFactoryBean 来替代 --&gt;</div><div class=\"line\"> \t \t&lt;!-- sqlSessionFactory配置 --&gt;\t </div><div class=\"line\"> \t \t&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\"> \t \t\t&lt;!-- 指定数据源 --&gt;</div><div class=\"line\">\t \t \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">\t \t \t&lt;!-- 指定mybatis配置文件 --&gt;</div><div class=\"line\">\t\t\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:configuration.xml&quot;/&gt; </div><div class=\"line\">\t\t\t&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/szl/springorm/dao/impl/*.xml&quot;&gt;&lt;/property&gt;</div><div class=\"line\"> \t \t&lt;/bean&gt;</div><div class=\"line\">&lt;beans&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Mybatis-XML配置\"><a href=\"#Mybatis-XML配置\" class=\"headerlink\" title=\"Mybatis XML配置\"></a>Mybatis XML配置</h5><p>新建configuration.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; </div><div class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">\t&lt;settings&gt;  </div><div class=\"line\">        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;false&quot;/&gt;  </div><div class=\"line\">    &lt;/settings&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.mybatis.org/mybatis-3/zh/configuration.html\" target=\"_blank\" rel=\"external\">更多详细配置介绍,点击进入官网</a></p>\n<h5 id=\"Mybatis-映射文件配置\"><a href=\"#Mybatis-映射文件配置\" class=\"headerlink\" title=\"Mybatis 映射文件配置\"></a>Mybatis 映射文件配置</h5><ul>\n<li><p>DAO接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface UserDao &#123;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 增加用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint addUser(User user);</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 查询用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser();</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 删除用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint delUserById(Long id);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>映射XML文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</div><div class=\"line\">&lt;!-- 命名空间,指向DAO接口 --&gt;</div><div class=\"line\">&lt;mapper namespace=&quot;com.szl.springorm.dao.UserDao&quot; &gt;</div><div class=\"line\"> </div><div class=\"line\"> &lt;!-- 查询用户 --&gt;</div><div class=\"line\"> &lt;select id=&quot;queryUser&quot; resultType=&quot;java.util.Map&quot;&gt;</div><div class=\"line\"> \tselect * from t_users</div><div class=\"line\"> &lt;/select&gt;</div><div class=\"line\"> </div><div class=\"line\"> &lt;!-- 新增用户 --&gt;</div><div class=\"line\"> &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.szl.springorm.model.User&quot;&gt;</div><div class=\"line\"> \tINSERT INTO t_users(name,email)VALUES(#&#123;user.name&#125;,#&#123;user.email&#125;)</div><div class=\"line\"> &lt;/insert&gt;</div><div class=\"line\"> </div><div class=\"line\"> &lt;!-- 删除用户 --&gt;</div><div class=\"line\"> &lt;delete id=&quot;delUserById&quot; parameterType=&quot;java.lang.Long&quot;&gt;</div><div class=\"line\"> \tdelete from t_users where id=#&#123;id&#125;</div><div class=\"line\"> &lt;/delete&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/mapper&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html\" target=\"_blank\" rel=\"external\">更多映射文件配置介绍,点击进入官网</a></p>\n<h5 id=\"测试一下\"><a href=\"#测试一下\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SpringOrmTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate ApplicationContext ac;</div><div class=\"line\">\t</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init() &#123;</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;orm_test.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 使用SqlSession进行数据库操作</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testSqlSession() &#123;</div><div class=\"line\">\t\t/**</div><div class=\"line\">\t\t * 直接使用SqlSession进行数据库操作（使用指定的完全限定名“com.szl.springorm.dao.UserDao.queryUser”来调用映射语句）</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tSqlSession ss = null;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSqlSessionFactory ssf = ac.getBean(&quot;sqlSessionFactory&quot;,SqlSessionFactory.class);</div><div class=\"line\">\t\t\tss = ssf.openSession();</div><div class=\"line\">\t\t\tList&lt;Map&lt;String, Object&gt;&gt; selectList = ss.selectList(&quot;com.szl.springorm.dao.UserDao.queryUser&quot;);</div><div class=\"line\">\t\t\tSystem.out.println(&quot;testSqlSession:&quot;+selectList.toString());</div><div class=\"line\">\t\t\tss.commit();</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t//异常回滚</div><div class=\"line\">\t\t\tSystem.out.println(&quot;异常：&quot;+e);</div><div class=\"line\">\t\t\tss.rollback();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfinally &#123;</div><div class=\"line\">\t\t\tif(null != ss)</div><div class=\"line\">\t\t\t\tss.close();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t/**</div><div class=\"line\">\t\t * 直接使用SqlSession进行数据库操作（使用Mapper 接口）</div><div class=\"line\">\t\t */</div><div class=\"line\">//\t\tUserDao mapper = ss.getMapper(UserDao.class);</div><div class=\"line\">//\t\tSystem.out.println(&quot;mapper:&quot;+mapper.queryUser().toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><blockquote>\n<p>使用SqlSessionFactory来创建 SqlSession。一旦你获得一个session之后,你可以使用它来执行映射语句,提交或回滚连接,最后,当不再需要它的时候, 你可以关闭session</p>\n</blockquote>\n<p>这样操作依旧繁琐，MyBatis-Spring提供了SqlSessionTemplate，qlSessionTemplate是 MyBatis-Spring 的核心。 这个类负责管理 MyBatis的SqlSession,调用MyBatis的SQL方法, 翻译异常。<br>SqlSessionTemplate 是线程安全的, 可以被多个 DAO 所共享使用。</p>\n<h3 id=\"使用SqlSessionTemplate\"><a href=\"#使用SqlSessionTemplate\" class=\"headerlink\" title=\"使用SqlSessionTemplate\"></a>使用SqlSessionTemplate</h3><h4 id=\"Spring-XMl配置\"><a href=\"#Spring-XMl配置\" class=\"headerlink\" title=\"Spring XMl配置\"></a>Spring XMl配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\">  \t&lt;!-- 指定数据源 --&gt;</div><div class=\"line\">  \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  \t&lt;!-- 指定mybatis配置文件 --&gt;</div><div class=\"line\">\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:configuration.xml&quot;/&gt; </div><div class=\"line\">\t&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/szl/springorm/dao/impl/*.xml&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">  \t</div><div class=\"line\">&lt;!-- 1.使用sqlSessionTemplate,注入sqlSessionFactory --&gt;</div><div class=\"line\">&lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</div><div class=\"line\">  &lt;constructor-arg name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试一下-1\"><a href=\"#测试一下-1\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 使用SqlSessionTemplate进行数据库操作</div><div class=\"line\"> * SqlSessionTemplate 是 MyBatis-Spring 的核心。</div><div class=\"line\"> * 这个类负责管理 MyBatis 的 SqlSession, 调用 MyBatis 的 SQL 方法, 翻译异常。 SqlSessionTemplate       是线程安全的, 可以被多个 DAO 所共享使用</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSqlSessionTemplate()&#123;</div><div class=\"line\">\tSqlSession ss = ac.getBean(&quot;sqlSessionTemplate&quot;,SqlSession.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; selectList = ss.selectList(&quot;com.szl.springorm.dao.UserDao.queryUser&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;testSqlSessionTemplate:&quot;+selectList.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用sqlSessionDaoSupport\"><a href=\"#使用sqlSessionDaoSupport\" class=\"headerlink\" title=\"使用sqlSessionDaoSupport\"></a>使用sqlSessionDaoSupport</h3><p>SqlSessionDaoSupport是一个抽象的支持类, 用来提供 SqlSession 。调用getSqlSession()方法会得到一个 SqlSessionTemplate,之后可以用于执行SQL方法</p>\n<h4 id=\"DAO的实现\"><a href=\"#DAO的实现\" class=\"headerlink\" title=\"DAO的实现\"></a>DAO的实现</h4><p><strong>使用SqlSessionDaoSupport的方法，需要编写DAO的实现类</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * </div><div class=\"line\"> * SqlSessionDaoSupport 是 一 个 抽象 的支 持 类, 提供 SqlSession.</div><div class=\"line\"> * 调 用 getSqlSession()方法你会得到一个 SqlSessionTemplate,之后可以用于执行 SQL 方法</div><div class=\"line\"> * </div><div class=\"line\"> * 使用SqlSessionDaoSupport的方法，需要编写DAO的实现类</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao&#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\treturn this.getSqlSession().insert(&quot;com.szl.springorm.dao.UserDao.addUser&quot;, user);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn this.getSqlSession().selectList(&quot;com.szl.springorm.dao.UserDao.queryUser&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn this.getSqlSession().delete(&quot;com.szl.springorm.dao.UserDao.delUserById&quot;,id);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Spring-XML配置-1\"><a href=\"#Spring-XML配置-1\" class=\"headerlink\" title=\"Spring XML配置\"></a>Spring XML配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\">  &lt;!-- 指定数据源 --&gt;</div><div class=\"line\">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  &lt;!-- 指定mybatis配置文件 --&gt;</div><div class=\"line\">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:configuration.xml&quot;/&gt; </div><div class=\"line\">&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/szl/springorm/dao/impl/*.xml&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 2.使用sqlSessionDaoSupport,注入sqlSessionFactory--&gt;</div><div class=\"line\">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.szl.springorm.dao.impl.UserDaoImpl&quot;&gt;</div><div class=\"line\">  &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试一下-2\"><a href=\"#测试一下-2\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 使用SqlSessionDaoSupport进行数据库操作</div><div class=\"line\"> * DAO的实现类必须要继承SqlSessionDaoSupport</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSqlSessionDaoSupport()&#123;</div><div class=\"line\">\tUserDaoImpl userDaoImpl = ac.getBean(&quot;userDaoImpl&quot;,UserDaoImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testSqlSessionDaoSupport:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用MapperFactoryBean动态代理\"><a href=\"#使用MapperFactoryBean动态代理\" class=\"headerlink\" title=\"使用MapperFactoryBean动态代理\"></a>使用MapperFactoryBean动态代理</h3><p>为了代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate 编写数据访问对象 (DAO)的代码，MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean</p>\n<h4 id=\"编写DAO\"><a href=\"#编写DAO\" class=\"headerlink\" title=\"编写DAO\"></a>编写DAO</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface UserDao1 &#123;</div><div class=\"line\">/**</div><div class=\"line\"> * 增加用户</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">int addUser(User user);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 查询用户</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; queryUser();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 删除用户</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">int delUserById(Long id);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"编写Service实现类\"><a href=\"#编写Service实现类\" class=\"headerlink\" title=\"编写Service实现类\"></a>编写Service实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserServiceImpl implements UserService &#123;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\tprivate UserDao1 userDao1;</div><div class=\"line\">\t</div><div class=\"line\">    //增加set方法,方便注入</div><div class=\"line\">\tpublic void setUserDao1(UserDao1 userDao1) &#123;</div><div class=\"line\">\t\tthis.userDao1 = userDao1;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\treturn userDao1.addUser(user);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn userDao1.queryUser();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn userDao1.delUserById(id);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Spring-XML配置-2\"><a href=\"#Spring-XML配置-2\" class=\"headerlink\" title=\"Spring XML配置\"></a>Spring XML配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 1.注册MapperFactoryBean --&gt;\t</div><div class=\"line\">&lt;bean id=&quot;userDao1&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</div><div class=\"line\">  &lt;!-- 注册映射器,也就是DAO接口 --&gt;</div><div class=\"line\">  &lt;property name=&quot;mapperInterface&quot; value=&quot;com.szl.springorm.dao.UserDao1&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">&lt;!-- 2.service中直接注入userDao --&gt; \t \t</div><div class=\"line\">&lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.szl.springorm.service.impl.UserServiceImpl&quot;&gt;</div><div class=\"line\">  &lt;property name=&quot;userDao1&quot; ref=&quot;userDao1&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试一下-3\"><a href=\"#测试一下-3\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 使用MapperFactoryBean代理</div><div class=\"line\"> * 注意在这段代码中没有 SqlSession 或 MyBatis 的引用。也没有任何需要创建,打开或 关闭 session 的代码,MyBatis-Spring 会来关心它的。</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testMapperFactoryBean()&#123;</div><div class=\"line\">\tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testMapperFactoryBean:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>如果有大量的映射文件，那么就需要在XML中配置大量的MapperFactoryBean，这样XML会非常的臃肿，为此MyBatis-Spring提供了MapperScannerConfigurer， 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。</p>\n<p>配置如下：</p>\n<blockquote>\n<p>basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。<br>MapperScannerConfigurer 属性不支持使用了 PropertyPlaceholderConfigurer 的属 性替换,因为会在 Spring 其中之前来它加载。但是,你可以使用 PropertiesFactoryBean 和 SpEL 表达式来作为替代。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</div><div class=\"line\">  &lt;!--basePackage属性是为映射器接口文件设置基本的包路径,也就是DAO的包--&gt;</div><div class=\"line\">  &lt;property name=&quot;basePackage&quot; value=&quot;com.szl.springorm.dao&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  &lt;!-- 一个数据源，可以不配置sqlSessionFactory --&gt;</div><div class=\"line\">  &lt;!-- &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt; --&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ORM是什么\"><a href=\"#ORM是什么\" class=\"headerlink\" title=\"ORM是什么?\"></a>ORM是什么?</h2><blockquote>\n<p>对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换</p>\n</blockquote>\n<p>常见的ORM框架有JPA、MYBATIS、HIBERNATE等。</p>\n<h2 id=\"Spring对ORM的支持\"><a href=\"#Spring对ORM的支持\" class=\"headerlink\" title=\"Spring对ORM的支持\"></a>Spring对ORM的支持</h2><p>Spring对ORM的支持主要表现在以下方面</p>\n<h3 id=\"一致的异常体系结构\"><a href=\"#一致的异常体系结构\" class=\"headerlink\" title=\"一致的异常体系结构\"></a>一致的异常体系结构</h3><p>Spring提供了一种方便的方法，把特定于某种技术的异常，如SQLException， 转化为自己的异常，这种异常属于以 DataAccessException为根的异常层次。这些异常封装了原始异常对象，这样就不会有丢失任何错误信息的风险。</p>\n<h3 id=\"一致的DAO抽象支持\"><a href=\"#一致的DAO抽象支持\" class=\"headerlink\" title=\"一致的DAO抽象支持\"></a>一致的DAO抽象支持</h3><p>为了便于以一种一致的方式使用各种数据访问技术，如JDBC、JDO和Hibernate， Spring提供了一套抽象DAO类扩展。这些抽象类提供了一些方法，通过它们可以 获得与当前使用的数据访问技术相关的数据源和其他配置信息。</p>\n<ul>\n<li><p>JdbcDaoSupport：JDBC数据访问对象的基类。 需要一个DataSource，同时为子类提供 JdbcTemplate。</p>\n</li>\n<li><p>HibernateDaoSupport： Hibernate数据访问对象的基类。 需要一个SessionFactory，同时为子类提供 HibernateTemplate。也可以选择直接通过 提供一个HibernateTemplate来初始化。</p>\n</li>\n<li><p>JdoDaoSupport：JDO数据访问对象的基类。 需要设置一个PersistenceManagerFactory， 同时为子类提供JdoTemplate。</p>\n</li>\n<li>JpaDaoSupport：JPA数据访问对象的基类。 需要一个EntityManagerFactory，同时 为子类提供JpaTemplate。</li>\n</ul>\n<h3 id=\"Spring事务管理\"><a href=\"#Spring事务管理\" class=\"headerlink\" title=\"Spring事务管理\"></a>Spring事务管理</h3><p>Spring对所有数据访问提供一致的事务管理，通过配置方式，简化事务管理。</p>\n<hr>\n<p><strong>本文主要记录Spring和Mybatis的集成</strong></p>\n<h2 id=\"Spring集成Mybatis\"><a href=\"#Spring集成Mybatis\" class=\"headerlink\" title=\"Spring集成Mybatis?\"></a>Spring集成Mybatis?</h2><h3 id=\"Mybatis介绍\"><a href=\"#Mybatis介绍\" class=\"headerlink\" title=\"Mybatis介绍\"></a>Mybatis介绍</h3><p><a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\">了解Mybatis,请点击前往</a></p>\n<h3 id=\"如何集成\"><a href=\"#如何集成\" class=\"headerlink\" title=\"如何集成\"></a>如何集成</h3><h4 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h4><blockquote>\n<p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。 使用这个类库中的类, Spring 将会加载必要的 MyBatis 工厂类和 session 类。 这个类库也提供一个简单的方式来注入 MyBatis 数据映射器和 SqlSession 到业务层的 bean 中。 而且它也会处理事务, 翻译 MyBatis 的异常到 Spring 的 DataAccessException 异常(数据访问异常,译者注)中。最终,它并 不会依赖于 MyBatis,Spring 或 MyBatis-Spring 来构建应用程序代码。<br>要使用 MyBatis-Spring 模块,你只需要包含 mybatis-spring-x.x.x.jar 文 件就可以了,并在类路径中加入相关的依赖。</p>\n<p>如果你使用 Maven,那么在 pom.xml 中加入下面的代码即可:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</div><div class=\"line\">  &lt;version&gt;x.x.x&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><h5 id=\"Spring-XML配置\"><a href=\"#Spring-XML配置\" class=\"headerlink\" title=\"Spring XML配置\"></a>Spring XML配置</h5><p>1.dataSource</p>\n<p>配置数据源，此处我们使用dbcp2数据源</p>\n<p>2.SqlSessionFactoryBean</p>\n<ul>\n<li>用来集成Mybatis,它会创建SqlSessionFactory，SqlSessionFactory需要一个DataSource </li>\n<li><code>configLocation</code>用来指定Mybatis的配置文件路径及名称</li>\n<li><code>mapperLocations</code>用来指定Mybatis的XML映射文件</li>\n</ul>\n<p>新建orm_test.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\">       \t&lt;!-- 读取配置文件 --&gt;</div><div class=\"line\">        &lt;context:property-placeholder location=&quot;database.properties&quot;/&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;!-- 配置数据源 --&gt;</div><div class=\"line\">        &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;  </div><div class=\"line\">\t    destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;  </div><div class=\"line\">\t\t    &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;  </div><div class=\"line\">\t\t&lt;/bean&gt;</div><div class=\"line\"> \t \t</div><div class=\"line\"> \t \t&lt;!-- 在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。而在 MyBatis-Spring 中,则使用 SqlSessionFactoryBean 来替代 --&gt;</div><div class=\"line\"> \t \t&lt;!-- sqlSessionFactory配置 --&gt;\t </div><div class=\"line\"> \t \t&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\"> \t \t\t&lt;!-- 指定数据源 --&gt;</div><div class=\"line\">\t \t \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">\t \t \t&lt;!-- 指定mybatis配置文件 --&gt;</div><div class=\"line\">\t\t\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:configuration.xml&quot;/&gt; </div><div class=\"line\">\t\t\t&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/szl/springorm/dao/impl/*.xml&quot;&gt;&lt;/property&gt;</div><div class=\"line\"> \t \t&lt;/bean&gt;</div><div class=\"line\">&lt;beans&gt;</div></pre></td></tr></table></figure></p>\n<h5 id=\"Mybatis-XML配置\"><a href=\"#Mybatis-XML配置\" class=\"headerlink\" title=\"Mybatis XML配置\"></a>Mybatis XML配置</h5><p>新建configuration.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; </div><div class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">\t&lt;settings&gt;  </div><div class=\"line\">        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;false&quot;/&gt;  </div><div class=\"line\">    &lt;/settings&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.mybatis.org/mybatis-3/zh/configuration.html\">更多详细配置介绍,点击进入官网</a></p>\n<h5 id=\"Mybatis-映射文件配置\"><a href=\"#Mybatis-映射文件配置\" class=\"headerlink\" title=\"Mybatis 映射文件配置\"></a>Mybatis 映射文件配置</h5><ul>\n<li><p>DAO接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface UserDao &#123;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 增加用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint addUser(User user);</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 查询用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser();</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 删除用户</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tint delUserById(Long id);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>映射XML文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</div><div class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</div><div class=\"line\">&lt;!-- 命名空间,指向DAO接口 --&gt;</div><div class=\"line\">&lt;mapper namespace=&quot;com.szl.springorm.dao.UserDao&quot; &gt;</div><div class=\"line\"> </div><div class=\"line\"> &lt;!-- 查询用户 --&gt;</div><div class=\"line\"> &lt;select id=&quot;queryUser&quot; resultType=&quot;java.util.Map&quot;&gt;</div><div class=\"line\"> \tselect * from t_users</div><div class=\"line\"> &lt;/select&gt;</div><div class=\"line\"> </div><div class=\"line\"> &lt;!-- 新增用户 --&gt;</div><div class=\"line\"> &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.szl.springorm.model.User&quot;&gt;</div><div class=\"line\"> \tINSERT INTO t_users(name,email)VALUES(#&#123;user.name&#125;,#&#123;user.email&#125;)</div><div class=\"line\"> &lt;/insert&gt;</div><div class=\"line\"> </div><div class=\"line\"> &lt;!-- 删除用户 --&gt;</div><div class=\"line\"> &lt;delete id=&quot;delUserById&quot; parameterType=&quot;java.lang.Long&quot;&gt;</div><div class=\"line\"> \tdelete from t_users where id=#&#123;id&#125;</div><div class=\"line\"> &lt;/delete&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/mapper&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html\">更多映射文件配置介绍,点击进入官网</a></p>\n<h5 id=\"测试一下\"><a href=\"#测试一下\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SpringOrmTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate ApplicationContext ac;</div><div class=\"line\">\t</div><div class=\"line\">\t@Before</div><div class=\"line\">\tpublic void init() &#123;</div><div class=\"line\">\t\tac = new ClassPathXmlApplicationContext(&quot;orm_test.xml&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 使用SqlSession进行数据库操作</div><div class=\"line\">\t * @author SongZhangLiang</div><div class=\"line\">\t */</div><div class=\"line\">\t@Test</div><div class=\"line\">\tpublic void testSqlSession() &#123;</div><div class=\"line\">\t\t/**</div><div class=\"line\">\t\t * 直接使用SqlSession进行数据库操作（使用指定的完全限定名“com.szl.springorm.dao.UserDao.queryUser”来调用映射语句）</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tSqlSession ss = null;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSqlSessionFactory ssf = ac.getBean(&quot;sqlSessionFactory&quot;,SqlSessionFactory.class);</div><div class=\"line\">\t\t\tss = ssf.openSession();</div><div class=\"line\">\t\t\tList&lt;Map&lt;String, Object&gt;&gt; selectList = ss.selectList(&quot;com.szl.springorm.dao.UserDao.queryUser&quot;);</div><div class=\"line\">\t\t\tSystem.out.println(&quot;testSqlSession:&quot;+selectList.toString());</div><div class=\"line\">\t\t\tss.commit();</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t//异常回滚</div><div class=\"line\">\t\t\tSystem.out.println(&quot;异常：&quot;+e);</div><div class=\"line\">\t\t\tss.rollback();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfinally &#123;</div><div class=\"line\">\t\t\tif(null != ss)</div><div class=\"line\">\t\t\t\tss.close();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t/**</div><div class=\"line\">\t\t * 直接使用SqlSession进行数据库操作（使用Mapper 接口）</div><div class=\"line\">\t\t */</div><div class=\"line\">//\t\tUserDao mapper = ss.getMapper(UserDao.class);</div><div class=\"line\">//\t\tSystem.out.println(&quot;mapper:&quot;+mapper.queryUser().toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><blockquote>\n<p>使用SqlSessionFactory来创建 SqlSession。一旦你获得一个session之后,你可以使用它来执行映射语句,提交或回滚连接,最后,当不再需要它的时候, 你可以关闭session</p>\n</blockquote>\n<p>这样操作依旧繁琐，MyBatis-Spring提供了SqlSessionTemplate，qlSessionTemplate是 MyBatis-Spring 的核心。 这个类负责管理 MyBatis的SqlSession,调用MyBatis的SQL方法, 翻译异常。<br>SqlSessionTemplate 是线程安全的, 可以被多个 DAO 所共享使用。</p>\n<h3 id=\"使用SqlSessionTemplate\"><a href=\"#使用SqlSessionTemplate\" class=\"headerlink\" title=\"使用SqlSessionTemplate\"></a>使用SqlSessionTemplate</h3><h4 id=\"Spring-XMl配置\"><a href=\"#Spring-XMl配置\" class=\"headerlink\" title=\"Spring XMl配置\"></a>Spring XMl配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\">  \t&lt;!-- 指定数据源 --&gt;</div><div class=\"line\">  \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  \t&lt;!-- 指定mybatis配置文件 --&gt;</div><div class=\"line\">\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:configuration.xml&quot;/&gt; </div><div class=\"line\">\t&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/szl/springorm/dao/impl/*.xml&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">  \t</div><div class=\"line\">&lt;!-- 1.使用sqlSessionTemplate,注入sqlSessionFactory --&gt;</div><div class=\"line\">&lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</div><div class=\"line\">  &lt;constructor-arg name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/constructor-arg&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试一下-1\"><a href=\"#测试一下-1\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 使用SqlSessionTemplate进行数据库操作</div><div class=\"line\"> * SqlSessionTemplate 是 MyBatis-Spring 的核心。</div><div class=\"line\"> * 这个类负责管理 MyBatis 的 SqlSession, 调用 MyBatis 的 SQL 方法, 翻译异常。 SqlSessionTemplate       是线程安全的, 可以被多个 DAO 所共享使用</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSqlSessionTemplate()&#123;</div><div class=\"line\">\tSqlSession ss = ac.getBean(&quot;sqlSessionTemplate&quot;,SqlSession.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; selectList = ss.selectList(&quot;com.szl.springorm.dao.UserDao.queryUser&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;testSqlSessionTemplate:&quot;+selectList.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用sqlSessionDaoSupport\"><a href=\"#使用sqlSessionDaoSupport\" class=\"headerlink\" title=\"使用sqlSessionDaoSupport\"></a>使用sqlSessionDaoSupport</h3><p>SqlSessionDaoSupport是一个抽象的支持类, 用来提供 SqlSession 。调用getSqlSession()方法会得到一个 SqlSessionTemplate,之后可以用于执行SQL方法</p>\n<h4 id=\"DAO的实现\"><a href=\"#DAO的实现\" class=\"headerlink\" title=\"DAO的实现\"></a>DAO的实现</h4><p><strong>使用SqlSessionDaoSupport的方法，需要编写DAO的实现类</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * </div><div class=\"line\"> * SqlSessionDaoSupport 是 一 个 抽象 的支 持 类, 提供 SqlSession.</div><div class=\"line\"> * 调 用 getSqlSession()方法你会得到一个 SqlSessionTemplate,之后可以用于执行 SQL 方法</div><div class=\"line\"> * </div><div class=\"line\"> * 使用SqlSessionDaoSupport的方法，需要编写DAO的实现类</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao&#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\treturn this.getSqlSession().insert(&quot;com.szl.springorm.dao.UserDao.addUser&quot;, user);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn this.getSqlSession().selectList(&quot;com.szl.springorm.dao.UserDao.queryUser&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn this.getSqlSession().delete(&quot;com.szl.springorm.dao.UserDao.delUserById&quot;,id);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Spring-XML配置-1\"><a href=\"#Spring-XML配置-1\" class=\"headerlink\" title=\"Spring XML配置\"></a>Spring XML配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</div><div class=\"line\">  &lt;!-- 指定数据源 --&gt;</div><div class=\"line\">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  &lt;!-- 指定mybatis配置文件 --&gt;</div><div class=\"line\">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:configuration.xml&quot;/&gt; </div><div class=\"line\">&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/szl/springorm/dao/impl/*.xml&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 2.使用sqlSessionDaoSupport,注入sqlSessionFactory--&gt;</div><div class=\"line\">&lt;bean id=&quot;userDaoImpl&quot; class=&quot;com.szl.springorm.dao.impl.UserDaoImpl&quot;&gt;</div><div class=\"line\">  &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试一下-2\"><a href=\"#测试一下-2\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 使用SqlSessionDaoSupport进行数据库操作</div><div class=\"line\"> * DAO的实现类必须要继承SqlSessionDaoSupport</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testSqlSessionDaoSupport()&#123;</div><div class=\"line\">\tUserDaoImpl userDaoImpl = ac.getBean(&quot;userDaoImpl&quot;,UserDaoImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testSqlSessionDaoSupport:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用MapperFactoryBean动态代理\"><a href=\"#使用MapperFactoryBean动态代理\" class=\"headerlink\" title=\"使用MapperFactoryBean动态代理\"></a>使用MapperFactoryBean动态代理</h3><p>为了代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate 编写数据访问对象 (DAO)的代码，MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean</p>\n<h4 id=\"编写DAO\"><a href=\"#编写DAO\" class=\"headerlink\" title=\"编写DAO\"></a>编写DAO</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface UserDao1 &#123;</div><div class=\"line\">/**</div><div class=\"line\"> * 增加用户</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">int addUser(User user);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 查询用户</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; queryUser();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 删除用户</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">int delUserById(Long id);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"编写Service实现类\"><a href=\"#编写Service实现类\" class=\"headerlink\" title=\"编写Service实现类\"></a>编写Service实现类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserServiceImpl implements UserService &#123;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\tprivate UserDao1 userDao1;</div><div class=\"line\">\t</div><div class=\"line\">    //增加set方法,方便注入</div><div class=\"line\">\tpublic void setUserDao1(UserDao1 userDao1) &#123;</div><div class=\"line\">\t\tthis.userDao1 = userDao1;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int addUser(User user) &#123;</div><div class=\"line\">\t\treturn userDao1.addUser(user);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic List&lt;Map&lt;String, Object&gt;&gt; queryUser() &#123;</div><div class=\"line\">\t\treturn userDao1.queryUser();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic int delUserById(Long id) &#123;</div><div class=\"line\">\t\treturn userDao1.delUserById(id);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Spring-XML配置-2\"><a href=\"#Spring-XML配置-2\" class=\"headerlink\" title=\"Spring XML配置\"></a>Spring XML配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 1.注册MapperFactoryBean --&gt;\t</div><div class=\"line\">&lt;bean id=&quot;userDao1&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</div><div class=\"line\">  &lt;!-- 注册映射器,也就是DAO接口 --&gt;</div><div class=\"line\">  &lt;property name=&quot;mapperInterface&quot; value=&quot;com.szl.springorm.dao.UserDao1&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</div><div class=\"line\">&lt;/bean&gt;</div><div class=\"line\">&lt;!-- 2.service中直接注入userDao --&gt; \t \t</div><div class=\"line\">&lt;bean id=&quot;userServiceImpl&quot; class=&quot;com.szl.springorm.service.impl.UserServiceImpl&quot;&gt;</div><div class=\"line\">  &lt;property name=&quot;userDao1&quot; ref=&quot;userDao1&quot;&gt;&lt;/property&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"测试一下-3\"><a href=\"#测试一下-3\" class=\"headerlink\" title=\"测试一下\"></a>测试一下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 使用MapperFactoryBean代理</div><div class=\"line\"> * 注意在这段代码中没有 SqlSession 或 MyBatis 的引用。也没有任何需要创建,打开或 关闭 session 的代码,MyBatis-Spring 会来关心它的。</div><div class=\"line\"> * @author SongZhangLiang</div><div class=\"line\"> */</div><div class=\"line\">@Test</div><div class=\"line\">public void testMapperFactoryBean()&#123;</div><div class=\"line\">\tUserServiceImpl userDaoImpl = ac.getBean(&quot;userServiceImpl&quot;,UserServiceImpl.class);</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; queryUser = userDaoImpl.queryUser();</div><div class=\"line\">\tSystem.out.println(&quot;testMapperFactoryBean:&quot;+queryUser.toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>如果有大量的映射文件，那么就需要在XML中配置大量的MapperFactoryBean，这样XML会非常的臃肿，为此MyBatis-Spring提供了MapperScannerConfigurer， 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。</p>\n<p>配置如下：</p>\n<blockquote>\n<p>basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。<br>MapperScannerConfigurer 属性不支持使用了 PropertyPlaceholderConfigurer 的属 性替换,因为会在 Spring 其中之前来它加载。但是,你可以使用 PropertiesFactoryBean 和 SpEL 表达式来作为替代。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</div><div class=\"line\">  &lt;!--basePackage属性是为映射器接口文件设置基本的包路径,也就是DAO的包--&gt;</div><div class=\"line\">  &lt;property name=&quot;basePackage&quot; value=&quot;com.szl.springorm.dao&quot;&gt;&lt;/property&gt;</div><div class=\"line\">  &lt;!-- 一个数据源，可以不配置sqlSessionFactory --&gt;</div><div class=\"line\">  &lt;!-- &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt; --&gt;</div><div class=\"line\">&lt;/bean&gt;</div></pre></td></tr></table></figure>\n"},{"title":"第四篇之Spring AOP","date":"2017-05-28T07:23:00.000Z","_content":"\n### AOP概念\nAOP是Aspect Oriented Programming的缩写，也就是面向切面编程的意思，其设计思想来源于代理模式，在此基础上进行封装扩展，最终形成了一些功能强大的AOP框架，如AspectJ。\n\n- 面向切面编程\n\n提供从另一个角度来考虑程序结构从而完善面向对象编程(OOP)，简单理解面向切面编程，就是在不改变原程序的基础上为代码增加新的功能，如增加日志输出、启动数据库事物等等；\n\n- 基本概念\n\n名称|解释\n---|---\n切入点（Pointcut）| 可以插入增强处理的方法\n连接点（Jointpoint）| 可以插入增强处理的方法，方法处称为连接点\n通知（Advice）| 在连接点执行的行为\n切面（Aspect）| 切入点和通知的集合\n\n- 增强处理（Advice）\n\n名称|解释\n---|---\nBefore Advice|前置通知，在切入点选择的连接点方法之前执行\nAfter Advice|后置通知，在切入点选择的连接点方法之后执行\nAfter returning Advice|后置返回通知，在切入点选择的连接点的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛任何异常\nAfter throwing Advice|后置异常通知，在切入点选择的连接点的方法抛出异常时执行的通知，必须是连接点处的方法抛出异常\nAround Advices|环绕通知，在切入点选择的连接点的方法前后都可以执行的通知\n\n### AOP的日志输出\n\n#### 业务代码\n\n即目标类，需要加入通知的类。\n\n我们此处模拟向数据库插入用户信息，定义的代码如下：\n\n- 模拟dao的实现\n\n```\npackage com.szl.springaop.dao.impl;\n\nimport com.szl.springaop.dao.UserDao;\n\npublic class UserDaoImpl implements UserDao{\n\n\t/**\n\t * 模拟向数据库插入用户信息\n\t */\n\t@Override\n\tpublic void insertUser() {\n\t\tSystem.out.println(\"向数组库插入用户信息\");\n\t}\n\t\n\n\n}\n\t\n\n```\n- 模拟service的实现\n\n```\npackage com.szl.springaop.service.impl;\n\nimport com.szl.springaop.dao.UserDao;\nimport com.szl.springaop.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\n\tprivate UserDao userDao;\n\t\n\tpublic UserDao getUserDao() {\n\t\treturn userDao;\n\t}\n\n\tpublic void setUserDao(UserDao userDao) {\n\t\tthis.userDao = userDao;\n\t}\n\n\t/**\n\t * 模拟向数据库插入用户数据\n\t */\n\t@Override\n\tpublic void insetUser() {\n\t\tuserDao.insertUser();\n\t}\n\n}\n\n\n```\n\n#### 日志代码\n\n即切面支持类，切面是切入点和通知的组合，而切面是通过配置方式定义的，因此在定义切面前，我们需要定义切面支持类，切面支持类提供了通知实现\n\n\n```\npackage com.szl.springaop.aop;\n\npublic class AopLog {\n\t\n\t/**\n\t * 前置通知\n\t * @author Andrew Song\n\t */\n\tpublic void beforeAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is beforeAdvice-----\");\n\t}\n\t/**\n\t * 后置通知\n\t * @author Andrew Song\n\t */\n\tpublic void afterAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is afterAdvice-----\");\n\t}\n\t\t\n\t/**\n\t * 后置返回通知\n\t * @author Andrew Song\n\t */\n\tpublic void afterReturningAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is afterReturningAdvice-----\");\n\t}\n\t/**\n\t * 后置异常通知\n\t * @author Andrew Song\n\t */\n\tpublic void afterThrowingAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is afterThrowingAdvice-----\");\n\t}\n\t\n\t/**\n\t * 环绕通知\n\t * @author Andrew Song\n\t */\n\tpublic void aroundAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is aroundAdvice-----\");\n\t}\n\t\n}\n\n```\n\n#### xml中的配置\n\n- 配置切面代码如下：\n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n\n    <bean id=\"userDao\" class=\"com.szl.springaop.dao.impl.UserDaoImpl\" />\n\t<bean id=\"userService\" class=\"com.szl.springaop.service.impl.UserServiceImpl\">\n\t\t<property name=\"userDao\" ref=\"userDao\"></property>\n\t</bean>\n\n\t<bean id=\"aopLog\" class=\"com.szl.springaop.aop.AopLog\"></bean>\n    \n\t<aop:config proxy-target-class=\"true\">\n\t\t<aop:pointcut expression=\"execution(* com.szl.springaop.service.impl.*.*(..))\" id=\"servicePointcut\"/>\n\t\t<aop:aspect ref=\"aopLog\">\n\t\t\t<aop:before method=\"beforeAdvice\" pointcut-ref=\"servicePointcut\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n\n```\n- 配置介绍\n1. 在spring容器中使用AOP配置，我们要在<beans>标签中引入AOP的命名空间，以导入与AOP配置相关的标签；\n2. 与AOP相关的配置都放在<aop:config>标签中；\n3.  `<aop:pointcut>`是切入点标签，可以在expression属性中配置切入点；\n4. `<aop:aspect>`是织入标签，在织入时要设置通知的类型,以上切面配置的意思是：在匹配\"servicePointcut\"的切入点方法之前织入\"aopLog\"对象的 \"beforeAdvice方法\"；\n\n### 运行结果\n\n```\n-----Hello,this is beforeAdvice-----\n向数组库插入用户信息\n\n```\n我们可以看到，前置通知已经正确的运行了。\n\n**ps:其他通知的运行结果就不再演示，可参考实例代码**\n\n### 其他配置\n\n#### 获取连接点信息\n\n- 切面支持类\n\n```\n/**\n * 前置通知,获取连接点信息\n * @author Andrew Song\n */\npublic void beforeAdviceJoinPoint(JoinPoint joinPoint){\n\tSystem.out.println(\"-----Hello,this is beforeAdviceJoinPoint-----\");\n\tSystem.out.println(\"连接点对象：\"+joinPoint.getTarget().getClass().getName());\n\tSystem.out.println(\"连接点方法：\"+joinPoint.getSignature());\n\tSystem.out.println(\"连接点参数：\"+joinPoint.getArgs().toString());\n}\n\n```\n\n- 输出结果\n\n```\n-----Hello,this is beforeAdviceJoinPoint-----\n连接点对象：com.szl.springaop.service.impl.UserServiceImpl\n连接点方法：void com.szl.springaop.service.impl.UserServiceImpl.insetUser()\n连接点参数：[Ljava.lang.Object;@429bffaa\n向数组库插入用户信息\n\n```\n\n#### 后置返回通知获取返回值\n\n- 切面支持类\n\n```\n/**\n * 后置返回通知-获取返回值\n * @author Andrew Song\n */\npublic void afterReturningAdviceObject(Object objectVal){\n\tSystem.out.println(\"-----Hello,this is afterReturningAdvice-----\");\n\tSystem.out.println(\"业务方法的返回值是：\"+objectVal);\n}\n\n```\n\n- XML配置\n\n```\n<aop:after-returning method=\"afterReturningAdviceObject\" pointcut-ref=\"servicePointcut\" returning=\"objectVal\"/>\n```\n**如果需要获取返回值，需要添加returning属性**\n\n- 输出结果\n\n```\n-----Hello,this is afterReturningAdvice-----\n业务方法的返回值是：你好，世界\n```\n\n#### 后置异常通知获取异常信息\n\n- 切面支持类\n\n```\n/**\n * 后置异常通知-获取异常信息\n * @author Andrew Song\n */\npublic void afterThrowingAdviceException(Exception ex){\n\tSystem.out.println(\"-----Hello,this is afterThrowingAdvice-----\");\n\tSystem.out.println(\"抛出的异常信息为：\"+ex.getMessage());\n}\n\t\n```\n\n- XML配置\n\n```\n<aop:after-throwing method=\"afterThrowingAdviceException\" pointcut-ref=\"servicePointcut\" throwing=\"ex\"/>\n```\n**如果需要获取返回的异常，需要添加throwing属性**\n\n- 输出结果\n\n```\n-----Hello,this is afterThrowingAdvice-----\n抛出的异常信息为：/ by zero\n```\n\n#### 强大的环绕通知\n\n环绕通知是功能最强大的通知处理，Spring把目标方法的控制权全部都交给了它，在环绕通知处理过程中，可以获取或修改目标方法的参数、返回值，可以对它进行异常处理，甚至可以决定目标方法是否放行。\n\n- 切面支持类\n\n```\n/**\n * 环绕通知\n * @author Andrew Song\n * @throws Throwable \n */\npublic void aroundAdvicePjp(ProceedingJoinPoint pjp) throws Throwable{\n\tSystem.out.println(\"-----目标方法之前输出：Hello,this is aroundAdvicePjp-----\");\n\t//获取目标方法的参数\n//\tObject[] args = pjp.getArgs();\n\tif(true){\n\t\tpjp.proceed();\n\t}\n\tSystem.out.println(\"-----目标方法之后输出：Hello,END-----\");\n}\n\t\n\n```\n\n- XML配置\n\n```\n<aop:around method=\"aroundAdvicePjp\" pointcut-ref=\"servicePointcut\"/>\n\n```\n\n- 输出结果\n\n```\n-----目标方法之前输出：Hello,this is aroundAdvicePjp-----\n向数组库插入用户信息\n-----目标方法之后输出：Hello,END-----\n```\n\n- 总结\n\n环绕通知的第一个参数必须是一个ProceedingJoinPoint的类型，其他getArgs()可以获取目标方法的参数，调用它的proceed()方法就是调用目标方法，所以可以通过它给目标方法传参并获取返回结果，总而言之，控制proceed()方法是否执行就相当于控制了目标方法是否执行。\n\n### 简化AOP配置\n\n#### 使用schema\n\n以上案列已经使用过schema形式实现了AOP的配置\n\n#### 使用annotation\n\n使用annotation之前，我们先了解AspectJ的概念，AspectJ是面向切面的框架，它扩展了JAV语言，@AspectJ使用JDK5.0注解和正规的AspectJ切点表达式语言。\n\n#### 注解类型\n名称|解释\n---|---\n@Aspect|声明切面\n@Before|前置通知\n@After|后置通知\n@AfterReturning|后置返回通知\n@AfterThrowing|后置异常通知\n\n\n#### 测试demo\n\n以前置通知为列子\n\n- 切面\n\n```\npackage com.szl.springaop.aop;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect //用@Aspect注解声明切面\npublic class AspectJLog {\n\n    /**\n     * 前置通知\n     * @author Andrew Song\n     */\n    @Before(\"execution(* com.szl.springaop.service.impl.*.*(..))\") //声明切入点和通知类型\n    public void beforeAdvice(){\n    \tSystem.out.println(\"----Hello,this is beforeAdvice,使用注解\");\n    }\n\n}\n\n```\n\n- test\n\n```\n@Test\npublic void testAdviceAspectJ() {\n\t//从容器中获取bean\n\tUserService us = ac.getBean(\"userService\",UserServiceImpl.class);\n\t//执行业务逻辑\n\tus.insetUser();\n}\n\n\n```\n\n- xml配置\n\n```\n<!--  Spring默认不支持@AspectJ风格的切面声明, 为了支持需要使用如下配置  -->\n<aop:aspectj-autoproxy />\n<bean id=\"aspectJLog\" class=\"com.szl.springaop.aop.AspectJLog\"></bean>\n\n```\n\n- 输出结果\n\n```\n----Hello,this is beforeAdvice,使用注解\n向数组库插入用户信息\n\n```\n\n- 总结\n\n1.配置文件需要使用`<aop:aspectj-autoproxy/>`来开启注解风格的@AspectJ支持\n\n2.注解风格可以减少在XML的配置\n\n\n\n\n\n\n\n\n","source":"_posts/编程/spring/第四篇之Spring AOP.md","raw":"---\ntitle: 第四篇之Spring AOP\ndate: 2017-05-28 15:23\ncategories: Spring的那点事\ntags: Spring\n---\n\n### AOP概念\nAOP是Aspect Oriented Programming的缩写，也就是面向切面编程的意思，其设计思想来源于代理模式，在此基础上进行封装扩展，最终形成了一些功能强大的AOP框架，如AspectJ。\n\n- 面向切面编程\n\n提供从另一个角度来考虑程序结构从而完善面向对象编程(OOP)，简单理解面向切面编程，就是在不改变原程序的基础上为代码增加新的功能，如增加日志输出、启动数据库事物等等；\n\n- 基本概念\n\n名称|解释\n---|---\n切入点（Pointcut）| 可以插入增强处理的方法\n连接点（Jointpoint）| 可以插入增强处理的方法，方法处称为连接点\n通知（Advice）| 在连接点执行的行为\n切面（Aspect）| 切入点和通知的集合\n\n- 增强处理（Advice）\n\n名称|解释\n---|---\nBefore Advice|前置通知，在切入点选择的连接点方法之前执行\nAfter Advice|后置通知，在切入点选择的连接点方法之后执行\nAfter returning Advice|后置返回通知，在切入点选择的连接点的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛任何异常\nAfter throwing Advice|后置异常通知，在切入点选择的连接点的方法抛出异常时执行的通知，必须是连接点处的方法抛出异常\nAround Advices|环绕通知，在切入点选择的连接点的方法前后都可以执行的通知\n\n### AOP的日志输出\n\n#### 业务代码\n\n即目标类，需要加入通知的类。\n\n我们此处模拟向数据库插入用户信息，定义的代码如下：\n\n- 模拟dao的实现\n\n```\npackage com.szl.springaop.dao.impl;\n\nimport com.szl.springaop.dao.UserDao;\n\npublic class UserDaoImpl implements UserDao{\n\n\t/**\n\t * 模拟向数据库插入用户信息\n\t */\n\t@Override\n\tpublic void insertUser() {\n\t\tSystem.out.println(\"向数组库插入用户信息\");\n\t}\n\t\n\n\n}\n\t\n\n```\n- 模拟service的实现\n\n```\npackage com.szl.springaop.service.impl;\n\nimport com.szl.springaop.dao.UserDao;\nimport com.szl.springaop.service.UserService;\n\npublic class UserServiceImpl implements UserService {\n\n\tprivate UserDao userDao;\n\t\n\tpublic UserDao getUserDao() {\n\t\treturn userDao;\n\t}\n\n\tpublic void setUserDao(UserDao userDao) {\n\t\tthis.userDao = userDao;\n\t}\n\n\t/**\n\t * 模拟向数据库插入用户数据\n\t */\n\t@Override\n\tpublic void insetUser() {\n\t\tuserDao.insertUser();\n\t}\n\n}\n\n\n```\n\n#### 日志代码\n\n即切面支持类，切面是切入点和通知的组合，而切面是通过配置方式定义的，因此在定义切面前，我们需要定义切面支持类，切面支持类提供了通知实现\n\n\n```\npackage com.szl.springaop.aop;\n\npublic class AopLog {\n\t\n\t/**\n\t * 前置通知\n\t * @author Andrew Song\n\t */\n\tpublic void beforeAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is beforeAdvice-----\");\n\t}\n\t/**\n\t * 后置通知\n\t * @author Andrew Song\n\t */\n\tpublic void afterAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is afterAdvice-----\");\n\t}\n\t\t\n\t/**\n\t * 后置返回通知\n\t * @author Andrew Song\n\t */\n\tpublic void afterReturningAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is afterReturningAdvice-----\");\n\t}\n\t/**\n\t * 后置异常通知\n\t * @author Andrew Song\n\t */\n\tpublic void afterThrowingAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is afterThrowingAdvice-----\");\n\t}\n\t\n\t/**\n\t * 环绕通知\n\t * @author Andrew Song\n\t */\n\tpublic void aroundAdvice(){\n\t\tSystem.out.println(\"-----Hello,this is aroundAdvice-----\");\n\t}\n\t\n}\n\n```\n\n#### xml中的配置\n\n- 配置切面代码如下：\n\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd\n\t\thttp://www.springframework.org/schema/tx\n\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n\t    http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\">\n\n    <bean id=\"userDao\" class=\"com.szl.springaop.dao.impl.UserDaoImpl\" />\n\t<bean id=\"userService\" class=\"com.szl.springaop.service.impl.UserServiceImpl\">\n\t\t<property name=\"userDao\" ref=\"userDao\"></property>\n\t</bean>\n\n\t<bean id=\"aopLog\" class=\"com.szl.springaop.aop.AopLog\"></bean>\n    \n\t<aop:config proxy-target-class=\"true\">\n\t\t<aop:pointcut expression=\"execution(* com.szl.springaop.service.impl.*.*(..))\" id=\"servicePointcut\"/>\n\t\t<aop:aspect ref=\"aopLog\">\n\t\t\t<aop:before method=\"beforeAdvice\" pointcut-ref=\"servicePointcut\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n\n```\n- 配置介绍\n1. 在spring容器中使用AOP配置，我们要在<beans>标签中引入AOP的命名空间，以导入与AOP配置相关的标签；\n2. 与AOP相关的配置都放在<aop:config>标签中；\n3.  `<aop:pointcut>`是切入点标签，可以在expression属性中配置切入点；\n4. `<aop:aspect>`是织入标签，在织入时要设置通知的类型,以上切面配置的意思是：在匹配\"servicePointcut\"的切入点方法之前织入\"aopLog\"对象的 \"beforeAdvice方法\"；\n\n### 运行结果\n\n```\n-----Hello,this is beforeAdvice-----\n向数组库插入用户信息\n\n```\n我们可以看到，前置通知已经正确的运行了。\n\n**ps:其他通知的运行结果就不再演示，可参考实例代码**\n\n### 其他配置\n\n#### 获取连接点信息\n\n- 切面支持类\n\n```\n/**\n * 前置通知,获取连接点信息\n * @author Andrew Song\n */\npublic void beforeAdviceJoinPoint(JoinPoint joinPoint){\n\tSystem.out.println(\"-----Hello,this is beforeAdviceJoinPoint-----\");\n\tSystem.out.println(\"连接点对象：\"+joinPoint.getTarget().getClass().getName());\n\tSystem.out.println(\"连接点方法：\"+joinPoint.getSignature());\n\tSystem.out.println(\"连接点参数：\"+joinPoint.getArgs().toString());\n}\n\n```\n\n- 输出结果\n\n```\n-----Hello,this is beforeAdviceJoinPoint-----\n连接点对象：com.szl.springaop.service.impl.UserServiceImpl\n连接点方法：void com.szl.springaop.service.impl.UserServiceImpl.insetUser()\n连接点参数：[Ljava.lang.Object;@429bffaa\n向数组库插入用户信息\n\n```\n\n#### 后置返回通知获取返回值\n\n- 切面支持类\n\n```\n/**\n * 后置返回通知-获取返回值\n * @author Andrew Song\n */\npublic void afterReturningAdviceObject(Object objectVal){\n\tSystem.out.println(\"-----Hello,this is afterReturningAdvice-----\");\n\tSystem.out.println(\"业务方法的返回值是：\"+objectVal);\n}\n\n```\n\n- XML配置\n\n```\n<aop:after-returning method=\"afterReturningAdviceObject\" pointcut-ref=\"servicePointcut\" returning=\"objectVal\"/>\n```\n**如果需要获取返回值，需要添加returning属性**\n\n- 输出结果\n\n```\n-----Hello,this is afterReturningAdvice-----\n业务方法的返回值是：你好，世界\n```\n\n#### 后置异常通知获取异常信息\n\n- 切面支持类\n\n```\n/**\n * 后置异常通知-获取异常信息\n * @author Andrew Song\n */\npublic void afterThrowingAdviceException(Exception ex){\n\tSystem.out.println(\"-----Hello,this is afterThrowingAdvice-----\");\n\tSystem.out.println(\"抛出的异常信息为：\"+ex.getMessage());\n}\n\t\n```\n\n- XML配置\n\n```\n<aop:after-throwing method=\"afterThrowingAdviceException\" pointcut-ref=\"servicePointcut\" throwing=\"ex\"/>\n```\n**如果需要获取返回的异常，需要添加throwing属性**\n\n- 输出结果\n\n```\n-----Hello,this is afterThrowingAdvice-----\n抛出的异常信息为：/ by zero\n```\n\n#### 强大的环绕通知\n\n环绕通知是功能最强大的通知处理，Spring把目标方法的控制权全部都交给了它，在环绕通知处理过程中，可以获取或修改目标方法的参数、返回值，可以对它进行异常处理，甚至可以决定目标方法是否放行。\n\n- 切面支持类\n\n```\n/**\n * 环绕通知\n * @author Andrew Song\n * @throws Throwable \n */\npublic void aroundAdvicePjp(ProceedingJoinPoint pjp) throws Throwable{\n\tSystem.out.println(\"-----目标方法之前输出：Hello,this is aroundAdvicePjp-----\");\n\t//获取目标方法的参数\n//\tObject[] args = pjp.getArgs();\n\tif(true){\n\t\tpjp.proceed();\n\t}\n\tSystem.out.println(\"-----目标方法之后输出：Hello,END-----\");\n}\n\t\n\n```\n\n- XML配置\n\n```\n<aop:around method=\"aroundAdvicePjp\" pointcut-ref=\"servicePointcut\"/>\n\n```\n\n- 输出结果\n\n```\n-----目标方法之前输出：Hello,this is aroundAdvicePjp-----\n向数组库插入用户信息\n-----目标方法之后输出：Hello,END-----\n```\n\n- 总结\n\n环绕通知的第一个参数必须是一个ProceedingJoinPoint的类型，其他getArgs()可以获取目标方法的参数，调用它的proceed()方法就是调用目标方法，所以可以通过它给目标方法传参并获取返回结果，总而言之，控制proceed()方法是否执行就相当于控制了目标方法是否执行。\n\n### 简化AOP配置\n\n#### 使用schema\n\n以上案列已经使用过schema形式实现了AOP的配置\n\n#### 使用annotation\n\n使用annotation之前，我们先了解AspectJ的概念，AspectJ是面向切面的框架，它扩展了JAV语言，@AspectJ使用JDK5.0注解和正规的AspectJ切点表达式语言。\n\n#### 注解类型\n名称|解释\n---|---\n@Aspect|声明切面\n@Before|前置通知\n@After|后置通知\n@AfterReturning|后置返回通知\n@AfterThrowing|后置异常通知\n\n\n#### 测试demo\n\n以前置通知为列子\n\n- 切面\n\n```\npackage com.szl.springaop.aop;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect //用@Aspect注解声明切面\npublic class AspectJLog {\n\n    /**\n     * 前置通知\n     * @author Andrew Song\n     */\n    @Before(\"execution(* com.szl.springaop.service.impl.*.*(..))\") //声明切入点和通知类型\n    public void beforeAdvice(){\n    \tSystem.out.println(\"----Hello,this is beforeAdvice,使用注解\");\n    }\n\n}\n\n```\n\n- test\n\n```\n@Test\npublic void testAdviceAspectJ() {\n\t//从容器中获取bean\n\tUserService us = ac.getBean(\"userService\",UserServiceImpl.class);\n\t//执行业务逻辑\n\tus.insetUser();\n}\n\n\n```\n\n- xml配置\n\n```\n<!--  Spring默认不支持@AspectJ风格的切面声明, 为了支持需要使用如下配置  -->\n<aop:aspectj-autoproxy />\n<bean id=\"aspectJLog\" class=\"com.szl.springaop.aop.AspectJLog\"></bean>\n\n```\n\n- 输出结果\n\n```\n----Hello,this is beforeAdvice,使用注解\n向数组库插入用户信息\n\n```\n\n- 总结\n\n1.配置文件需要使用`<aop:aspectj-autoproxy/>`来开启注解风格的@AspectJ支持\n\n2.注解风格可以减少在XML的配置\n\n\n\n\n\n\n\n\n","slug":"编程/spring/第四篇之Spring AOP","published":1,"updated":"2017-06-01T03:38:40.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3mv95lu000npkqys4hc1js6","content":"<h3 id=\"AOP概念\"><a href=\"#AOP概念\" class=\"headerlink\" title=\"AOP概念\"></a>AOP概念</h3><p>AOP是Aspect Oriented Programming的缩写，也就是面向切面编程的意思，其设计思想来源于代理模式，在此基础上进行封装扩展，最终形成了一些功能强大的AOP框架，如AspectJ。</p>\n<ul>\n<li>面向切面编程</li>\n</ul>\n<p>提供从另一个角度来考虑程序结构从而完善面向对象编程(OOP)，简单理解面向切面编程，就是在不改变原程序的基础上为代码增加新的功能，如增加日志输出、启动数据库事物等等；</p>\n<ul>\n<li>基本概念</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>切入点（Pointcut）</td>\n<td>可以插入增强处理的方法</td>\n</tr>\n<tr>\n<td>连接点（Jointpoint）</td>\n<td>可以插入增强处理的方法，方法处称为连接点</td>\n</tr>\n<tr>\n<td>通知（Advice）</td>\n<td>在连接点执行的行为</td>\n</tr>\n<tr>\n<td>切面（Aspect）</td>\n<td>切入点和通知的集合</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>增强处理（Advice）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before Advice</td>\n<td>前置通知，在切入点选择的连接点方法之前执行</td>\n</tr>\n<tr>\n<td>After Advice</td>\n<td>后置通知，在切入点选择的连接点方法之后执行</td>\n</tr>\n<tr>\n<td>After returning Advice</td>\n<td>后置返回通知，在切入点选择的连接点的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛任何异常</td>\n</tr>\n<tr>\n<td>After throwing Advice</td>\n<td>后置异常通知，在切入点选择的连接点的方法抛出异常时执行的通知，必须是连接点处的方法抛出异常</td>\n</tr>\n<tr>\n<td>Around Advices</td>\n<td>环绕通知，在切入点选择的连接点的方法前后都可以执行的通知</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"AOP的日志输出\"><a href=\"#AOP的日志输出\" class=\"headerlink\" title=\"AOP的日志输出\"></a>AOP的日志输出</h3><h4 id=\"业务代码\"><a href=\"#业务代码\" class=\"headerlink\" title=\"业务代码\"></a>业务代码</h4><p>即目标类，需要加入通知的类。</p>\n<p>我们此处模拟向数据库插入用户信息，定义的代码如下：</p>\n<ul>\n<li>模拟dao的实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.dao.impl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springaop.dao.UserDao;</div><div class=\"line\"></div><div class=\"line\">public class UserDaoImpl implements UserDao&#123;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 模拟向数据库插入用户信息</div><div class=\"line\">\t */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void insertUser() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;向数组库插入用户信息&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>模拟service的实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.service.impl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springaop.dao.UserDao;</div><div class=\"line\">import com.szl.springaop.service.UserService;</div><div class=\"line\"></div><div class=\"line\">public class UserServiceImpl implements UserService &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate UserDao userDao;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic UserDao getUserDao() &#123;</div><div class=\"line\">\t\treturn userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setUserDao(UserDao userDao) &#123;</div><div class=\"line\">\t\tthis.userDao = userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 模拟向数据库插入用户数据</div><div class=\"line\">\t */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void insetUser() &#123;</div><div class=\"line\">\t\tuserDao.insertUser();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"日志代码\"><a href=\"#日志代码\" class=\"headerlink\" title=\"日志代码\"></a>日志代码</h4><p>即切面支持类，切面是切入点和通知的组合，而切面是通过配置方式定义的，因此在定义切面前，我们需要定义切面支持类，切面支持类提供了通知实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.aop;</div><div class=\"line\"></div><div class=\"line\">public class AopLog &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 前置通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void beforeAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is beforeAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 后置通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void afterAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is afterAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 后置返回通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void afterReturningAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is afterReturningAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 后置异常通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void afterThrowingAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is afterThrowingAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 环绕通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void aroundAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is aroundAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"xml中的配置\"><a href=\"#xml中的配置\" class=\"headerlink\" title=\"xml中的配置\"></a>xml中的配置</h4><ul>\n<li>配置切面代码如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=&quot;userDao&quot; class=&quot;com.szl.springaop.dao.impl.UserDaoImpl&quot; /&gt;</div><div class=\"line\">\t&lt;bean id=&quot;userService&quot; class=&quot;com.szl.springaop.service.impl.UserServiceImpl&quot;&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;</div><div class=\"line\">\t&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;bean id=&quot;aopLog&quot; class=&quot;com.szl.springaop.aop.AopLog&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">    </div><div class=\"line\">\t&lt;aop:config proxy-target-class=&quot;true&quot;&gt;</div><div class=\"line\">\t\t&lt;aop:pointcut expression=&quot;execution(* com.szl.springaop.service.impl.*.*(..))&quot; id=&quot;servicePointcut&quot;/&gt;</div><div class=\"line\">\t\t&lt;aop:aspect ref=&quot;aopLog&quot;&gt;</div><div class=\"line\">\t\t\t&lt;aop:before method=&quot;beforeAdvice&quot; pointcut-ref=&quot;servicePointcut&quot;/&gt;</div><div class=\"line\">\t\t&lt;/aop:aspect&gt;</div><div class=\"line\">\t&lt;/aop:config&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>配置介绍</li>\n</ul>\n<ol>\n<li>在spring容器中使用AOP配置，我们要在<beans>标签中引入AOP的命名空间，以导入与AOP配置相关的标签；</beans></li>\n<li>与AOP相关的配置都放在<aop:config>标签中；</aop:config></li>\n<li><code>&lt;aop:pointcut&gt;</code>是切入点标签，可以在expression属性中配置切入点；</li>\n<li><code>&lt;aop:aspect&gt;</code>是织入标签，在织入时要设置通知的类型,以上切面配置的意思是：在匹配”servicePointcut”的切入点方法之前织入”aopLog”对象的 “beforeAdvice方法”；</li>\n</ol>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is beforeAdvice-----</div><div class=\"line\">向数组库插入用户信息</div></pre></td></tr></table></figure>\n<p>我们可以看到，前置通知已经正确的运行了。</p>\n<p><strong>ps:其他通知的运行结果就不再演示，可参考实例代码</strong></p>\n<h3 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h3><h4 id=\"获取连接点信息\"><a href=\"#获取连接点信息\" class=\"headerlink\" title=\"获取连接点信息\"></a>获取连接点信息</h4><ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 前置通知,获取连接点信息</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> */</div><div class=\"line\">public void beforeAdviceJoinPoint(JoinPoint joinPoint)&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----Hello,this is beforeAdviceJoinPoint-----&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;连接点对象：&quot;+joinPoint.getTarget().getClass().getName());</div><div class=\"line\">\tSystem.out.println(&quot;连接点方法：&quot;+joinPoint.getSignature());</div><div class=\"line\">\tSystem.out.println(&quot;连接点参数：&quot;+joinPoint.getArgs().toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is beforeAdviceJoinPoint-----</div><div class=\"line\">连接点对象：com.szl.springaop.service.impl.UserServiceImpl</div><div class=\"line\">连接点方法：void com.szl.springaop.service.impl.UserServiceImpl.insetUser()</div><div class=\"line\">连接点参数：[Ljava.lang.Object;@429bffaa</div><div class=\"line\">向数组库插入用户信息</div></pre></td></tr></table></figure>\n<h4 id=\"后置返回通知获取返回值\"><a href=\"#后置返回通知获取返回值\" class=\"headerlink\" title=\"后置返回通知获取返回值\"></a>后置返回通知获取返回值</h4><ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 后置返回通知-获取返回值</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> */</div><div class=\"line\">public void afterReturningAdviceObject(Object objectVal)&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----Hello,this is afterReturningAdvice-----&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;业务方法的返回值是：&quot;+objectVal);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>XML配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:after-returning method=&quot;afterReturningAdviceObject&quot; pointcut-ref=&quot;servicePointcut&quot; returning=&quot;objectVal&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>如果需要获取返回值，需要添加returning属性</strong></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is afterReturningAdvice-----</div><div class=\"line\">业务方法的返回值是：你好，世界</div></pre></td></tr></table></figure>\n<h4 id=\"后置异常通知获取异常信息\"><a href=\"#后置异常通知获取异常信息\" class=\"headerlink\" title=\"后置异常通知获取异常信息\"></a>后置异常通知获取异常信息</h4><ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 后置异常通知-获取异常信息</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> */</div><div class=\"line\">public void afterThrowingAdviceException(Exception ex)&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----Hello,this is afterThrowingAdvice-----&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;抛出的异常信息为：&quot;+ex.getMessage());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>XML配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:after-throwing method=&quot;afterThrowingAdviceException&quot; pointcut-ref=&quot;servicePointcut&quot; throwing=&quot;ex&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>如果需要获取返回的异常，需要添加throwing属性</strong></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is afterThrowingAdvice-----</div><div class=\"line\">抛出的异常信息为：/ by zero</div></pre></td></tr></table></figure>\n<h4 id=\"强大的环绕通知\"><a href=\"#强大的环绕通知\" class=\"headerlink\" title=\"强大的环绕通知\"></a>强大的环绕通知</h4><p>环绕通知是功能最强大的通知处理，Spring把目标方法的控制权全部都交给了它，在环绕通知处理过程中，可以获取或修改目标方法的参数、返回值，可以对它进行异常处理，甚至可以决定目标方法是否放行。</p>\n<ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 环绕通知</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> * @throws Throwable </div><div class=\"line\"> */</div><div class=\"line\">public void aroundAdvicePjp(ProceedingJoinPoint pjp) throws Throwable&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----目标方法之前输出：Hello,this is aroundAdvicePjp-----&quot;);</div><div class=\"line\">\t//获取目标方法的参数</div><div class=\"line\">//\tObject[] args = pjp.getArgs();</div><div class=\"line\">\tif(true)&#123;</div><div class=\"line\">\t\tpjp.proceed();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tSystem.out.println(&quot;-----目标方法之后输出：Hello,END-----&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>XML配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:around method=&quot;aroundAdvicePjp&quot; pointcut-ref=&quot;servicePointcut&quot;/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----目标方法之前输出：Hello,this is aroundAdvicePjp-----</div><div class=\"line\">向数组库插入用户信息</div><div class=\"line\">-----目标方法之后输出：Hello,END-----</div></pre></td></tr></table></figure>\n<ul>\n<li>总结</li>\n</ul>\n<p>环绕通知的第一个参数必须是一个ProceedingJoinPoint的类型，其他getArgs()可以获取目标方法的参数，调用它的proceed()方法就是调用目标方法，所以可以通过它给目标方法传参并获取返回结果，总而言之，控制proceed()方法是否执行就相当于控制了目标方法是否执行。</p>\n<h3 id=\"简化AOP配置\"><a href=\"#简化AOP配置\" class=\"headerlink\" title=\"简化AOP配置\"></a>简化AOP配置</h3><h4 id=\"使用schema\"><a href=\"#使用schema\" class=\"headerlink\" title=\"使用schema\"></a>使用schema</h4><p>以上案列已经使用过schema形式实现了AOP的配置</p>\n<h4 id=\"使用annotation\"><a href=\"#使用annotation\" class=\"headerlink\" title=\"使用annotation\"></a>使用annotation</h4><p>使用annotation之前，我们先了解AspectJ的概念，AspectJ是面向切面的框架，它扩展了JAV语言，@AspectJ使用JDK5.0注解和正规的AspectJ切点表达式语言。</p>\n<h4 id=\"注解类型\"><a href=\"#注解类型\" class=\"headerlink\" title=\"注解类型\"></a>注解类型</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Aspect</td>\n<td>声明切面</td>\n</tr>\n<tr>\n<td>@Before</td>\n<td>前置通知</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>后置通知</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>后置返回通知</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>后置异常通知</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"测试demo\"><a href=\"#测试demo\" class=\"headerlink\" title=\"测试demo\"></a>测试demo</h4><p>以前置通知为列子</p>\n<ul>\n<li>切面</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.aop;</div><div class=\"line\"></div><div class=\"line\">import org.aspectj.lang.annotation.Aspect;</div><div class=\"line\">import org.aspectj.lang.annotation.Before;</div><div class=\"line\"></div><div class=\"line\">@Aspect //用@Aspect注解声明切面</div><div class=\"line\">public class AspectJLog &#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 前置通知</div><div class=\"line\">     * @author Andrew Song</div><div class=\"line\">     */</div><div class=\"line\">    @Before(&quot;execution(* com.szl.springaop.service.impl.*.*(..))&quot;) //声明切入点和通知类型</div><div class=\"line\">    public void beforeAdvice()&#123;</div><div class=\"line\">    \tSystem.out.println(&quot;----Hello,this is beforeAdvice,使用注解&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testAdviceAspectJ() &#123;</div><div class=\"line\">\t//从容器中获取bean</div><div class=\"line\">\tUserService us = ac.getBean(&quot;userService&quot;,UserServiceImpl.class);</div><div class=\"line\">\t//执行业务逻辑</div><div class=\"line\">\tus.insetUser();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--  Spring默认不支持@AspectJ风格的切面声明, 为了支持需要使用如下配置  --&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy /&gt;</div><div class=\"line\">&lt;bean id=&quot;aspectJLog&quot; class=&quot;com.szl.springaop.aop.AspectJLog&quot;&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">----Hello,this is beforeAdvice,使用注解</div><div class=\"line\">向数组库插入用户信息</div></pre></td></tr></table></figure>\n<ul>\n<li>总结</li>\n</ul>\n<p>1.配置文件需要使用<code>&lt;aop:aspectj-autoproxy/&gt;</code>来开启注解风格的@AspectJ支持</p>\n<p>2.注解风格可以减少在XML的配置</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"AOP概念\"><a href=\"#AOP概念\" class=\"headerlink\" title=\"AOP概念\"></a>AOP概念</h3><p>AOP是Aspect Oriented Programming的缩写，也就是面向切面编程的意思，其设计思想来源于代理模式，在此基础上进行封装扩展，最终形成了一些功能强大的AOP框架，如AspectJ。</p>\n<ul>\n<li>面向切面编程</li>\n</ul>\n<p>提供从另一个角度来考虑程序结构从而完善面向对象编程(OOP)，简单理解面向切面编程，就是在不改变原程序的基础上为代码增加新的功能，如增加日志输出、启动数据库事物等等；</p>\n<ul>\n<li>基本概念</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>切入点（Pointcut）</td>\n<td>可以插入增强处理的方法</td>\n</tr>\n<tr>\n<td>连接点（Jointpoint）</td>\n<td>可以插入增强处理的方法，方法处称为连接点</td>\n</tr>\n<tr>\n<td>通知（Advice）</td>\n<td>在连接点执行的行为</td>\n</tr>\n<tr>\n<td>切面（Aspect）</td>\n<td>切入点和通知的集合</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>增强处理（Advice）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before Advice</td>\n<td>前置通知，在切入点选择的连接点方法之前执行</td>\n</tr>\n<tr>\n<td>After Advice</td>\n<td>后置通知，在切入点选择的连接点方法之后执行</td>\n</tr>\n<tr>\n<td>After returning Advice</td>\n<td>后置返回通知，在切入点选择的连接点的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛任何异常</td>\n</tr>\n<tr>\n<td>After throwing Advice</td>\n<td>后置异常通知，在切入点选择的连接点的方法抛出异常时执行的通知，必须是连接点处的方法抛出异常</td>\n</tr>\n<tr>\n<td>Around Advices</td>\n<td>环绕通知，在切入点选择的连接点的方法前后都可以执行的通知</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"AOP的日志输出\"><a href=\"#AOP的日志输出\" class=\"headerlink\" title=\"AOP的日志输出\"></a>AOP的日志输出</h3><h4 id=\"业务代码\"><a href=\"#业务代码\" class=\"headerlink\" title=\"业务代码\"></a>业务代码</h4><p>即目标类，需要加入通知的类。</p>\n<p>我们此处模拟向数据库插入用户信息，定义的代码如下：</p>\n<ul>\n<li>模拟dao的实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.dao.impl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springaop.dao.UserDao;</div><div class=\"line\"></div><div class=\"line\">public class UserDaoImpl implements UserDao&#123;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 模拟向数据库插入用户信息</div><div class=\"line\">\t */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void insertUser() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;向数组库插入用户信息&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>模拟service的实现</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.service.impl;</div><div class=\"line\"></div><div class=\"line\">import com.szl.springaop.dao.UserDao;</div><div class=\"line\">import com.szl.springaop.service.UserService;</div><div class=\"line\"></div><div class=\"line\">public class UserServiceImpl implements UserService &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate UserDao userDao;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic UserDao getUserDao() &#123;</div><div class=\"line\">\t\treturn userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setUserDao(UserDao userDao) &#123;</div><div class=\"line\">\t\tthis.userDao = userDao;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 模拟向数据库插入用户数据</div><div class=\"line\">\t */</div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void insetUser() &#123;</div><div class=\"line\">\t\tuserDao.insertUser();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"日志代码\"><a href=\"#日志代码\" class=\"headerlink\" title=\"日志代码\"></a>日志代码</h4><p>即切面支持类，切面是切入点和通知的组合，而切面是通过配置方式定义的，因此在定义切面前，我们需要定义切面支持类，切面支持类提供了通知实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.aop;</div><div class=\"line\"></div><div class=\"line\">public class AopLog &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 前置通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void beforeAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is beforeAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 后置通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void afterAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is afterAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 后置返回通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void afterReturningAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is afterReturningAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 后置异常通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void afterThrowingAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is afterThrowingAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t/**</div><div class=\"line\">\t * 环绕通知</div><div class=\"line\">\t * @author Andrew Song</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void aroundAdvice()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;-----Hello,this is aroundAdvice-----&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"xml中的配置\"><a href=\"#xml中的配置\" class=\"headerlink\" title=\"xml中的配置\"></a>xml中的配置</h4><ul>\n<li>配置切面代码如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">\txsi:schemaLocation=&quot;</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx</div><div class=\"line\">\t\thttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class=\"line\">\t    http://www.springframework.org/schema/aop </div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=&quot;userDao&quot; class=&quot;com.szl.springaop.dao.impl.UserDaoImpl&quot; /&gt;</div><div class=\"line\">\t&lt;bean id=&quot;userService&quot; class=&quot;com.szl.springaop.service.impl.UserServiceImpl&quot;&gt;</div><div class=\"line\">\t\t&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;</div><div class=\"line\">\t&lt;/bean&gt;</div><div class=\"line\"></div><div class=\"line\">\t&lt;bean id=&quot;aopLog&quot; class=&quot;com.szl.springaop.aop.AopLog&quot;&gt;&lt;/bean&gt;</div><div class=\"line\">    </div><div class=\"line\">\t&lt;aop:config proxy-target-class=&quot;true&quot;&gt;</div><div class=\"line\">\t\t&lt;aop:pointcut expression=&quot;execution(* com.szl.springaop.service.impl.*.*(..))&quot; id=&quot;servicePointcut&quot;/&gt;</div><div class=\"line\">\t\t&lt;aop:aspect ref=&quot;aopLog&quot;&gt;</div><div class=\"line\">\t\t\t&lt;aop:before method=&quot;beforeAdvice&quot; pointcut-ref=&quot;servicePointcut&quot;/&gt;</div><div class=\"line\">\t\t&lt;/aop:aspect&gt;</div><div class=\"line\">\t&lt;/aop:config&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>配置介绍</li>\n</ul>\n<ol>\n<li>在spring容器中使用AOP配置，我们要在<beans>标签中引入AOP的命名空间，以导入与AOP配置相关的标签；</li>\n<li>与AOP相关的配置都放在<aop:config>标签中；</li>\n<li><code>&lt;aop:pointcut&gt;</code>是切入点标签，可以在expression属性中配置切入点；</li>\n<li><code>&lt;aop:aspect&gt;</code>是织入标签，在织入时要设置通知的类型,以上切面配置的意思是：在匹配”servicePointcut”的切入点方法之前织入”aopLog”对象的 “beforeAdvice方法”；</li>\n</ol>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is beforeAdvice-----</div><div class=\"line\">向数组库插入用户信息</div></pre></td></tr></table></figure>\n<p>我们可以看到，前置通知已经正确的运行了。</p>\n<p><strong>ps:其他通知的运行结果就不再演示，可参考实例代码</strong></p>\n<h3 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h3><h4 id=\"获取连接点信息\"><a href=\"#获取连接点信息\" class=\"headerlink\" title=\"获取连接点信息\"></a>获取连接点信息</h4><ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 前置通知,获取连接点信息</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> */</div><div class=\"line\">public void beforeAdviceJoinPoint(JoinPoint joinPoint)&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----Hello,this is beforeAdviceJoinPoint-----&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;连接点对象：&quot;+joinPoint.getTarget().getClass().getName());</div><div class=\"line\">\tSystem.out.println(&quot;连接点方法：&quot;+joinPoint.getSignature());</div><div class=\"line\">\tSystem.out.println(&quot;连接点参数：&quot;+joinPoint.getArgs().toString());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is beforeAdviceJoinPoint-----</div><div class=\"line\">连接点对象：com.szl.springaop.service.impl.UserServiceImpl</div><div class=\"line\">连接点方法：void com.szl.springaop.service.impl.UserServiceImpl.insetUser()</div><div class=\"line\">连接点参数：[Ljava.lang.Object;@429bffaa</div><div class=\"line\">向数组库插入用户信息</div></pre></td></tr></table></figure>\n<h4 id=\"后置返回通知获取返回值\"><a href=\"#后置返回通知获取返回值\" class=\"headerlink\" title=\"后置返回通知获取返回值\"></a>后置返回通知获取返回值</h4><ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 后置返回通知-获取返回值</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> */</div><div class=\"line\">public void afterReturningAdviceObject(Object objectVal)&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----Hello,this is afterReturningAdvice-----&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;业务方法的返回值是：&quot;+objectVal);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>XML配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:after-returning method=&quot;afterReturningAdviceObject&quot; pointcut-ref=&quot;servicePointcut&quot; returning=&quot;objectVal&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>如果需要获取返回值，需要添加returning属性</strong></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is afterReturningAdvice-----</div><div class=\"line\">业务方法的返回值是：你好，世界</div></pre></td></tr></table></figure>\n<h4 id=\"后置异常通知获取异常信息\"><a href=\"#后置异常通知获取异常信息\" class=\"headerlink\" title=\"后置异常通知获取异常信息\"></a>后置异常通知获取异常信息</h4><ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 后置异常通知-获取异常信息</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> */</div><div class=\"line\">public void afterThrowingAdviceException(Exception ex)&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----Hello,this is afterThrowingAdvice-----&quot;);</div><div class=\"line\">\tSystem.out.println(&quot;抛出的异常信息为：&quot;+ex.getMessage());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>XML配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:after-throwing method=&quot;afterThrowingAdviceException&quot; pointcut-ref=&quot;servicePointcut&quot; throwing=&quot;ex&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>如果需要获取返回的异常，需要添加throwing属性</strong></p>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----Hello,this is afterThrowingAdvice-----</div><div class=\"line\">抛出的异常信息为：/ by zero</div></pre></td></tr></table></figure>\n<h4 id=\"强大的环绕通知\"><a href=\"#强大的环绕通知\" class=\"headerlink\" title=\"强大的环绕通知\"></a>强大的环绕通知</h4><p>环绕通知是功能最强大的通知处理，Spring把目标方法的控制权全部都交给了它，在环绕通知处理过程中，可以获取或修改目标方法的参数、返回值，可以对它进行异常处理，甚至可以决定目标方法是否放行。</p>\n<ul>\n<li>切面支持类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 环绕通知</div><div class=\"line\"> * @author Andrew Song</div><div class=\"line\"> * @throws Throwable </div><div class=\"line\"> */</div><div class=\"line\">public void aroundAdvicePjp(ProceedingJoinPoint pjp) throws Throwable&#123;</div><div class=\"line\">\tSystem.out.println(&quot;-----目标方法之前输出：Hello,this is aroundAdvicePjp-----&quot;);</div><div class=\"line\">\t//获取目标方法的参数</div><div class=\"line\">//\tObject[] args = pjp.getArgs();</div><div class=\"line\">\tif(true)&#123;</div><div class=\"line\">\t\tpjp.proceed();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tSystem.out.println(&quot;-----目标方法之后输出：Hello,END-----&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>XML配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:around method=&quot;aroundAdvicePjp&quot; pointcut-ref=&quot;servicePointcut&quot;/&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-----目标方法之前输出：Hello,this is aroundAdvicePjp-----</div><div class=\"line\">向数组库插入用户信息</div><div class=\"line\">-----目标方法之后输出：Hello,END-----</div></pre></td></tr></table></figure>\n<ul>\n<li>总结</li>\n</ul>\n<p>环绕通知的第一个参数必须是一个ProceedingJoinPoint的类型，其他getArgs()可以获取目标方法的参数，调用它的proceed()方法就是调用目标方法，所以可以通过它给目标方法传参并获取返回结果，总而言之，控制proceed()方法是否执行就相当于控制了目标方法是否执行。</p>\n<h3 id=\"简化AOP配置\"><a href=\"#简化AOP配置\" class=\"headerlink\" title=\"简化AOP配置\"></a>简化AOP配置</h3><h4 id=\"使用schema\"><a href=\"#使用schema\" class=\"headerlink\" title=\"使用schema\"></a>使用schema</h4><p>以上案列已经使用过schema形式实现了AOP的配置</p>\n<h4 id=\"使用annotation\"><a href=\"#使用annotation\" class=\"headerlink\" title=\"使用annotation\"></a>使用annotation</h4><p>使用annotation之前，我们先了解AspectJ的概念，AspectJ是面向切面的框架，它扩展了JAV语言，@AspectJ使用JDK5.0注解和正规的AspectJ切点表达式语言。</p>\n<h4 id=\"注解类型\"><a href=\"#注解类型\" class=\"headerlink\" title=\"注解类型\"></a>注解类型</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Aspect</td>\n<td>声明切面</td>\n</tr>\n<tr>\n<td>@Before</td>\n<td>前置通知</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>后置通知</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>后置返回通知</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>后置异常通知</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"测试demo\"><a href=\"#测试demo\" class=\"headerlink\" title=\"测试demo\"></a>测试demo</h4><p>以前置通知为列子</p>\n<ul>\n<li>切面</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.szl.springaop.aop;</div><div class=\"line\"></div><div class=\"line\">import org.aspectj.lang.annotation.Aspect;</div><div class=\"line\">import org.aspectj.lang.annotation.Before;</div><div class=\"line\"></div><div class=\"line\">@Aspect //用@Aspect注解声明切面</div><div class=\"line\">public class AspectJLog &#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 前置通知</div><div class=\"line\">     * @author Andrew Song</div><div class=\"line\">     */</div><div class=\"line\">    @Before(&quot;execution(* com.szl.springaop.service.impl.*.*(..))&quot;) //声明切入点和通知类型</div><div class=\"line\">    public void beforeAdvice()&#123;</div><div class=\"line\">    \tSystem.out.println(&quot;----Hello,this is beforeAdvice,使用注解&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>test</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Test</div><div class=\"line\">public void testAdviceAspectJ() &#123;</div><div class=\"line\">\t//从容器中获取bean</div><div class=\"line\">\tUserService us = ac.getBean(&quot;userService&quot;,UserServiceImpl.class);</div><div class=\"line\">\t//执行业务逻辑</div><div class=\"line\">\tus.insetUser();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>xml配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--  Spring默认不支持@AspectJ风格的切面声明, 为了支持需要使用如下配置  --&gt;</div><div class=\"line\">&lt;aop:aspectj-autoproxy /&gt;</div><div class=\"line\">&lt;bean id=&quot;aspectJLog&quot; class=&quot;com.szl.springaop.aop.AspectJLog&quot;&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>输出结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">----Hello,this is beforeAdvice,使用注解</div><div class=\"line\">向数组库插入用户信息</div></pre></td></tr></table></figure>\n<ul>\n<li>总结</li>\n</ul>\n<p>1.配置文件需要使用<code>&lt;aop:aspectj-autoproxy/&gt;</code>来开启注解风格的@AspectJ支持</p>\n<p>2.注解风格可以减少在XML的配置</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3mv95j80003pkqymax6xwer","category_id":"cj3mv95je0004pkqyqalitubl","_id":"cj3mv95jh0005pkqy5yxqzxxd"},{"post_id":"cj3mv95lb0006pkqy5hmeplso","category_id":"cj3mv95le0008pkqy6ye2wrs4","_id":"cj3mv95lp000hpkqy3osfnoaq"},{"post_id":"cj3mv95lc0007pkqy3jltsznc","category_id":"cj3mv95lm000dpkqy9vager40","_id":"cj3mv95lv000opkqyz8fb623f"},{"post_id":"cj3mv95lr000kpkqy4t8kva69","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95lz000spkqyroj0n1sy"},{"post_id":"cj3mv95lf0009pkqyz35l3ou3","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95m0000vpkqyaaefrk8c"},{"post_id":"cj3mv95lu000npkqys4hc1js6","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95m1000ypkqynanj63y6"},{"post_id":"cj3mv95lh000bpkqyakasstht","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95m30011pkqytd6lcqzx"},{"post_id":"cj3mv95ll000cpkqyg9nrh195","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95m50014pkqy3i8cyhz9"},{"post_id":"cj3mv95ln000epkqyngn61sa8","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95m60016pkqy86jb5mhq"},{"post_id":"cj3mv95lp000ipkqyj8f9ipxl","category_id":"cj3mv95lq000jpkqyy3yfptsv","_id":"cj3mv95m60017pkqywh3gjmuo"}],"PostTag":[{"post_id":"cj3mv95lc0007pkqy3jltsznc","tag_id":"cj3mv95lg000apkqyvomynmlb","_id":"cj3mv95lp000gpkqyxx1szgek"},{"post_id":"cj3mv95lp000ipkqyj8f9ipxl","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95lt000mpkqygrcz0p52"},{"post_id":"cj3mv95lf0009pkqyz35l3ou3","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95lw000qpkqyxuhq561y"},{"post_id":"cj3mv95lr000kpkqy4t8kva69","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95lz000tpkqy16jmr5jj"},{"post_id":"cj3mv95lu000npkqys4hc1js6","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95m1000wpkqynaqyoqgk"},{"post_id":"cj3mv95lh000bpkqyakasstht","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95m2000zpkqyi6jwi1sz"},{"post_id":"cj3mv95ll000cpkqyg9nrh195","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95m30012pkqy2buv93c6"},{"post_id":"cj3mv95ln000epkqyngn61sa8","tag_id":"cj3mv95ln000fpkqyy02j7g18","_id":"cj3mv95m50013pkqyf5x6jn67"}],"Tag":[{"name":"logback","_id":"cj3mv95lg000apkqyvomynmlb"},{"name":"Spring","_id":"cj3mv95ln000fpkqyy02j7g18"}]}}